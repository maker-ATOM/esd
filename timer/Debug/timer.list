
timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c60  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08002e00  08002e00  00012e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eb0  08002eb0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002eb0  08002eb0  00012eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002eb8  08002eb8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002eb8  08002eb8  00012eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ebc  08002ebc  00012ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000070  08002f30  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08002f30  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b05e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a03  00000000  00000000  0002b0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  0002cb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002d520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c05  00000000  00000000  0002de70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a89f  00000000  00000000  00044a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c355  00000000  00000000  0004f314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000db669  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003168  00000000  00000000  000db6bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002de8 	.word	0x08002de8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08002de8 	.word	0x08002de8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000580:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000584:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000588:	f003 0301 	and.w	r3, r3, #1
 800058c:	2b00      	cmp	r3, #0
 800058e:	d013      	beq.n	80005b8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000590:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000594:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000598:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800059c:	2b00      	cmp	r3, #0
 800059e:	d00b      	beq.n	80005b8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a0:	e000      	b.n	80005a4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d0f9      	beq.n	80005a2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	b2d2      	uxtb	r2, r2
 80005b6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b8:	687b      	ldr	r3, [r7, #4]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b086      	sub	sp, #24
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	60f8      	str	r0, [r7, #12]
 80005ce:	60b9      	str	r1, [r7, #8]
 80005d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
 80005d6:	e009      	b.n	80005ec <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	1c5a      	adds	r2, r3, #1
 80005dc:	60ba      	str	r2, [r7, #8]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ffc9 	bl	8000578 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	3301      	adds	r3, #1
 80005ea:	617b      	str	r3, [r7, #20]
 80005ec:	697a      	ldr	r2, [r7, #20]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	dbf1      	blt.n	80005d8 <_write+0x12>
	}
	return len;
 80005f4:	687b      	ldr	r3, [r7, #4]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3718      	adds	r7, #24
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint16_t timer_val = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	80bb      	strh	r3, [r7, #4]
	uint16_t prev_timer_val = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f000 fa45 	bl	8000a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f825 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 f8d1 	bl	80007bc <MX_GPIO_Init>
  MX_TIM3_Init();
 800061a:	f000 f881 	bl	8000720 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim3);
 800061e:	480d      	ldr	r0, [pc, #52]	; (8000654 <main+0x54>)
 8000620:	f001 f9b0 	bl	8001984 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  timer_val = __HAL_TIM_GET_COUNTER(&htim3);
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <main+0x54>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800062a:	80bb      	strh	r3, [r7, #4]

	  if (timer_val - prev_timer_val > 500 )
 800062c:	88ba      	ldrh	r2, [r7, #4]
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000636:	ddf5      	ble.n	8000624 <main+0x24>
	  {
		  printf("%d, %d\n", timer_val, prev_timer_val);
 8000638:	88bb      	ldrh	r3, [r7, #4]
 800063a:	88fa      	ldrh	r2, [r7, #6]
 800063c:	4619      	mov	r1, r3
 800063e:	4806      	ldr	r0, [pc, #24]	; (8000658 <main+0x58>)
 8000640:	f001 fc7c 	bl	8001f3c <iprintf>
		  HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_2);
 8000644:	2104      	movs	r1, #4
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <main+0x5c>)
 8000648:	f000 fd1d 	bl	8001086 <HAL_GPIO_TogglePin>
		  prev_timer_val = timer_val;
 800064c:	88bb      	ldrh	r3, [r7, #4]
 800064e:	80fb      	strh	r3, [r7, #6]
	  timer_val = __HAL_TIM_GET_COUNTER(&htim3);
 8000650:	e7e8      	b.n	8000624 <main+0x24>
 8000652:	bf00      	nop
 8000654:	20000098 	.word	0x20000098
 8000658:	08002e00 	.word	0x08002e00
 800065c:	40020800 	.word	0x40020800

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f001 fc5c 	bl	8001f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b23      	ldr	r3, [pc, #140]	; (8000718 <SystemClock_Config+0xb8>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a22      	ldr	r2, [pc, #136]	; (8000718 <SystemClock_Config+0xb8>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b20      	ldr	r3, [pc, #128]	; (8000718 <SystemClock_Config+0xb8>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b1d      	ldr	r3, [pc, #116]	; (800071c <SystemClock_Config+0xbc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006ac:	4a1b      	ldr	r2, [pc, #108]	; (800071c <SystemClock_Config+0xbc>)
 80006ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b19      	ldr	r3, [pc, #100]	; (800071c <SystemClock_Config+0xbc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c0:	2302      	movs	r3, #2
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c8:	2310      	movs	r3, #16
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fcf1 	bl	80010bc <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006e0:	f000 f89e 	bl	8000820 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 ff54 	bl	80015ac <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800070a:	f000 f889 	bl	8000820 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	; 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000726:	f107 0308 	add.w	r3, r7, #8
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000734:	463b      	mov	r3, r7
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800073c:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <MX_TIM3_Init+0x94>)
 800073e:	4a1e      	ldr	r2, [pc, #120]	; (80007b8 <MX_TIM3_Init+0x98>)
 8000740:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000-1;
 8000742:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <MX_TIM3_Init+0x94>)
 8000744:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000748:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074a:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_TIM3_Init+0x94>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65536-1;
 8000750:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <MX_TIM3_Init+0x94>)
 8000752:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000756:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000758:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_TIM3_Init+0x94>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_TIM3_Init+0x94>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000764:	4813      	ldr	r0, [pc, #76]	; (80007b4 <MX_TIM3_Init+0x94>)
 8000766:	f001 f8bd 	bl	80018e4 <HAL_TIM_Base_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000770:	f000 f856 	bl	8000820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000778:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	4619      	mov	r1, r3
 8000780:	480c      	ldr	r0, [pc, #48]	; (80007b4 <MX_TIM3_Init+0x94>)
 8000782:	f001 f959 	bl	8001a38 <HAL_TIM_ConfigClockSource>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800078c:	f000 f848 	bl	8000820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000790:	2300      	movs	r3, #0
 8000792:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000798:	463b      	mov	r3, r7
 800079a:	4619      	mov	r1, r3
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_TIM3_Init+0x94>)
 800079e:	f001 fb2d 	bl	8001dfc <HAL_TIMEx_MasterConfigSynchronization>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80007a8:	f000 f83a 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000098 	.word	0x20000098
 80007b8:	40000400 	.word	0x40000400

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d0:	2300      	movs	r3, #0
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_GPIO_Init+0x5c>)
 80007d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d8:	4a0f      	ldr	r2, [pc, #60]	; (8000818 <MX_GPIO_Init+0x5c>)
 80007da:	f043 0304 	orr.w	r3, r3, #4
 80007de:	6313      	str	r3, [r2, #48]	; 0x30
 80007e0:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_GPIO_Init+0x5c>)
 80007e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e4:	f003 0304 	and.w	r3, r3, #4
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2104      	movs	r1, #4
 80007f0:	480a      	ldr	r0, [pc, #40]	; (800081c <MX_GPIO_Init+0x60>)
 80007f2:	f000 fc2f 	bl	8001054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007f6:	2304      	movs	r3, #4
 80007f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	4619      	mov	r1, r3
 800080a:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_GPIO_Init+0x60>)
 800080c:	f000 fa9e 	bl	8000d4c <HAL_GPIO_Init>

}
 8000810:	bf00      	nop
 8000812:	3718      	adds	r7, #24
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40020800 	.word	0x40020800

08000820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000824:	b672      	cpsid	i
}
 8000826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000828:	e7fe      	b.n	8000828 <Error_Handler+0x8>
	...

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <HAL_MspInit+0x4c>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	4a0f      	ldr	r2, [pc, #60]	; (8000878 <HAL_MspInit+0x4c>)
 800083c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000840:	6453      	str	r3, [r2, #68]	; 0x44
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <HAL_MspInit+0x4c>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <HAL_MspInit+0x4c>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	4a08      	ldr	r2, [pc, #32]	; (8000878 <HAL_MspInit+0x4c>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085c:	6413      	str	r3, [r2, #64]	; 0x40
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_MspInit+0x4c>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800

0800087c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a0b      	ldr	r2, [pc, #44]	; (80008b8 <HAL_TIM_Base_MspInit+0x3c>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d10d      	bne.n	80008aa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <HAL_TIM_Base_MspInit+0x40>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	4a09      	ldr	r2, [pc, #36]	; (80008bc <HAL_TIM_Base_MspInit+0x40>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6413      	str	r3, [r2, #64]	; 0x40
 800089e:	4b07      	ldr	r3, [pc, #28]	; (80008bc <HAL_TIM_Base_MspInit+0x40>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008aa:	bf00      	nop
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40000400 	.word	0x40000400
 80008bc:	40023800 	.word	0x40023800

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <NMI_Handler+0x4>

080008c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <HardFault_Handler+0x4>

080008cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <MemManage_Handler+0x4>

080008d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <BusFault_Handler+0x4>

080008d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <UsageFault_Handler+0x4>

080008de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090c:	f000 f918 	bl	8000b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}

08000914 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	e00a      	b.n	800093c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000926:	f3af 8000 	nop.w
 800092a:	4601      	mov	r1, r0
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	1c5a      	adds	r2, r3, #1
 8000930:	60ba      	str	r2, [r7, #8]
 8000932:	b2ca      	uxtb	r2, r1
 8000934:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	3301      	adds	r3, #1
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	697a      	ldr	r2, [r7, #20]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	429a      	cmp	r2, r3
 8000942:	dbf0      	blt.n	8000926 <_read+0x12>
	}

return len;
 8000944:	687b      	ldr	r3, [r7, #4]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3718      	adds	r7, #24
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <_close>:
	}
	return len;
}

int _close(int file)
{
 800094e:	b480      	push	{r7}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
	return -1;
 8000956:	f04f 33ff 	mov.w	r3, #4294967295
}
 800095a:	4618      	mov	r0, r3
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000966:	b480      	push	{r7}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000976:	605a      	str	r2, [r3, #4]
	return 0;
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <_isatty>:

int _isatty(int file)
{
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
	return 1;
 800098e:	2301      	movs	r3, #1
}
 8000990:	4618      	mov	r0, r3
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
	return 0;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3714      	adds	r7, #20
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
	...

080009b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c0:	4a14      	ldr	r2, [pc, #80]	; (8000a14 <_sbrk+0x5c>)
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <_sbrk+0x60>)
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <_sbrk+0x64>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d102      	bne.n	80009da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <_sbrk+0x64>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <_sbrk+0x68>)
 80009d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <_sbrk+0x64>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4413      	add	r3, r2
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d207      	bcs.n	80009f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e8:	f001 fa76 	bl	8001ed8 <__errno>
 80009ec:	4603      	mov	r3, r0
 80009ee:	220c      	movs	r2, #12
 80009f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	e009      	b.n	8000a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <_sbrk+0x64>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <_sbrk+0x64>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <_sbrk+0x64>)
 8000a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20018000 	.word	0x20018000
 8000a18:	00000400 	.word	0x00000400
 8000a1c:	2000008c 	.word	0x2000008c
 8000a20:	200000f8 	.word	0x200000f8

08000a24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <SystemInit+0x20>)
 8000a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2e:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <SystemInit+0x20>)
 8000a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a4c:	480d      	ldr	r0, [pc, #52]	; (8000a84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a4e:	490e      	ldr	r1, [pc, #56]	; (8000a88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a50:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a54:	e002      	b.n	8000a5c <LoopCopyDataInit>

08000a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5a:	3304      	adds	r3, #4

08000a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a60:	d3f9      	bcc.n	8000a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a62:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a64:	4c0b      	ldr	r4, [pc, #44]	; (8000a94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a68:	e001      	b.n	8000a6e <LoopFillZerobss>

08000a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a6c:	3204      	adds	r2, #4

08000a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a70:	d3fb      	bcc.n	8000a6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a72:	f7ff ffd7 	bl	8000a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a76:	f001 fa35 	bl	8001ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a7a:	f7ff fdc1 	bl	8000600 <main>
  bx  lr    
 8000a7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a80:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a88:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a8c:	08002ec0 	.word	0x08002ec0
  ldr r2, =_sbss
 8000a90:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a94:	200000f4 	.word	0x200000f4

08000a98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a98:	e7fe      	b.n	8000a98 <ADC_IRQHandler>
	...

08000a9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <HAL_Init+0x40>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	; (8000adc <HAL_Init+0x40>)
 8000aa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <HAL_Init+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <HAL_Init+0x40>)
 8000ab2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <HAL_Init+0x40>)
 8000abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f000 f90d 	bl	8000ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f000 f808 	bl	8000ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad0:	f7ff feac 	bl	800082c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023c00 	.word	0x40023c00

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x54>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_InitTick+0x58>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f917 	bl	8000d32 <HAL_SYSTICK_Config>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00e      	b.n	8000b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b0f      	cmp	r3, #15
 8000b12:	d80a      	bhi.n	8000b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b14:	2200      	movs	r2, #0
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f000 f8ed 	bl	8000cfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <HAL_InitTick+0x5c>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e000      	b.n	8000b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000004 	.word	0x20000004

08000b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_IncTick+0x20>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_IncTick+0x24>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_IncTick+0x24>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000008 	.word	0x20000008
 8000b64:	200000e0 	.word	0x200000e0

08000b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <HAL_GetTick+0x14>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	200000e0 	.word	0x200000e0

08000b80 <__NVIC_SetPriorityGrouping>:
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb2:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	60d3      	str	r3, [r2, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_GetPriorityGrouping>:
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	f003 0307 	and.w	r3, r3, #7
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_SetPriority>:
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	db0a      	blt.n	8000c0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	490c      	ldr	r1, [pc, #48]	; (8000c30 <__NVIC_SetPriority+0x4c>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	0112      	lsls	r2, r2, #4
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	440b      	add	r3, r1
 8000c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c0c:	e00a      	b.n	8000c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4908      	ldr	r1, [pc, #32]	; (8000c34 <__NVIC_SetPriority+0x50>)
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	f003 030f 	and.w	r3, r3, #15
 8000c1a:	3b04      	subs	r3, #4
 8000c1c:	0112      	lsls	r2, r2, #4
 8000c1e:	b2d2      	uxtb	r2, r2
 8000c20:	440b      	add	r3, r1
 8000c22:	761a      	strb	r2, [r3, #24]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000e100 	.word	0xe000e100
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <NVIC_EncodePriority>:
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b089      	sub	sp, #36	; 0x24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	f1c3 0307 	rsb	r3, r3, #7
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	bf28      	it	cs
 8000c56:	2304      	movcs	r3, #4
 8000c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	2b06      	cmp	r3, #6
 8000c60:	d902      	bls.n	8000c68 <NVIC_EncodePriority+0x30>
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3b03      	subs	r3, #3
 8000c66:	e000      	b.n	8000c6a <NVIC_EncodePriority+0x32>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43da      	mvns	r2, r3
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c80:	f04f 31ff 	mov.w	r1, #4294967295
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8a:	43d9      	mvns	r1, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	4313      	orrs	r3, r2
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3724      	adds	r7, #36	; 0x24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
	...

08000ca0 <SysTick_Config>:
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb0:	d301      	bcc.n	8000cb6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00f      	b.n	8000cd6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <SysTick_Config+0x40>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cbe:	210f      	movs	r1, #15
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f7ff ff8e 	bl	8000be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <SysTick_Config+0x40>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cce:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <SysTick_Config+0x40>)
 8000cd0:	2207      	movs	r2, #7
 8000cd2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	e000e010 	.word	0xe000e010

08000ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff ff47 	bl	8000b80 <__NVIC_SetPriorityGrouping>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b086      	sub	sp, #24
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	4603      	mov	r3, r0
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]
 8000d06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d0c:	f7ff ff5c 	bl	8000bc8 <__NVIC_GetPriorityGrouping>
 8000d10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	68b9      	ldr	r1, [r7, #8]
 8000d16:	6978      	ldr	r0, [r7, #20]
 8000d18:	f7ff ff8e 	bl	8000c38 <NVIC_EncodePriority>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d22:	4611      	mov	r1, r2
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff5d 	bl	8000be4 <__NVIC_SetPriority>
}
 8000d2a:	bf00      	nop
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff ffb0 	bl	8000ca0 <SysTick_Config>
 8000d40:	4603      	mov	r3, r0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b089      	sub	sp, #36	; 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
 8000d66:	e159      	b.n	800101c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d68:	2201      	movs	r2, #1
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	f040 8148 	bne.w	8001016 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 0303 	and.w	r3, r3, #3
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d005      	beq.n	8000d9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d130      	bne.n	8000e00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	2203      	movs	r2, #3
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4013      	ands	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	68da      	ldr	r2, [r3, #12]
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	091b      	lsrs	r3, r3, #4
 8000dea:	f003 0201 	and.w	r2, r3, #1
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	d017      	beq.n	8000e3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	2203      	movs	r2, #3
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d123      	bne.n	8000e90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	08da      	lsrs	r2, r3, #3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3208      	adds	r2, #8
 8000e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	f003 0307 	and.w	r3, r3, #7
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	220f      	movs	r2, #15
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	691a      	ldr	r2, [r3, #16]
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	08da      	lsrs	r2, r3, #3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3208      	adds	r2, #8
 8000e8a:	69b9      	ldr	r1, [r7, #24]
 8000e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0203 	and.w	r2, r3, #3
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f000 80a2 	beq.w	8001016 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	4b57      	ldr	r3, [pc, #348]	; (8001034 <HAL_GPIO_Init+0x2e8>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	4a56      	ldr	r2, [pc, #344]	; (8001034 <HAL_GPIO_Init+0x2e8>)
 8000edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee2:	4b54      	ldr	r3, [pc, #336]	; (8001034 <HAL_GPIO_Init+0x2e8>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eee:	4a52      	ldr	r2, [pc, #328]	; (8001038 <HAL_GPIO_Init+0x2ec>)
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	089b      	lsrs	r3, r3, #2
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f003 0303 	and.w	r3, r3, #3
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	220f      	movs	r2, #15
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a49      	ldr	r2, [pc, #292]	; (800103c <HAL_GPIO_Init+0x2f0>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d019      	beq.n	8000f4e <HAL_GPIO_Init+0x202>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a48      	ldr	r2, [pc, #288]	; (8001040 <HAL_GPIO_Init+0x2f4>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d013      	beq.n	8000f4a <HAL_GPIO_Init+0x1fe>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a47      	ldr	r2, [pc, #284]	; (8001044 <HAL_GPIO_Init+0x2f8>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d00d      	beq.n	8000f46 <HAL_GPIO_Init+0x1fa>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a46      	ldr	r2, [pc, #280]	; (8001048 <HAL_GPIO_Init+0x2fc>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d007      	beq.n	8000f42 <HAL_GPIO_Init+0x1f6>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a45      	ldr	r2, [pc, #276]	; (800104c <HAL_GPIO_Init+0x300>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d101      	bne.n	8000f3e <HAL_GPIO_Init+0x1f2>
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	e008      	b.n	8000f50 <HAL_GPIO_Init+0x204>
 8000f3e:	2307      	movs	r3, #7
 8000f40:	e006      	b.n	8000f50 <HAL_GPIO_Init+0x204>
 8000f42:	2303      	movs	r3, #3
 8000f44:	e004      	b.n	8000f50 <HAL_GPIO_Init+0x204>
 8000f46:	2302      	movs	r3, #2
 8000f48:	e002      	b.n	8000f50 <HAL_GPIO_Init+0x204>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e000      	b.n	8000f50 <HAL_GPIO_Init+0x204>
 8000f4e:	2300      	movs	r3, #0
 8000f50:	69fa      	ldr	r2, [r7, #28]
 8000f52:	f002 0203 	and.w	r2, r2, #3
 8000f56:	0092      	lsls	r2, r2, #2
 8000f58:	4093      	lsls	r3, r2
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f60:	4935      	ldr	r1, [pc, #212]	; (8001038 <HAL_GPIO_Init+0x2ec>)
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	089b      	lsrs	r3, r3, #2
 8000f66:	3302      	adds	r3, #2
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f6e:	4b38      	ldr	r3, [pc, #224]	; (8001050 <HAL_GPIO_Init+0x304>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f92:	4a2f      	ldr	r2, [pc, #188]	; (8001050 <HAL_GPIO_Init+0x304>)
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f98:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <HAL_GPIO_Init+0x304>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fbc:	4a24      	ldr	r2, [pc, #144]	; (8001050 <HAL_GPIO_Init+0x304>)
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fc2:	4b23      	ldr	r3, [pc, #140]	; (8001050 <HAL_GPIO_Init+0x304>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fe6:	4a1a      	ldr	r2, [pc, #104]	; (8001050 <HAL_GPIO_Init+0x304>)
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_GPIO_Init+0x304>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001010:	4a0f      	ldr	r2, [pc, #60]	; (8001050 <HAL_GPIO_Init+0x304>)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3301      	adds	r3, #1
 800101a:	61fb      	str	r3, [r7, #28]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	2b0f      	cmp	r3, #15
 8001020:	f67f aea2 	bls.w	8000d68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3724      	adds	r7, #36	; 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800
 8001038:	40013800 	.word	0x40013800
 800103c:	40020000 	.word	0x40020000
 8001040:	40020400 	.word	0x40020400
 8001044:	40020800 	.word	0x40020800
 8001048:	40020c00 	.word	0x40020c00
 800104c:	40021000 	.word	0x40021000
 8001050:	40013c00 	.word	0x40013c00

08001054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	807b      	strh	r3, [r7, #2]
 8001060:	4613      	mov	r3, r2
 8001062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001064:	787b      	ldrb	r3, [r7, #1]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800106a:	887a      	ldrh	r2, [r7, #2]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001070:	e003      	b.n	800107a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001072:	887b      	ldrh	r3, [r7, #2]
 8001074:	041a      	lsls	r2, r3, #16
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	619a      	str	r2, [r3, #24]
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001086:	b480      	push	{r7}
 8001088:	b085      	sub	sp, #20
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	460b      	mov	r3, r1
 8001090:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001098:	887a      	ldrh	r2, [r7, #2]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4013      	ands	r3, r2
 800109e:	041a      	lsls	r2, r3, #16
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	43d9      	mvns	r1, r3
 80010a4:	887b      	ldrh	r3, [r7, #2]
 80010a6:	400b      	ands	r3, r1
 80010a8:	431a      	orrs	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	619a      	str	r2, [r3, #24]
}
 80010ae:	bf00      	nop
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e264      	b.n	8001598 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d075      	beq.n	80011c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010da:	4ba3      	ldr	r3, [pc, #652]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 030c 	and.w	r3, r3, #12
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	d00c      	beq.n	8001100 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010e6:	4ba0      	ldr	r3, [pc, #640]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ee:	2b08      	cmp	r3, #8
 80010f0:	d112      	bne.n	8001118 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010f2:	4b9d      	ldr	r3, [pc, #628]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010fe:	d10b      	bne.n	8001118 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001100:	4b99      	ldr	r3, [pc, #612]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d05b      	beq.n	80011c4 <HAL_RCC_OscConfig+0x108>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d157      	bne.n	80011c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e23f      	b.n	8001598 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001120:	d106      	bne.n	8001130 <HAL_RCC_OscConfig+0x74>
 8001122:	4b91      	ldr	r3, [pc, #580]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a90      	ldr	r2, [pc, #576]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e01d      	b.n	800116c <HAL_RCC_OscConfig+0xb0>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001138:	d10c      	bne.n	8001154 <HAL_RCC_OscConfig+0x98>
 800113a:	4b8b      	ldr	r3, [pc, #556]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a8a      	ldr	r2, [pc, #552]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	4b88      	ldr	r3, [pc, #544]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a87      	ldr	r2, [pc, #540]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 800114c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	e00b      	b.n	800116c <HAL_RCC_OscConfig+0xb0>
 8001154:	4b84      	ldr	r3, [pc, #528]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a83      	ldr	r2, [pc, #524]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 800115a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	4b81      	ldr	r3, [pc, #516]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a80      	ldr	r2, [pc, #512]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800116a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d013      	beq.n	800119c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001174:	f7ff fcf8 	bl	8000b68 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800117c:	f7ff fcf4 	bl	8000b68 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b64      	cmp	r3, #100	; 0x64
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e204      	b.n	8001598 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118e:	4b76      	ldr	r3, [pc, #472]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f0      	beq.n	800117c <HAL_RCC_OscConfig+0xc0>
 800119a:	e014      	b.n	80011c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119c:	f7ff fce4 	bl	8000b68 <HAL_GetTick>
 80011a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a4:	f7ff fce0 	bl	8000b68 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b64      	cmp	r3, #100	; 0x64
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e1f0      	b.n	8001598 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b6:	4b6c      	ldr	r3, [pc, #432]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1f0      	bne.n	80011a4 <HAL_RCC_OscConfig+0xe8>
 80011c2:	e000      	b.n	80011c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d063      	beq.n	800129a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011d2:	4b65      	ldr	r3, [pc, #404]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 030c 	and.w	r3, r3, #12
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00b      	beq.n	80011f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011de:	4b62      	ldr	r3, [pc, #392]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011e6:	2b08      	cmp	r3, #8
 80011e8:	d11c      	bne.n	8001224 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ea:	4b5f      	ldr	r3, [pc, #380]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d116      	bne.n	8001224 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f6:	4b5c      	ldr	r3, [pc, #368]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d005      	beq.n	800120e <HAL_RCC_OscConfig+0x152>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d001      	beq.n	800120e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e1c4      	b.n	8001598 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120e:	4b56      	ldr	r3, [pc, #344]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	4952      	ldr	r1, [pc, #328]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 800121e:	4313      	orrs	r3, r2
 8001220:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001222:	e03a      	b.n	800129a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d020      	beq.n	800126e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800122c:	4b4f      	ldr	r3, [pc, #316]	; (800136c <HAL_RCC_OscConfig+0x2b0>)
 800122e:	2201      	movs	r2, #1
 8001230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001232:	f7ff fc99 	bl	8000b68 <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800123a:	f7ff fc95 	bl	8000b68 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e1a5      	b.n	8001598 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124c:	4b46      	ldr	r3, [pc, #280]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0f0      	beq.n	800123a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001258:	4b43      	ldr	r3, [pc, #268]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	4940      	ldr	r1, [pc, #256]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001268:	4313      	orrs	r3, r2
 800126a:	600b      	str	r3, [r1, #0]
 800126c:	e015      	b.n	800129a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800126e:	4b3f      	ldr	r3, [pc, #252]	; (800136c <HAL_RCC_OscConfig+0x2b0>)
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001274:	f7ff fc78 	bl	8000b68 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800127c:	f7ff fc74 	bl	8000b68 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e184      	b.n	8001598 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128e:	4b36      	ldr	r3, [pc, #216]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d030      	beq.n	8001308 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d016      	beq.n	80012dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ae:	4b30      	ldr	r3, [pc, #192]	; (8001370 <HAL_RCC_OscConfig+0x2b4>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b4:	f7ff fc58 	bl	8000b68 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012bc:	f7ff fc54 	bl	8000b68 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e164      	b.n	8001598 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ce:	4b26      	ldr	r3, [pc, #152]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0f0      	beq.n	80012bc <HAL_RCC_OscConfig+0x200>
 80012da:	e015      	b.n	8001308 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <HAL_RCC_OscConfig+0x2b4>)
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e2:	f7ff fc41 	bl	8000b68 <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ea:	f7ff fc3d 	bl	8000b68 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e14d      	b.n	8001598 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012fc:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80012fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1f0      	bne.n	80012ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80a0 	beq.w	8001456 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10f      	bne.n	8001346 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001334:	6413      	str	r3, [r2, #64]	; 0x40
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001342:	2301      	movs	r3, #1
 8001344:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_RCC_OscConfig+0x2b8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134e:	2b00      	cmp	r3, #0
 8001350:	d121      	bne.n	8001396 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_RCC_OscConfig+0x2b8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a07      	ldr	r2, [pc, #28]	; (8001374 <HAL_RCC_OscConfig+0x2b8>)
 8001358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800135e:	f7ff fc03 	bl	8000b68 <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001364:	e011      	b.n	800138a <HAL_RCC_OscConfig+0x2ce>
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	42470000 	.word	0x42470000
 8001370:	42470e80 	.word	0x42470e80
 8001374:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001378:	f7ff fbf6 	bl	8000b68 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e106      	b.n	8001598 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138a:	4b85      	ldr	r3, [pc, #532]	; (80015a0 <HAL_RCC_OscConfig+0x4e4>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d106      	bne.n	80013ac <HAL_RCC_OscConfig+0x2f0>
 800139e:	4b81      	ldr	r3, [pc, #516]	; (80015a4 <HAL_RCC_OscConfig+0x4e8>)
 80013a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a2:	4a80      	ldr	r2, [pc, #512]	; (80015a4 <HAL_RCC_OscConfig+0x4e8>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6713      	str	r3, [r2, #112]	; 0x70
 80013aa:	e01c      	b.n	80013e6 <HAL_RCC_OscConfig+0x32a>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	2b05      	cmp	r3, #5
 80013b2:	d10c      	bne.n	80013ce <HAL_RCC_OscConfig+0x312>
 80013b4:	4b7b      	ldr	r3, [pc, #492]	; (80015a4 <HAL_RCC_OscConfig+0x4e8>)
 80013b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b8:	4a7a      	ldr	r2, [pc, #488]	; (80015a4 <HAL_RCC_OscConfig+0x4e8>)
 80013ba:	f043 0304 	orr.w	r3, r3, #4
 80013be:	6713      	str	r3, [r2, #112]	; 0x70
 80013c0:	4b78      	ldr	r3, [pc, #480]	; (80015a4 <HAL_RCC_OscConfig+0x4e8>)
 80013c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c4:	4a77      	ldr	r2, [pc, #476]	; (80015a4 <HAL_RCC_OscConfig+0x4e8>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6713      	str	r3, [r2, #112]	; 0x70
 80013cc:	e00b      	b.n	80013e6 <HAL_RCC_OscConfig+0x32a>
 80013ce:	4b75      	ldr	r3, [pc, #468]	; (80015a4 <HAL_RCC_OscConfig+0x4e8>)
 80013d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d2:	4a74      	ldr	r2, [pc, #464]	; (80015a4 <HAL_RCC_OscConfig+0x4e8>)
 80013d4:	f023 0301 	bic.w	r3, r3, #1
 80013d8:	6713      	str	r3, [r2, #112]	; 0x70
 80013da:	4b72      	ldr	r3, [pc, #456]	; (80015a4 <HAL_RCC_OscConfig+0x4e8>)
 80013dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013de:	4a71      	ldr	r2, [pc, #452]	; (80015a4 <HAL_RCC_OscConfig+0x4e8>)
 80013e0:	f023 0304 	bic.w	r3, r3, #4
 80013e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d015      	beq.n	800141a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ee:	f7ff fbbb 	bl	8000b68 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f4:	e00a      	b.n	800140c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013f6:	f7ff fbb7 	bl	8000b68 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	f241 3288 	movw	r2, #5000	; 0x1388
 8001404:	4293      	cmp	r3, r2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e0c5      	b.n	8001598 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800140c:	4b65      	ldr	r3, [pc, #404]	; (80015a4 <HAL_RCC_OscConfig+0x4e8>)
 800140e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0ee      	beq.n	80013f6 <HAL_RCC_OscConfig+0x33a>
 8001418:	e014      	b.n	8001444 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141a:	f7ff fba5 	bl	8000b68 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001420:	e00a      	b.n	8001438 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001422:	f7ff fba1 	bl	8000b68 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001430:	4293      	cmp	r3, r2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e0af      	b.n	8001598 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001438:	4b5a      	ldr	r3, [pc, #360]	; (80015a4 <HAL_RCC_OscConfig+0x4e8>)
 800143a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1ee      	bne.n	8001422 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001444:	7dfb      	ldrb	r3, [r7, #23]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d105      	bne.n	8001456 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800144a:	4b56      	ldr	r3, [pc, #344]	; (80015a4 <HAL_RCC_OscConfig+0x4e8>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a55      	ldr	r2, [pc, #340]	; (80015a4 <HAL_RCC_OscConfig+0x4e8>)
 8001450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 809b 	beq.w	8001596 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001460:	4b50      	ldr	r3, [pc, #320]	; (80015a4 <HAL_RCC_OscConfig+0x4e8>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 030c 	and.w	r3, r3, #12
 8001468:	2b08      	cmp	r3, #8
 800146a:	d05c      	beq.n	8001526 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	2b02      	cmp	r3, #2
 8001472:	d141      	bne.n	80014f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001474:	4b4c      	ldr	r3, [pc, #304]	; (80015a8 <HAL_RCC_OscConfig+0x4ec>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147a:	f7ff fb75 	bl	8000b68 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001482:	f7ff fb71 	bl	8000b68 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e081      	b.n	8001598 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001494:	4b43      	ldr	r3, [pc, #268]	; (80015a4 <HAL_RCC_OscConfig+0x4e8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1f0      	bne.n	8001482 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69da      	ldr	r2, [r3, #28]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a1b      	ldr	r3, [r3, #32]
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ae:	019b      	lsls	r3, r3, #6
 80014b0:	431a      	orrs	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b6:	085b      	lsrs	r3, r3, #1
 80014b8:	3b01      	subs	r3, #1
 80014ba:	041b      	lsls	r3, r3, #16
 80014bc:	431a      	orrs	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	061b      	lsls	r3, r3, #24
 80014c4:	4937      	ldr	r1, [pc, #220]	; (80015a4 <HAL_RCC_OscConfig+0x4e8>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ca:	4b37      	ldr	r3, [pc, #220]	; (80015a8 <HAL_RCC_OscConfig+0x4ec>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fb4a 	bl	8000b68 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d8:	f7ff fb46 	bl	8000b68 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e056      	b.n	8001598 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ea:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <HAL_RCC_OscConfig+0x4e8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0x41c>
 80014f6:	e04e      	b.n	8001596 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f8:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <HAL_RCC_OscConfig+0x4ec>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7ff fb33 	bl	8000b68 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001506:	f7ff fb2f 	bl	8000b68 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e03f      	b.n	8001598 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001518:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <HAL_RCC_OscConfig+0x4e8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f0      	bne.n	8001506 <HAL_RCC_OscConfig+0x44a>
 8001524:	e037      	b.n	8001596 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d101      	bne.n	8001532 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e032      	b.n	8001598 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <HAL_RCC_OscConfig+0x4e8>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d028      	beq.n	8001592 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800154a:	429a      	cmp	r2, r3
 800154c:	d121      	bne.n	8001592 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001558:	429a      	cmp	r2, r3
 800155a:	d11a      	bne.n	8001592 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001562:	4013      	ands	r3, r2
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001568:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800156a:	4293      	cmp	r3, r2
 800156c:	d111      	bne.n	8001592 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001578:	085b      	lsrs	r3, r3, #1
 800157a:	3b01      	subs	r3, #1
 800157c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800157e:	429a      	cmp	r2, r3
 8001580:	d107      	bne.n	8001592 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800158e:	429a      	cmp	r2, r3
 8001590:	d001      	beq.n	8001596 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40007000 	.word	0x40007000
 80015a4:	40023800 	.word	0x40023800
 80015a8:	42470060 	.word	0x42470060

080015ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e0cc      	b.n	800175a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015c0:	4b68      	ldr	r3, [pc, #416]	; (8001764 <HAL_RCC_ClockConfig+0x1b8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d90c      	bls.n	80015e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ce:	4b65      	ldr	r3, [pc, #404]	; (8001764 <HAL_RCC_ClockConfig+0x1b8>)
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d6:	4b63      	ldr	r3, [pc, #396]	; (8001764 <HAL_RCC_ClockConfig+0x1b8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d001      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e0b8      	b.n	800175a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d020      	beq.n	8001636 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001600:	4b59      	ldr	r3, [pc, #356]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	4a58      	ldr	r2, [pc, #352]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800160a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001618:	4b53      	ldr	r3, [pc, #332]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	4a52      	ldr	r2, [pc, #328]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001622:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001624:	4b50      	ldr	r3, [pc, #320]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	494d      	ldr	r1, [pc, #308]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	4313      	orrs	r3, r2
 8001634:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d044      	beq.n	80016cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d107      	bne.n	800165a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	4b47      	ldr	r3, [pc, #284]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d119      	bne.n	800168a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e07f      	b.n	800175a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d003      	beq.n	800166a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001666:	2b03      	cmp	r3, #3
 8001668:	d107      	bne.n	800167a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166a:	4b3f      	ldr	r3, [pc, #252]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d109      	bne.n	800168a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e06f      	b.n	800175a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167a:	4b3b      	ldr	r3, [pc, #236]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e067      	b.n	800175a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800168a:	4b37      	ldr	r3, [pc, #220]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f023 0203 	bic.w	r2, r3, #3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	4934      	ldr	r1, [pc, #208]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	4313      	orrs	r3, r2
 800169a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800169c:	f7ff fa64 	bl	8000b68 <HAL_GetTick>
 80016a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a2:	e00a      	b.n	80016ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a4:	f7ff fa60 	bl	8000b68 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e04f      	b.n	800175a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ba:	4b2b      	ldr	r3, [pc, #172]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 020c 	and.w	r2, r3, #12
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d1eb      	bne.n	80016a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016cc:	4b25      	ldr	r3, [pc, #148]	; (8001764 <HAL_RCC_ClockConfig+0x1b8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d20c      	bcs.n	80016f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016da:	4b22      	ldr	r3, [pc, #136]	; (8001764 <HAL_RCC_ClockConfig+0x1b8>)
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e2:	4b20      	ldr	r3, [pc, #128]	; (8001764 <HAL_RCC_ClockConfig+0x1b8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d001      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e032      	b.n	800175a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d008      	beq.n	8001712 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	4916      	ldr	r1, [pc, #88]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	4313      	orrs	r3, r2
 8001710:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	2b00      	cmp	r3, #0
 800171c:	d009      	beq.n	8001732 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800171e:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	490e      	ldr	r1, [pc, #56]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	4313      	orrs	r3, r2
 8001730:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001732:	f000 f821 	bl	8001778 <HAL_RCC_GetSysClockFreq>
 8001736:	4602      	mov	r2, r0
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	091b      	lsrs	r3, r3, #4
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	490a      	ldr	r1, [pc, #40]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 8001744:	5ccb      	ldrb	r3, [r1, r3]
 8001746:	fa22 f303 	lsr.w	r3, r2, r3
 800174a:	4a09      	ldr	r2, [pc, #36]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800174c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_RCC_ClockConfig+0x1c8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff f9c4 	bl	8000ae0 <HAL_InitTick>

  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023c00 	.word	0x40023c00
 8001768:	40023800 	.word	0x40023800
 800176c:	08002e08 	.word	0x08002e08
 8001770:	20000000 	.word	0x20000000
 8001774:	20000004 	.word	0x20000004

08001778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001778:	b5b0      	push	{r4, r5, r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800177e:	2100      	movs	r1, #0
 8001780:	6079      	str	r1, [r7, #4]
 8001782:	2100      	movs	r1, #0
 8001784:	60f9      	str	r1, [r7, #12]
 8001786:	2100      	movs	r1, #0
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800178a:	2100      	movs	r1, #0
 800178c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800178e:	4952      	ldr	r1, [pc, #328]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001790:	6889      	ldr	r1, [r1, #8]
 8001792:	f001 010c 	and.w	r1, r1, #12
 8001796:	2908      	cmp	r1, #8
 8001798:	d00d      	beq.n	80017b6 <HAL_RCC_GetSysClockFreq+0x3e>
 800179a:	2908      	cmp	r1, #8
 800179c:	f200 8094 	bhi.w	80018c8 <HAL_RCC_GetSysClockFreq+0x150>
 80017a0:	2900      	cmp	r1, #0
 80017a2:	d002      	beq.n	80017aa <HAL_RCC_GetSysClockFreq+0x32>
 80017a4:	2904      	cmp	r1, #4
 80017a6:	d003      	beq.n	80017b0 <HAL_RCC_GetSysClockFreq+0x38>
 80017a8:	e08e      	b.n	80018c8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017aa:	4b4c      	ldr	r3, [pc, #304]	; (80018dc <HAL_RCC_GetSysClockFreq+0x164>)
 80017ac:	60bb      	str	r3, [r7, #8]
       break;
 80017ae:	e08e      	b.n	80018ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017b0:	4b4b      	ldr	r3, [pc, #300]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80017b2:	60bb      	str	r3, [r7, #8]
      break;
 80017b4:	e08b      	b.n	80018ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017b6:	4948      	ldr	r1, [pc, #288]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80017b8:	6849      	ldr	r1, [r1, #4]
 80017ba:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80017be:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017c0:	4945      	ldr	r1, [pc, #276]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80017c2:	6849      	ldr	r1, [r1, #4]
 80017c4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80017c8:	2900      	cmp	r1, #0
 80017ca:	d024      	beq.n	8001816 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017cc:	4942      	ldr	r1, [pc, #264]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80017ce:	6849      	ldr	r1, [r1, #4]
 80017d0:	0989      	lsrs	r1, r1, #6
 80017d2:	4608      	mov	r0, r1
 80017d4:	f04f 0100 	mov.w	r1, #0
 80017d8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80017dc:	f04f 0500 	mov.w	r5, #0
 80017e0:	ea00 0204 	and.w	r2, r0, r4
 80017e4:	ea01 0305 	and.w	r3, r1, r5
 80017e8:	493d      	ldr	r1, [pc, #244]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80017ea:	fb01 f003 	mul.w	r0, r1, r3
 80017ee:	2100      	movs	r1, #0
 80017f0:	fb01 f102 	mul.w	r1, r1, r2
 80017f4:	1844      	adds	r4, r0, r1
 80017f6:	493a      	ldr	r1, [pc, #232]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80017f8:	fba2 0101 	umull	r0, r1, r2, r1
 80017fc:	1863      	adds	r3, r4, r1
 80017fe:	4619      	mov	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	461a      	mov	r2, r3
 8001804:	f04f 0300 	mov.w	r3, #0
 8001808:	f7fe fd3a 	bl	8000280 <__aeabi_uldivmod>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4613      	mov	r3, r2
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	e04a      	b.n	80018ac <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001816:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	099b      	lsrs	r3, r3, #6
 800181c:	461a      	mov	r2, r3
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001826:	f04f 0100 	mov.w	r1, #0
 800182a:	ea02 0400 	and.w	r4, r2, r0
 800182e:	ea03 0501 	and.w	r5, r3, r1
 8001832:	4620      	mov	r0, r4
 8001834:	4629      	mov	r1, r5
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	014b      	lsls	r3, r1, #5
 8001840:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001844:	0142      	lsls	r2, r0, #5
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	1b00      	subs	r0, r0, r4
 800184c:	eb61 0105 	sbc.w	r1, r1, r5
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	018b      	lsls	r3, r1, #6
 800185a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800185e:	0182      	lsls	r2, r0, #6
 8001860:	1a12      	subs	r2, r2, r0
 8001862:	eb63 0301 	sbc.w	r3, r3, r1
 8001866:	f04f 0000 	mov.w	r0, #0
 800186a:	f04f 0100 	mov.w	r1, #0
 800186e:	00d9      	lsls	r1, r3, #3
 8001870:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001874:	00d0      	lsls	r0, r2, #3
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	1912      	adds	r2, r2, r4
 800187c:	eb45 0303 	adc.w	r3, r5, r3
 8001880:	f04f 0000 	mov.w	r0, #0
 8001884:	f04f 0100 	mov.w	r1, #0
 8001888:	0299      	lsls	r1, r3, #10
 800188a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800188e:	0290      	lsls	r0, r2, #10
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4610      	mov	r0, r2
 8001896:	4619      	mov	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	461a      	mov	r2, r3
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	f7fe fcee 	bl	8000280 <__aeabi_uldivmod>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4613      	mov	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	0c1b      	lsrs	r3, r3, #16
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	3301      	adds	r3, #1
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c4:	60bb      	str	r3, [r7, #8]
      break;
 80018c6:	e002      	b.n	80018ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <HAL_RCC_GetSysClockFreq+0x164>)
 80018ca:	60bb      	str	r3, [r7, #8]
      break;
 80018cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ce:	68bb      	ldr	r3, [r7, #8]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bdb0      	pop	{r4, r5, r7, pc}
 80018d8:	40023800 	.word	0x40023800
 80018dc:	00f42400 	.word	0x00f42400
 80018e0:	017d7840 	.word	0x017d7840

080018e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e041      	b.n	800197a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d106      	bne.n	8001910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7fe ffb6 	bl	800087c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2202      	movs	r2, #2
 8001914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3304      	adds	r3, #4
 8001920:	4619      	mov	r1, r3
 8001922:	4610      	mov	r0, r2
 8001924:	f000 f950 	bl	8001bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b01      	cmp	r3, #1
 8001996:	d001      	beq.n	800199c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e03c      	b.n	8001a16 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2202      	movs	r2, #2
 80019a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a1e      	ldr	r2, [pc, #120]	; (8001a24 <HAL_TIM_Base_Start+0xa0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d018      	beq.n	80019e0 <HAL_TIM_Base_Start+0x5c>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b6:	d013      	beq.n	80019e0 <HAL_TIM_Base_Start+0x5c>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a1a      	ldr	r2, [pc, #104]	; (8001a28 <HAL_TIM_Base_Start+0xa4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d00e      	beq.n	80019e0 <HAL_TIM_Base_Start+0x5c>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a19      	ldr	r2, [pc, #100]	; (8001a2c <HAL_TIM_Base_Start+0xa8>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d009      	beq.n	80019e0 <HAL_TIM_Base_Start+0x5c>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a17      	ldr	r2, [pc, #92]	; (8001a30 <HAL_TIM_Base_Start+0xac>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d004      	beq.n	80019e0 <HAL_TIM_Base_Start+0x5c>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a16      	ldr	r2, [pc, #88]	; (8001a34 <HAL_TIM_Base_Start+0xb0>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d111      	bne.n	8001a04 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b06      	cmp	r3, #6
 80019f0:	d010      	beq.n	8001a14 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f042 0201 	orr.w	r2, r2, #1
 8001a00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a02:	e007      	b.n	8001a14 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0201 	orr.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40010000 	.word	0x40010000
 8001a28:	40000400 	.word	0x40000400
 8001a2c:	40000800 	.word	0x40000800
 8001a30:	40000c00 	.word	0x40000c00
 8001a34:	40014000 	.word	0x40014000

08001a38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_TIM_ConfigClockSource+0x1c>
 8001a50:	2302      	movs	r3, #2
 8001a52:	e0b4      	b.n	8001bbe <HAL_TIM_ConfigClockSource+0x186>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2202      	movs	r2, #2
 8001a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001a72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a8c:	d03e      	beq.n	8001b0c <HAL_TIM_ConfigClockSource+0xd4>
 8001a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a92:	f200 8087 	bhi.w	8001ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8001a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a9a:	f000 8086 	beq.w	8001baa <HAL_TIM_ConfigClockSource+0x172>
 8001a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aa2:	d87f      	bhi.n	8001ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8001aa4:	2b70      	cmp	r3, #112	; 0x70
 8001aa6:	d01a      	beq.n	8001ade <HAL_TIM_ConfigClockSource+0xa6>
 8001aa8:	2b70      	cmp	r3, #112	; 0x70
 8001aaa:	d87b      	bhi.n	8001ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8001aac:	2b60      	cmp	r3, #96	; 0x60
 8001aae:	d050      	beq.n	8001b52 <HAL_TIM_ConfigClockSource+0x11a>
 8001ab0:	2b60      	cmp	r3, #96	; 0x60
 8001ab2:	d877      	bhi.n	8001ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8001ab4:	2b50      	cmp	r3, #80	; 0x50
 8001ab6:	d03c      	beq.n	8001b32 <HAL_TIM_ConfigClockSource+0xfa>
 8001ab8:	2b50      	cmp	r3, #80	; 0x50
 8001aba:	d873      	bhi.n	8001ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8001abc:	2b40      	cmp	r3, #64	; 0x40
 8001abe:	d058      	beq.n	8001b72 <HAL_TIM_ConfigClockSource+0x13a>
 8001ac0:	2b40      	cmp	r3, #64	; 0x40
 8001ac2:	d86f      	bhi.n	8001ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8001ac4:	2b30      	cmp	r3, #48	; 0x30
 8001ac6:	d064      	beq.n	8001b92 <HAL_TIM_ConfigClockSource+0x15a>
 8001ac8:	2b30      	cmp	r3, #48	; 0x30
 8001aca:	d86b      	bhi.n	8001ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8001acc:	2b20      	cmp	r3, #32
 8001ace:	d060      	beq.n	8001b92 <HAL_TIM_ConfigClockSource+0x15a>
 8001ad0:	2b20      	cmp	r3, #32
 8001ad2:	d867      	bhi.n	8001ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d05c      	beq.n	8001b92 <HAL_TIM_ConfigClockSource+0x15a>
 8001ad8:	2b10      	cmp	r3, #16
 8001ada:	d05a      	beq.n	8001b92 <HAL_TIM_ConfigClockSource+0x15a>
 8001adc:	e062      	b.n	8001ba4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6818      	ldr	r0, [r3, #0]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	6899      	ldr	r1, [r3, #8]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	f000 f965 	bl	8001dbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001b00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	609a      	str	r2, [r3, #8]
      break;
 8001b0a:	e04f      	b.n	8001bac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6818      	ldr	r0, [r3, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	6899      	ldr	r1, [r3, #8]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f000 f94e 	bl	8001dbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b2e:	609a      	str	r2, [r3, #8]
      break;
 8001b30:	e03c      	b.n	8001bac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	6859      	ldr	r1, [r3, #4]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	f000 f8c2 	bl	8001cc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2150      	movs	r1, #80	; 0x50
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 f91b 	bl	8001d86 <TIM_ITRx_SetConfig>
      break;
 8001b50:	e02c      	b.n	8001bac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6818      	ldr	r0, [r3, #0]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	6859      	ldr	r1, [r3, #4]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	f000 f8e1 	bl	8001d26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2160      	movs	r1, #96	; 0x60
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 f90b 	bl	8001d86 <TIM_ITRx_SetConfig>
      break;
 8001b70:	e01c      	b.n	8001bac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6818      	ldr	r0, [r3, #0]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	6859      	ldr	r1, [r3, #4]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	f000 f8a2 	bl	8001cc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2140      	movs	r1, #64	; 0x40
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 f8fb 	bl	8001d86 <TIM_ITRx_SetConfig>
      break;
 8001b90:	e00c      	b.n	8001bac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	f000 f8f2 	bl	8001d86 <TIM_ITRx_SetConfig>
      break;
 8001ba2:	e003      	b.n	8001bac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ba8:	e000      	b.n	8001bac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001baa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a34      	ldr	r2, [pc, #208]	; (8001cac <TIM_Base_SetConfig+0xe4>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d00f      	beq.n	8001c00 <TIM_Base_SetConfig+0x38>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be6:	d00b      	beq.n	8001c00 <TIM_Base_SetConfig+0x38>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a31      	ldr	r2, [pc, #196]	; (8001cb0 <TIM_Base_SetConfig+0xe8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d007      	beq.n	8001c00 <TIM_Base_SetConfig+0x38>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a30      	ldr	r2, [pc, #192]	; (8001cb4 <TIM_Base_SetConfig+0xec>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d003      	beq.n	8001c00 <TIM_Base_SetConfig+0x38>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a2f      	ldr	r2, [pc, #188]	; (8001cb8 <TIM_Base_SetConfig+0xf0>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d108      	bne.n	8001c12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a25      	ldr	r2, [pc, #148]	; (8001cac <TIM_Base_SetConfig+0xe4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d01b      	beq.n	8001c52 <TIM_Base_SetConfig+0x8a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c20:	d017      	beq.n	8001c52 <TIM_Base_SetConfig+0x8a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a22      	ldr	r2, [pc, #136]	; (8001cb0 <TIM_Base_SetConfig+0xe8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d013      	beq.n	8001c52 <TIM_Base_SetConfig+0x8a>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a21      	ldr	r2, [pc, #132]	; (8001cb4 <TIM_Base_SetConfig+0xec>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00f      	beq.n	8001c52 <TIM_Base_SetConfig+0x8a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a20      	ldr	r2, [pc, #128]	; (8001cb8 <TIM_Base_SetConfig+0xf0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d00b      	beq.n	8001c52 <TIM_Base_SetConfig+0x8a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a1f      	ldr	r2, [pc, #124]	; (8001cbc <TIM_Base_SetConfig+0xf4>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d007      	beq.n	8001c52 <TIM_Base_SetConfig+0x8a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a1e      	ldr	r2, [pc, #120]	; (8001cc0 <TIM_Base_SetConfig+0xf8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d003      	beq.n	8001c52 <TIM_Base_SetConfig+0x8a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a1d      	ldr	r2, [pc, #116]	; (8001cc4 <TIM_Base_SetConfig+0xfc>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d108      	bne.n	8001c64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a08      	ldr	r2, [pc, #32]	; (8001cac <TIM_Base_SetConfig+0xe4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d103      	bne.n	8001c98 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	691a      	ldr	r2, [r3, #16]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	615a      	str	r2, [r3, #20]
}
 8001c9e:	bf00      	nop
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40010000 	.word	0x40010000
 8001cb0:	40000400 	.word	0x40000400
 8001cb4:	40000800 	.word	0x40000800
 8001cb8:	40000c00 	.word	0x40000c00
 8001cbc:	40014000 	.word	0x40014000
 8001cc0:	40014400 	.word	0x40014400
 8001cc4:	40014800 	.word	0x40014800

08001cc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	f023 0201 	bic.w	r2, r3, #1
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	011b      	lsls	r3, r3, #4
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f023 030a 	bic.w	r3, r3, #10
 8001d04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	621a      	str	r2, [r3, #32]
}
 8001d1a:	bf00      	nop
 8001d1c:	371c      	adds	r7, #28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b087      	sub	sp, #28
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	f023 0210 	bic.w	r2, r3, #16
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001d50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	031b      	lsls	r3, r3, #12
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001d62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	621a      	str	r2, [r3, #32]
}
 8001d7a:	bf00      	nop
 8001d7c:	371c      	adds	r7, #28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b085      	sub	sp, #20
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	f043 0307 	orr.w	r3, r3, #7
 8001da8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	609a      	str	r2, [r3, #8]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001dd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	021a      	lsls	r2, r3, #8
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	431a      	orrs	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	609a      	str	r2, [r3, #8]
}
 8001df0:	bf00      	nop
 8001df2:	371c      	adds	r7, #28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d101      	bne.n	8001e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e050      	b.n	8001eb6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a1c      	ldr	r2, [pc, #112]	; (8001ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d018      	beq.n	8001e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e60:	d013      	beq.n	8001e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a18      	ldr	r2, [pc, #96]	; (8001ec8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d00e      	beq.n	8001e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a16      	ldr	r2, [pc, #88]	; (8001ecc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d009      	beq.n	8001e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a15      	ldr	r2, [pc, #84]	; (8001ed0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d004      	beq.n	8001e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a13      	ldr	r2, [pc, #76]	; (8001ed4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d10c      	bne.n	8001ea4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40010000 	.word	0x40010000
 8001ec8:	40000400 	.word	0x40000400
 8001ecc:	40000800 	.word	0x40000800
 8001ed0:	40000c00 	.word	0x40000c00
 8001ed4:	40014000 	.word	0x40014000

08001ed8 <__errno>:
 8001ed8:	4b01      	ldr	r3, [pc, #4]	; (8001ee0 <__errno+0x8>)
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	2000000c 	.word	0x2000000c

08001ee4 <__libc_init_array>:
 8001ee4:	b570      	push	{r4, r5, r6, lr}
 8001ee6:	4d0d      	ldr	r5, [pc, #52]	; (8001f1c <__libc_init_array+0x38>)
 8001ee8:	4c0d      	ldr	r4, [pc, #52]	; (8001f20 <__libc_init_array+0x3c>)
 8001eea:	1b64      	subs	r4, r4, r5
 8001eec:	10a4      	asrs	r4, r4, #2
 8001eee:	2600      	movs	r6, #0
 8001ef0:	42a6      	cmp	r6, r4
 8001ef2:	d109      	bne.n	8001f08 <__libc_init_array+0x24>
 8001ef4:	4d0b      	ldr	r5, [pc, #44]	; (8001f24 <__libc_init_array+0x40>)
 8001ef6:	4c0c      	ldr	r4, [pc, #48]	; (8001f28 <__libc_init_array+0x44>)
 8001ef8:	f000 ff76 	bl	8002de8 <_init>
 8001efc:	1b64      	subs	r4, r4, r5
 8001efe:	10a4      	asrs	r4, r4, #2
 8001f00:	2600      	movs	r6, #0
 8001f02:	42a6      	cmp	r6, r4
 8001f04:	d105      	bne.n	8001f12 <__libc_init_array+0x2e>
 8001f06:	bd70      	pop	{r4, r5, r6, pc}
 8001f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f0c:	4798      	blx	r3
 8001f0e:	3601      	adds	r6, #1
 8001f10:	e7ee      	b.n	8001ef0 <__libc_init_array+0xc>
 8001f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f16:	4798      	blx	r3
 8001f18:	3601      	adds	r6, #1
 8001f1a:	e7f2      	b.n	8001f02 <__libc_init_array+0x1e>
 8001f1c:	08002eb8 	.word	0x08002eb8
 8001f20:	08002eb8 	.word	0x08002eb8
 8001f24:	08002eb8 	.word	0x08002eb8
 8001f28:	08002ebc 	.word	0x08002ebc

08001f2c <memset>:
 8001f2c:	4402      	add	r2, r0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d100      	bne.n	8001f36 <memset+0xa>
 8001f34:	4770      	bx	lr
 8001f36:	f803 1b01 	strb.w	r1, [r3], #1
 8001f3a:	e7f9      	b.n	8001f30 <memset+0x4>

08001f3c <iprintf>:
 8001f3c:	b40f      	push	{r0, r1, r2, r3}
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <iprintf+0x2c>)
 8001f40:	b513      	push	{r0, r1, r4, lr}
 8001f42:	681c      	ldr	r4, [r3, #0]
 8001f44:	b124      	cbz	r4, 8001f50 <iprintf+0x14>
 8001f46:	69a3      	ldr	r3, [r4, #24]
 8001f48:	b913      	cbnz	r3, 8001f50 <iprintf+0x14>
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	f000 f866 	bl	800201c <__sinit>
 8001f50:	ab05      	add	r3, sp, #20
 8001f52:	9a04      	ldr	r2, [sp, #16]
 8001f54:	68a1      	ldr	r1, [r4, #8]
 8001f56:	9301      	str	r3, [sp, #4]
 8001f58:	4620      	mov	r0, r4
 8001f5a:	f000 f983 	bl	8002264 <_vfiprintf_r>
 8001f5e:	b002      	add	sp, #8
 8001f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f64:	b004      	add	sp, #16
 8001f66:	4770      	bx	lr
 8001f68:	2000000c 	.word	0x2000000c

08001f6c <std>:
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	b510      	push	{r4, lr}
 8001f70:	4604      	mov	r4, r0
 8001f72:	e9c0 3300 	strd	r3, r3, [r0]
 8001f76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f7a:	6083      	str	r3, [r0, #8]
 8001f7c:	8181      	strh	r1, [r0, #12]
 8001f7e:	6643      	str	r3, [r0, #100]	; 0x64
 8001f80:	81c2      	strh	r2, [r0, #14]
 8001f82:	6183      	str	r3, [r0, #24]
 8001f84:	4619      	mov	r1, r3
 8001f86:	2208      	movs	r2, #8
 8001f88:	305c      	adds	r0, #92	; 0x5c
 8001f8a:	f7ff ffcf 	bl	8001f2c <memset>
 8001f8e:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <std+0x38>)
 8001f90:	6263      	str	r3, [r4, #36]	; 0x24
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <std+0x3c>)
 8001f94:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f96:	4b05      	ldr	r3, [pc, #20]	; (8001fac <std+0x40>)
 8001f98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f9a:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <std+0x44>)
 8001f9c:	6224      	str	r4, [r4, #32]
 8001f9e:	6323      	str	r3, [r4, #48]	; 0x30
 8001fa0:	bd10      	pop	{r4, pc}
 8001fa2:	bf00      	nop
 8001fa4:	0800280d 	.word	0x0800280d
 8001fa8:	0800282f 	.word	0x0800282f
 8001fac:	08002867 	.word	0x08002867
 8001fb0:	0800288b 	.word	0x0800288b

08001fb4 <_cleanup_r>:
 8001fb4:	4901      	ldr	r1, [pc, #4]	; (8001fbc <_cleanup_r+0x8>)
 8001fb6:	f000 b8af 	b.w	8002118 <_fwalk_reent>
 8001fba:	bf00      	nop
 8001fbc:	08002b65 	.word	0x08002b65

08001fc0 <__sfmoreglue>:
 8001fc0:	b570      	push	{r4, r5, r6, lr}
 8001fc2:	1e4a      	subs	r2, r1, #1
 8001fc4:	2568      	movs	r5, #104	; 0x68
 8001fc6:	4355      	muls	r5, r2
 8001fc8:	460e      	mov	r6, r1
 8001fca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001fce:	f000 f8c5 	bl	800215c <_malloc_r>
 8001fd2:	4604      	mov	r4, r0
 8001fd4:	b140      	cbz	r0, 8001fe8 <__sfmoreglue+0x28>
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	e9c0 1600 	strd	r1, r6, [r0]
 8001fdc:	300c      	adds	r0, #12
 8001fde:	60a0      	str	r0, [r4, #8]
 8001fe0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001fe4:	f7ff ffa2 	bl	8001f2c <memset>
 8001fe8:	4620      	mov	r0, r4
 8001fea:	bd70      	pop	{r4, r5, r6, pc}

08001fec <__sfp_lock_acquire>:
 8001fec:	4801      	ldr	r0, [pc, #4]	; (8001ff4 <__sfp_lock_acquire+0x8>)
 8001fee:	f000 b8b3 	b.w	8002158 <__retarget_lock_acquire_recursive>
 8001ff2:	bf00      	nop
 8001ff4:	200000ec 	.word	0x200000ec

08001ff8 <__sfp_lock_release>:
 8001ff8:	4801      	ldr	r0, [pc, #4]	; (8002000 <__sfp_lock_release+0x8>)
 8001ffa:	f000 b8ae 	b.w	800215a <__retarget_lock_release_recursive>
 8001ffe:	bf00      	nop
 8002000:	200000ec 	.word	0x200000ec

08002004 <__sinit_lock_acquire>:
 8002004:	4801      	ldr	r0, [pc, #4]	; (800200c <__sinit_lock_acquire+0x8>)
 8002006:	f000 b8a7 	b.w	8002158 <__retarget_lock_acquire_recursive>
 800200a:	bf00      	nop
 800200c:	200000e7 	.word	0x200000e7

08002010 <__sinit_lock_release>:
 8002010:	4801      	ldr	r0, [pc, #4]	; (8002018 <__sinit_lock_release+0x8>)
 8002012:	f000 b8a2 	b.w	800215a <__retarget_lock_release_recursive>
 8002016:	bf00      	nop
 8002018:	200000e7 	.word	0x200000e7

0800201c <__sinit>:
 800201c:	b510      	push	{r4, lr}
 800201e:	4604      	mov	r4, r0
 8002020:	f7ff fff0 	bl	8002004 <__sinit_lock_acquire>
 8002024:	69a3      	ldr	r3, [r4, #24]
 8002026:	b11b      	cbz	r3, 8002030 <__sinit+0x14>
 8002028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800202c:	f7ff bff0 	b.w	8002010 <__sinit_lock_release>
 8002030:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002034:	6523      	str	r3, [r4, #80]	; 0x50
 8002036:	4b13      	ldr	r3, [pc, #76]	; (8002084 <__sinit+0x68>)
 8002038:	4a13      	ldr	r2, [pc, #76]	; (8002088 <__sinit+0x6c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	62a2      	str	r2, [r4, #40]	; 0x28
 800203e:	42a3      	cmp	r3, r4
 8002040:	bf04      	itt	eq
 8002042:	2301      	moveq	r3, #1
 8002044:	61a3      	streq	r3, [r4, #24]
 8002046:	4620      	mov	r0, r4
 8002048:	f000 f820 	bl	800208c <__sfp>
 800204c:	6060      	str	r0, [r4, #4]
 800204e:	4620      	mov	r0, r4
 8002050:	f000 f81c 	bl	800208c <__sfp>
 8002054:	60a0      	str	r0, [r4, #8]
 8002056:	4620      	mov	r0, r4
 8002058:	f000 f818 	bl	800208c <__sfp>
 800205c:	2200      	movs	r2, #0
 800205e:	60e0      	str	r0, [r4, #12]
 8002060:	2104      	movs	r1, #4
 8002062:	6860      	ldr	r0, [r4, #4]
 8002064:	f7ff ff82 	bl	8001f6c <std>
 8002068:	68a0      	ldr	r0, [r4, #8]
 800206a:	2201      	movs	r2, #1
 800206c:	2109      	movs	r1, #9
 800206e:	f7ff ff7d 	bl	8001f6c <std>
 8002072:	68e0      	ldr	r0, [r4, #12]
 8002074:	2202      	movs	r2, #2
 8002076:	2112      	movs	r1, #18
 8002078:	f7ff ff78 	bl	8001f6c <std>
 800207c:	2301      	movs	r3, #1
 800207e:	61a3      	str	r3, [r4, #24]
 8002080:	e7d2      	b.n	8002028 <__sinit+0xc>
 8002082:	bf00      	nop
 8002084:	08002e18 	.word	0x08002e18
 8002088:	08001fb5 	.word	0x08001fb5

0800208c <__sfp>:
 800208c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800208e:	4607      	mov	r7, r0
 8002090:	f7ff ffac 	bl	8001fec <__sfp_lock_acquire>
 8002094:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <__sfp+0x84>)
 8002096:	681e      	ldr	r6, [r3, #0]
 8002098:	69b3      	ldr	r3, [r6, #24]
 800209a:	b913      	cbnz	r3, 80020a2 <__sfp+0x16>
 800209c:	4630      	mov	r0, r6
 800209e:	f7ff ffbd 	bl	800201c <__sinit>
 80020a2:	3648      	adds	r6, #72	; 0x48
 80020a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80020a8:	3b01      	subs	r3, #1
 80020aa:	d503      	bpl.n	80020b4 <__sfp+0x28>
 80020ac:	6833      	ldr	r3, [r6, #0]
 80020ae:	b30b      	cbz	r3, 80020f4 <__sfp+0x68>
 80020b0:	6836      	ldr	r6, [r6, #0]
 80020b2:	e7f7      	b.n	80020a4 <__sfp+0x18>
 80020b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80020b8:	b9d5      	cbnz	r5, 80020f0 <__sfp+0x64>
 80020ba:	4b16      	ldr	r3, [pc, #88]	; (8002114 <__sfp+0x88>)
 80020bc:	60e3      	str	r3, [r4, #12]
 80020be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80020c2:	6665      	str	r5, [r4, #100]	; 0x64
 80020c4:	f000 f847 	bl	8002156 <__retarget_lock_init_recursive>
 80020c8:	f7ff ff96 	bl	8001ff8 <__sfp_lock_release>
 80020cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80020d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80020d4:	6025      	str	r5, [r4, #0]
 80020d6:	61a5      	str	r5, [r4, #24]
 80020d8:	2208      	movs	r2, #8
 80020da:	4629      	mov	r1, r5
 80020dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80020e0:	f7ff ff24 	bl	8001f2c <memset>
 80020e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80020e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80020ec:	4620      	mov	r0, r4
 80020ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020f0:	3468      	adds	r4, #104	; 0x68
 80020f2:	e7d9      	b.n	80020a8 <__sfp+0x1c>
 80020f4:	2104      	movs	r1, #4
 80020f6:	4638      	mov	r0, r7
 80020f8:	f7ff ff62 	bl	8001fc0 <__sfmoreglue>
 80020fc:	4604      	mov	r4, r0
 80020fe:	6030      	str	r0, [r6, #0]
 8002100:	2800      	cmp	r0, #0
 8002102:	d1d5      	bne.n	80020b0 <__sfp+0x24>
 8002104:	f7ff ff78 	bl	8001ff8 <__sfp_lock_release>
 8002108:	230c      	movs	r3, #12
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	e7ee      	b.n	80020ec <__sfp+0x60>
 800210e:	bf00      	nop
 8002110:	08002e18 	.word	0x08002e18
 8002114:	ffff0001 	.word	0xffff0001

08002118 <_fwalk_reent>:
 8002118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800211c:	4606      	mov	r6, r0
 800211e:	4688      	mov	r8, r1
 8002120:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002124:	2700      	movs	r7, #0
 8002126:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800212a:	f1b9 0901 	subs.w	r9, r9, #1
 800212e:	d505      	bpl.n	800213c <_fwalk_reent+0x24>
 8002130:	6824      	ldr	r4, [r4, #0]
 8002132:	2c00      	cmp	r4, #0
 8002134:	d1f7      	bne.n	8002126 <_fwalk_reent+0xe>
 8002136:	4638      	mov	r0, r7
 8002138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800213c:	89ab      	ldrh	r3, [r5, #12]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d907      	bls.n	8002152 <_fwalk_reent+0x3a>
 8002142:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002146:	3301      	adds	r3, #1
 8002148:	d003      	beq.n	8002152 <_fwalk_reent+0x3a>
 800214a:	4629      	mov	r1, r5
 800214c:	4630      	mov	r0, r6
 800214e:	47c0      	blx	r8
 8002150:	4307      	orrs	r7, r0
 8002152:	3568      	adds	r5, #104	; 0x68
 8002154:	e7e9      	b.n	800212a <_fwalk_reent+0x12>

08002156 <__retarget_lock_init_recursive>:
 8002156:	4770      	bx	lr

08002158 <__retarget_lock_acquire_recursive>:
 8002158:	4770      	bx	lr

0800215a <__retarget_lock_release_recursive>:
 800215a:	4770      	bx	lr

0800215c <_malloc_r>:
 800215c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800215e:	1ccd      	adds	r5, r1, #3
 8002160:	f025 0503 	bic.w	r5, r5, #3
 8002164:	3508      	adds	r5, #8
 8002166:	2d0c      	cmp	r5, #12
 8002168:	bf38      	it	cc
 800216a:	250c      	movcc	r5, #12
 800216c:	2d00      	cmp	r5, #0
 800216e:	4606      	mov	r6, r0
 8002170:	db01      	blt.n	8002176 <_malloc_r+0x1a>
 8002172:	42a9      	cmp	r1, r5
 8002174:	d903      	bls.n	800217e <_malloc_r+0x22>
 8002176:	230c      	movs	r3, #12
 8002178:	6033      	str	r3, [r6, #0]
 800217a:	2000      	movs	r0, #0
 800217c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800217e:	f000 fda3 	bl	8002cc8 <__malloc_lock>
 8002182:	4921      	ldr	r1, [pc, #132]	; (8002208 <_malloc_r+0xac>)
 8002184:	680a      	ldr	r2, [r1, #0]
 8002186:	4614      	mov	r4, r2
 8002188:	b99c      	cbnz	r4, 80021b2 <_malloc_r+0x56>
 800218a:	4f20      	ldr	r7, [pc, #128]	; (800220c <_malloc_r+0xb0>)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	b923      	cbnz	r3, 800219a <_malloc_r+0x3e>
 8002190:	4621      	mov	r1, r4
 8002192:	4630      	mov	r0, r6
 8002194:	f000 fb2a 	bl	80027ec <_sbrk_r>
 8002198:	6038      	str	r0, [r7, #0]
 800219a:	4629      	mov	r1, r5
 800219c:	4630      	mov	r0, r6
 800219e:	f000 fb25 	bl	80027ec <_sbrk_r>
 80021a2:	1c43      	adds	r3, r0, #1
 80021a4:	d123      	bne.n	80021ee <_malloc_r+0x92>
 80021a6:	230c      	movs	r3, #12
 80021a8:	6033      	str	r3, [r6, #0]
 80021aa:	4630      	mov	r0, r6
 80021ac:	f000 fd92 	bl	8002cd4 <__malloc_unlock>
 80021b0:	e7e3      	b.n	800217a <_malloc_r+0x1e>
 80021b2:	6823      	ldr	r3, [r4, #0]
 80021b4:	1b5b      	subs	r3, r3, r5
 80021b6:	d417      	bmi.n	80021e8 <_malloc_r+0x8c>
 80021b8:	2b0b      	cmp	r3, #11
 80021ba:	d903      	bls.n	80021c4 <_malloc_r+0x68>
 80021bc:	6023      	str	r3, [r4, #0]
 80021be:	441c      	add	r4, r3
 80021c0:	6025      	str	r5, [r4, #0]
 80021c2:	e004      	b.n	80021ce <_malloc_r+0x72>
 80021c4:	6863      	ldr	r3, [r4, #4]
 80021c6:	42a2      	cmp	r2, r4
 80021c8:	bf0c      	ite	eq
 80021ca:	600b      	streq	r3, [r1, #0]
 80021cc:	6053      	strne	r3, [r2, #4]
 80021ce:	4630      	mov	r0, r6
 80021d0:	f000 fd80 	bl	8002cd4 <__malloc_unlock>
 80021d4:	f104 000b 	add.w	r0, r4, #11
 80021d8:	1d23      	adds	r3, r4, #4
 80021da:	f020 0007 	bic.w	r0, r0, #7
 80021de:	1ac2      	subs	r2, r0, r3
 80021e0:	d0cc      	beq.n	800217c <_malloc_r+0x20>
 80021e2:	1a1b      	subs	r3, r3, r0
 80021e4:	50a3      	str	r3, [r4, r2]
 80021e6:	e7c9      	b.n	800217c <_malloc_r+0x20>
 80021e8:	4622      	mov	r2, r4
 80021ea:	6864      	ldr	r4, [r4, #4]
 80021ec:	e7cc      	b.n	8002188 <_malloc_r+0x2c>
 80021ee:	1cc4      	adds	r4, r0, #3
 80021f0:	f024 0403 	bic.w	r4, r4, #3
 80021f4:	42a0      	cmp	r0, r4
 80021f6:	d0e3      	beq.n	80021c0 <_malloc_r+0x64>
 80021f8:	1a21      	subs	r1, r4, r0
 80021fa:	4630      	mov	r0, r6
 80021fc:	f000 faf6 	bl	80027ec <_sbrk_r>
 8002200:	3001      	adds	r0, #1
 8002202:	d1dd      	bne.n	80021c0 <_malloc_r+0x64>
 8002204:	e7cf      	b.n	80021a6 <_malloc_r+0x4a>
 8002206:	bf00      	nop
 8002208:	20000090 	.word	0x20000090
 800220c:	20000094 	.word	0x20000094

08002210 <__sfputc_r>:
 8002210:	6893      	ldr	r3, [r2, #8]
 8002212:	3b01      	subs	r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	b410      	push	{r4}
 8002218:	6093      	str	r3, [r2, #8]
 800221a:	da08      	bge.n	800222e <__sfputc_r+0x1e>
 800221c:	6994      	ldr	r4, [r2, #24]
 800221e:	42a3      	cmp	r3, r4
 8002220:	db01      	blt.n	8002226 <__sfputc_r+0x16>
 8002222:	290a      	cmp	r1, #10
 8002224:	d103      	bne.n	800222e <__sfputc_r+0x1e>
 8002226:	f85d 4b04 	ldr.w	r4, [sp], #4
 800222a:	f000 bb33 	b.w	8002894 <__swbuf_r>
 800222e:	6813      	ldr	r3, [r2, #0]
 8002230:	1c58      	adds	r0, r3, #1
 8002232:	6010      	str	r0, [r2, #0]
 8002234:	7019      	strb	r1, [r3, #0]
 8002236:	4608      	mov	r0, r1
 8002238:	f85d 4b04 	ldr.w	r4, [sp], #4
 800223c:	4770      	bx	lr

0800223e <__sfputs_r>:
 800223e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002240:	4606      	mov	r6, r0
 8002242:	460f      	mov	r7, r1
 8002244:	4614      	mov	r4, r2
 8002246:	18d5      	adds	r5, r2, r3
 8002248:	42ac      	cmp	r4, r5
 800224a:	d101      	bne.n	8002250 <__sfputs_r+0x12>
 800224c:	2000      	movs	r0, #0
 800224e:	e007      	b.n	8002260 <__sfputs_r+0x22>
 8002250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002254:	463a      	mov	r2, r7
 8002256:	4630      	mov	r0, r6
 8002258:	f7ff ffda 	bl	8002210 <__sfputc_r>
 800225c:	1c43      	adds	r3, r0, #1
 800225e:	d1f3      	bne.n	8002248 <__sfputs_r+0xa>
 8002260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002264 <_vfiprintf_r>:
 8002264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002268:	460d      	mov	r5, r1
 800226a:	b09d      	sub	sp, #116	; 0x74
 800226c:	4614      	mov	r4, r2
 800226e:	4698      	mov	r8, r3
 8002270:	4606      	mov	r6, r0
 8002272:	b118      	cbz	r0, 800227c <_vfiprintf_r+0x18>
 8002274:	6983      	ldr	r3, [r0, #24]
 8002276:	b90b      	cbnz	r3, 800227c <_vfiprintf_r+0x18>
 8002278:	f7ff fed0 	bl	800201c <__sinit>
 800227c:	4b89      	ldr	r3, [pc, #548]	; (80024a4 <_vfiprintf_r+0x240>)
 800227e:	429d      	cmp	r5, r3
 8002280:	d11b      	bne.n	80022ba <_vfiprintf_r+0x56>
 8002282:	6875      	ldr	r5, [r6, #4]
 8002284:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002286:	07d9      	lsls	r1, r3, #31
 8002288:	d405      	bmi.n	8002296 <_vfiprintf_r+0x32>
 800228a:	89ab      	ldrh	r3, [r5, #12]
 800228c:	059a      	lsls	r2, r3, #22
 800228e:	d402      	bmi.n	8002296 <_vfiprintf_r+0x32>
 8002290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002292:	f7ff ff61 	bl	8002158 <__retarget_lock_acquire_recursive>
 8002296:	89ab      	ldrh	r3, [r5, #12]
 8002298:	071b      	lsls	r3, r3, #28
 800229a:	d501      	bpl.n	80022a0 <_vfiprintf_r+0x3c>
 800229c:	692b      	ldr	r3, [r5, #16]
 800229e:	b9eb      	cbnz	r3, 80022dc <_vfiprintf_r+0x78>
 80022a0:	4629      	mov	r1, r5
 80022a2:	4630      	mov	r0, r6
 80022a4:	f000 fb5a 	bl	800295c <__swsetup_r>
 80022a8:	b1c0      	cbz	r0, 80022dc <_vfiprintf_r+0x78>
 80022aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80022ac:	07dc      	lsls	r4, r3, #31
 80022ae:	d50e      	bpl.n	80022ce <_vfiprintf_r+0x6a>
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295
 80022b4:	b01d      	add	sp, #116	; 0x74
 80022b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022ba:	4b7b      	ldr	r3, [pc, #492]	; (80024a8 <_vfiprintf_r+0x244>)
 80022bc:	429d      	cmp	r5, r3
 80022be:	d101      	bne.n	80022c4 <_vfiprintf_r+0x60>
 80022c0:	68b5      	ldr	r5, [r6, #8]
 80022c2:	e7df      	b.n	8002284 <_vfiprintf_r+0x20>
 80022c4:	4b79      	ldr	r3, [pc, #484]	; (80024ac <_vfiprintf_r+0x248>)
 80022c6:	429d      	cmp	r5, r3
 80022c8:	bf08      	it	eq
 80022ca:	68f5      	ldreq	r5, [r6, #12]
 80022cc:	e7da      	b.n	8002284 <_vfiprintf_r+0x20>
 80022ce:	89ab      	ldrh	r3, [r5, #12]
 80022d0:	0598      	lsls	r0, r3, #22
 80022d2:	d4ed      	bmi.n	80022b0 <_vfiprintf_r+0x4c>
 80022d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80022d6:	f7ff ff40 	bl	800215a <__retarget_lock_release_recursive>
 80022da:	e7e9      	b.n	80022b0 <_vfiprintf_r+0x4c>
 80022dc:	2300      	movs	r3, #0
 80022de:	9309      	str	r3, [sp, #36]	; 0x24
 80022e0:	2320      	movs	r3, #32
 80022e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80022e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80022ea:	2330      	movs	r3, #48	; 0x30
 80022ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80024b0 <_vfiprintf_r+0x24c>
 80022f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80022f4:	f04f 0901 	mov.w	r9, #1
 80022f8:	4623      	mov	r3, r4
 80022fa:	469a      	mov	sl, r3
 80022fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002300:	b10a      	cbz	r2, 8002306 <_vfiprintf_r+0xa2>
 8002302:	2a25      	cmp	r2, #37	; 0x25
 8002304:	d1f9      	bne.n	80022fa <_vfiprintf_r+0x96>
 8002306:	ebba 0b04 	subs.w	fp, sl, r4
 800230a:	d00b      	beq.n	8002324 <_vfiprintf_r+0xc0>
 800230c:	465b      	mov	r3, fp
 800230e:	4622      	mov	r2, r4
 8002310:	4629      	mov	r1, r5
 8002312:	4630      	mov	r0, r6
 8002314:	f7ff ff93 	bl	800223e <__sfputs_r>
 8002318:	3001      	adds	r0, #1
 800231a:	f000 80aa 	beq.w	8002472 <_vfiprintf_r+0x20e>
 800231e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002320:	445a      	add	r2, fp
 8002322:	9209      	str	r2, [sp, #36]	; 0x24
 8002324:	f89a 3000 	ldrb.w	r3, [sl]
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 80a2 	beq.w	8002472 <_vfiprintf_r+0x20e>
 800232e:	2300      	movs	r3, #0
 8002330:	f04f 32ff 	mov.w	r2, #4294967295
 8002334:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002338:	f10a 0a01 	add.w	sl, sl, #1
 800233c:	9304      	str	r3, [sp, #16]
 800233e:	9307      	str	r3, [sp, #28]
 8002340:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002344:	931a      	str	r3, [sp, #104]	; 0x68
 8002346:	4654      	mov	r4, sl
 8002348:	2205      	movs	r2, #5
 800234a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800234e:	4858      	ldr	r0, [pc, #352]	; (80024b0 <_vfiprintf_r+0x24c>)
 8002350:	f7fd ff46 	bl	80001e0 <memchr>
 8002354:	9a04      	ldr	r2, [sp, #16]
 8002356:	b9d8      	cbnz	r0, 8002390 <_vfiprintf_r+0x12c>
 8002358:	06d1      	lsls	r1, r2, #27
 800235a:	bf44      	itt	mi
 800235c:	2320      	movmi	r3, #32
 800235e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002362:	0713      	lsls	r3, r2, #28
 8002364:	bf44      	itt	mi
 8002366:	232b      	movmi	r3, #43	; 0x2b
 8002368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800236c:	f89a 3000 	ldrb.w	r3, [sl]
 8002370:	2b2a      	cmp	r3, #42	; 0x2a
 8002372:	d015      	beq.n	80023a0 <_vfiprintf_r+0x13c>
 8002374:	9a07      	ldr	r2, [sp, #28]
 8002376:	4654      	mov	r4, sl
 8002378:	2000      	movs	r0, #0
 800237a:	f04f 0c0a 	mov.w	ip, #10
 800237e:	4621      	mov	r1, r4
 8002380:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002384:	3b30      	subs	r3, #48	; 0x30
 8002386:	2b09      	cmp	r3, #9
 8002388:	d94e      	bls.n	8002428 <_vfiprintf_r+0x1c4>
 800238a:	b1b0      	cbz	r0, 80023ba <_vfiprintf_r+0x156>
 800238c:	9207      	str	r2, [sp, #28]
 800238e:	e014      	b.n	80023ba <_vfiprintf_r+0x156>
 8002390:	eba0 0308 	sub.w	r3, r0, r8
 8002394:	fa09 f303 	lsl.w	r3, r9, r3
 8002398:	4313      	orrs	r3, r2
 800239a:	9304      	str	r3, [sp, #16]
 800239c:	46a2      	mov	sl, r4
 800239e:	e7d2      	b.n	8002346 <_vfiprintf_r+0xe2>
 80023a0:	9b03      	ldr	r3, [sp, #12]
 80023a2:	1d19      	adds	r1, r3, #4
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	9103      	str	r1, [sp, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	bfbb      	ittet	lt
 80023ac:	425b      	neglt	r3, r3
 80023ae:	f042 0202 	orrlt.w	r2, r2, #2
 80023b2:	9307      	strge	r3, [sp, #28]
 80023b4:	9307      	strlt	r3, [sp, #28]
 80023b6:	bfb8      	it	lt
 80023b8:	9204      	strlt	r2, [sp, #16]
 80023ba:	7823      	ldrb	r3, [r4, #0]
 80023bc:	2b2e      	cmp	r3, #46	; 0x2e
 80023be:	d10c      	bne.n	80023da <_vfiprintf_r+0x176>
 80023c0:	7863      	ldrb	r3, [r4, #1]
 80023c2:	2b2a      	cmp	r3, #42	; 0x2a
 80023c4:	d135      	bne.n	8002432 <_vfiprintf_r+0x1ce>
 80023c6:	9b03      	ldr	r3, [sp, #12]
 80023c8:	1d1a      	adds	r2, r3, #4
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	9203      	str	r2, [sp, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	bfb8      	it	lt
 80023d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80023d6:	3402      	adds	r4, #2
 80023d8:	9305      	str	r3, [sp, #20]
 80023da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80024c0 <_vfiprintf_r+0x25c>
 80023de:	7821      	ldrb	r1, [r4, #0]
 80023e0:	2203      	movs	r2, #3
 80023e2:	4650      	mov	r0, sl
 80023e4:	f7fd fefc 	bl	80001e0 <memchr>
 80023e8:	b140      	cbz	r0, 80023fc <_vfiprintf_r+0x198>
 80023ea:	2340      	movs	r3, #64	; 0x40
 80023ec:	eba0 000a 	sub.w	r0, r0, sl
 80023f0:	fa03 f000 	lsl.w	r0, r3, r0
 80023f4:	9b04      	ldr	r3, [sp, #16]
 80023f6:	4303      	orrs	r3, r0
 80023f8:	3401      	adds	r4, #1
 80023fa:	9304      	str	r3, [sp, #16]
 80023fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002400:	482c      	ldr	r0, [pc, #176]	; (80024b4 <_vfiprintf_r+0x250>)
 8002402:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002406:	2206      	movs	r2, #6
 8002408:	f7fd feea 	bl	80001e0 <memchr>
 800240c:	2800      	cmp	r0, #0
 800240e:	d03f      	beq.n	8002490 <_vfiprintf_r+0x22c>
 8002410:	4b29      	ldr	r3, [pc, #164]	; (80024b8 <_vfiprintf_r+0x254>)
 8002412:	bb1b      	cbnz	r3, 800245c <_vfiprintf_r+0x1f8>
 8002414:	9b03      	ldr	r3, [sp, #12]
 8002416:	3307      	adds	r3, #7
 8002418:	f023 0307 	bic.w	r3, r3, #7
 800241c:	3308      	adds	r3, #8
 800241e:	9303      	str	r3, [sp, #12]
 8002420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002422:	443b      	add	r3, r7
 8002424:	9309      	str	r3, [sp, #36]	; 0x24
 8002426:	e767      	b.n	80022f8 <_vfiprintf_r+0x94>
 8002428:	fb0c 3202 	mla	r2, ip, r2, r3
 800242c:	460c      	mov	r4, r1
 800242e:	2001      	movs	r0, #1
 8002430:	e7a5      	b.n	800237e <_vfiprintf_r+0x11a>
 8002432:	2300      	movs	r3, #0
 8002434:	3401      	adds	r4, #1
 8002436:	9305      	str	r3, [sp, #20]
 8002438:	4619      	mov	r1, r3
 800243a:	f04f 0c0a 	mov.w	ip, #10
 800243e:	4620      	mov	r0, r4
 8002440:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002444:	3a30      	subs	r2, #48	; 0x30
 8002446:	2a09      	cmp	r2, #9
 8002448:	d903      	bls.n	8002452 <_vfiprintf_r+0x1ee>
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0c5      	beq.n	80023da <_vfiprintf_r+0x176>
 800244e:	9105      	str	r1, [sp, #20]
 8002450:	e7c3      	b.n	80023da <_vfiprintf_r+0x176>
 8002452:	fb0c 2101 	mla	r1, ip, r1, r2
 8002456:	4604      	mov	r4, r0
 8002458:	2301      	movs	r3, #1
 800245a:	e7f0      	b.n	800243e <_vfiprintf_r+0x1da>
 800245c:	ab03      	add	r3, sp, #12
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	462a      	mov	r2, r5
 8002462:	4b16      	ldr	r3, [pc, #88]	; (80024bc <_vfiprintf_r+0x258>)
 8002464:	a904      	add	r1, sp, #16
 8002466:	4630      	mov	r0, r6
 8002468:	f3af 8000 	nop.w
 800246c:	4607      	mov	r7, r0
 800246e:	1c78      	adds	r0, r7, #1
 8002470:	d1d6      	bne.n	8002420 <_vfiprintf_r+0x1bc>
 8002472:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002474:	07d9      	lsls	r1, r3, #31
 8002476:	d405      	bmi.n	8002484 <_vfiprintf_r+0x220>
 8002478:	89ab      	ldrh	r3, [r5, #12]
 800247a:	059a      	lsls	r2, r3, #22
 800247c:	d402      	bmi.n	8002484 <_vfiprintf_r+0x220>
 800247e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002480:	f7ff fe6b 	bl	800215a <__retarget_lock_release_recursive>
 8002484:	89ab      	ldrh	r3, [r5, #12]
 8002486:	065b      	lsls	r3, r3, #25
 8002488:	f53f af12 	bmi.w	80022b0 <_vfiprintf_r+0x4c>
 800248c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800248e:	e711      	b.n	80022b4 <_vfiprintf_r+0x50>
 8002490:	ab03      	add	r3, sp, #12
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	462a      	mov	r2, r5
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <_vfiprintf_r+0x258>)
 8002498:	a904      	add	r1, sp, #16
 800249a:	4630      	mov	r0, r6
 800249c:	f000 f880 	bl	80025a0 <_printf_i>
 80024a0:	e7e4      	b.n	800246c <_vfiprintf_r+0x208>
 80024a2:	bf00      	nop
 80024a4:	08002e3c 	.word	0x08002e3c
 80024a8:	08002e5c 	.word	0x08002e5c
 80024ac:	08002e1c 	.word	0x08002e1c
 80024b0:	08002e7c 	.word	0x08002e7c
 80024b4:	08002e86 	.word	0x08002e86
 80024b8:	00000000 	.word	0x00000000
 80024bc:	0800223f 	.word	0x0800223f
 80024c0:	08002e82 	.word	0x08002e82

080024c4 <_printf_common>:
 80024c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024c8:	4616      	mov	r6, r2
 80024ca:	4699      	mov	r9, r3
 80024cc:	688a      	ldr	r2, [r1, #8]
 80024ce:	690b      	ldr	r3, [r1, #16]
 80024d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80024d4:	4293      	cmp	r3, r2
 80024d6:	bfb8      	it	lt
 80024d8:	4613      	movlt	r3, r2
 80024da:	6033      	str	r3, [r6, #0]
 80024dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80024e0:	4607      	mov	r7, r0
 80024e2:	460c      	mov	r4, r1
 80024e4:	b10a      	cbz	r2, 80024ea <_printf_common+0x26>
 80024e6:	3301      	adds	r3, #1
 80024e8:	6033      	str	r3, [r6, #0]
 80024ea:	6823      	ldr	r3, [r4, #0]
 80024ec:	0699      	lsls	r1, r3, #26
 80024ee:	bf42      	ittt	mi
 80024f0:	6833      	ldrmi	r3, [r6, #0]
 80024f2:	3302      	addmi	r3, #2
 80024f4:	6033      	strmi	r3, [r6, #0]
 80024f6:	6825      	ldr	r5, [r4, #0]
 80024f8:	f015 0506 	ands.w	r5, r5, #6
 80024fc:	d106      	bne.n	800250c <_printf_common+0x48>
 80024fe:	f104 0a19 	add.w	sl, r4, #25
 8002502:	68e3      	ldr	r3, [r4, #12]
 8002504:	6832      	ldr	r2, [r6, #0]
 8002506:	1a9b      	subs	r3, r3, r2
 8002508:	42ab      	cmp	r3, r5
 800250a:	dc26      	bgt.n	800255a <_printf_common+0x96>
 800250c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002510:	1e13      	subs	r3, r2, #0
 8002512:	6822      	ldr	r2, [r4, #0]
 8002514:	bf18      	it	ne
 8002516:	2301      	movne	r3, #1
 8002518:	0692      	lsls	r2, r2, #26
 800251a:	d42b      	bmi.n	8002574 <_printf_common+0xb0>
 800251c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002520:	4649      	mov	r1, r9
 8002522:	4638      	mov	r0, r7
 8002524:	47c0      	blx	r8
 8002526:	3001      	adds	r0, #1
 8002528:	d01e      	beq.n	8002568 <_printf_common+0xa4>
 800252a:	6823      	ldr	r3, [r4, #0]
 800252c:	68e5      	ldr	r5, [r4, #12]
 800252e:	6832      	ldr	r2, [r6, #0]
 8002530:	f003 0306 	and.w	r3, r3, #6
 8002534:	2b04      	cmp	r3, #4
 8002536:	bf08      	it	eq
 8002538:	1aad      	subeq	r5, r5, r2
 800253a:	68a3      	ldr	r3, [r4, #8]
 800253c:	6922      	ldr	r2, [r4, #16]
 800253e:	bf0c      	ite	eq
 8002540:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002544:	2500      	movne	r5, #0
 8002546:	4293      	cmp	r3, r2
 8002548:	bfc4      	itt	gt
 800254a:	1a9b      	subgt	r3, r3, r2
 800254c:	18ed      	addgt	r5, r5, r3
 800254e:	2600      	movs	r6, #0
 8002550:	341a      	adds	r4, #26
 8002552:	42b5      	cmp	r5, r6
 8002554:	d11a      	bne.n	800258c <_printf_common+0xc8>
 8002556:	2000      	movs	r0, #0
 8002558:	e008      	b.n	800256c <_printf_common+0xa8>
 800255a:	2301      	movs	r3, #1
 800255c:	4652      	mov	r2, sl
 800255e:	4649      	mov	r1, r9
 8002560:	4638      	mov	r0, r7
 8002562:	47c0      	blx	r8
 8002564:	3001      	adds	r0, #1
 8002566:	d103      	bne.n	8002570 <_printf_common+0xac>
 8002568:	f04f 30ff 	mov.w	r0, #4294967295
 800256c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002570:	3501      	adds	r5, #1
 8002572:	e7c6      	b.n	8002502 <_printf_common+0x3e>
 8002574:	18e1      	adds	r1, r4, r3
 8002576:	1c5a      	adds	r2, r3, #1
 8002578:	2030      	movs	r0, #48	; 0x30
 800257a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800257e:	4422      	add	r2, r4
 8002580:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002584:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002588:	3302      	adds	r3, #2
 800258a:	e7c7      	b.n	800251c <_printf_common+0x58>
 800258c:	2301      	movs	r3, #1
 800258e:	4622      	mov	r2, r4
 8002590:	4649      	mov	r1, r9
 8002592:	4638      	mov	r0, r7
 8002594:	47c0      	blx	r8
 8002596:	3001      	adds	r0, #1
 8002598:	d0e6      	beq.n	8002568 <_printf_common+0xa4>
 800259a:	3601      	adds	r6, #1
 800259c:	e7d9      	b.n	8002552 <_printf_common+0x8e>
	...

080025a0 <_printf_i>:
 80025a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80025a4:	460c      	mov	r4, r1
 80025a6:	4691      	mov	r9, r2
 80025a8:	7e27      	ldrb	r7, [r4, #24]
 80025aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80025ac:	2f78      	cmp	r7, #120	; 0x78
 80025ae:	4680      	mov	r8, r0
 80025b0:	469a      	mov	sl, r3
 80025b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80025b6:	d807      	bhi.n	80025c8 <_printf_i+0x28>
 80025b8:	2f62      	cmp	r7, #98	; 0x62
 80025ba:	d80a      	bhi.n	80025d2 <_printf_i+0x32>
 80025bc:	2f00      	cmp	r7, #0
 80025be:	f000 80d8 	beq.w	8002772 <_printf_i+0x1d2>
 80025c2:	2f58      	cmp	r7, #88	; 0x58
 80025c4:	f000 80a3 	beq.w	800270e <_printf_i+0x16e>
 80025c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80025cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80025d0:	e03a      	b.n	8002648 <_printf_i+0xa8>
 80025d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80025d6:	2b15      	cmp	r3, #21
 80025d8:	d8f6      	bhi.n	80025c8 <_printf_i+0x28>
 80025da:	a001      	add	r0, pc, #4	; (adr r0, 80025e0 <_printf_i+0x40>)
 80025dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80025e0:	08002639 	.word	0x08002639
 80025e4:	0800264d 	.word	0x0800264d
 80025e8:	080025c9 	.word	0x080025c9
 80025ec:	080025c9 	.word	0x080025c9
 80025f0:	080025c9 	.word	0x080025c9
 80025f4:	080025c9 	.word	0x080025c9
 80025f8:	0800264d 	.word	0x0800264d
 80025fc:	080025c9 	.word	0x080025c9
 8002600:	080025c9 	.word	0x080025c9
 8002604:	080025c9 	.word	0x080025c9
 8002608:	080025c9 	.word	0x080025c9
 800260c:	08002759 	.word	0x08002759
 8002610:	0800267d 	.word	0x0800267d
 8002614:	0800273b 	.word	0x0800273b
 8002618:	080025c9 	.word	0x080025c9
 800261c:	080025c9 	.word	0x080025c9
 8002620:	0800277b 	.word	0x0800277b
 8002624:	080025c9 	.word	0x080025c9
 8002628:	0800267d 	.word	0x0800267d
 800262c:	080025c9 	.word	0x080025c9
 8002630:	080025c9 	.word	0x080025c9
 8002634:	08002743 	.word	0x08002743
 8002638:	680b      	ldr	r3, [r1, #0]
 800263a:	1d1a      	adds	r2, r3, #4
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	600a      	str	r2, [r1, #0]
 8002640:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002644:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002648:	2301      	movs	r3, #1
 800264a:	e0a3      	b.n	8002794 <_printf_i+0x1f4>
 800264c:	6825      	ldr	r5, [r4, #0]
 800264e:	6808      	ldr	r0, [r1, #0]
 8002650:	062e      	lsls	r6, r5, #24
 8002652:	f100 0304 	add.w	r3, r0, #4
 8002656:	d50a      	bpl.n	800266e <_printf_i+0xce>
 8002658:	6805      	ldr	r5, [r0, #0]
 800265a:	600b      	str	r3, [r1, #0]
 800265c:	2d00      	cmp	r5, #0
 800265e:	da03      	bge.n	8002668 <_printf_i+0xc8>
 8002660:	232d      	movs	r3, #45	; 0x2d
 8002662:	426d      	negs	r5, r5
 8002664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002668:	485e      	ldr	r0, [pc, #376]	; (80027e4 <_printf_i+0x244>)
 800266a:	230a      	movs	r3, #10
 800266c:	e019      	b.n	80026a2 <_printf_i+0x102>
 800266e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002672:	6805      	ldr	r5, [r0, #0]
 8002674:	600b      	str	r3, [r1, #0]
 8002676:	bf18      	it	ne
 8002678:	b22d      	sxthne	r5, r5
 800267a:	e7ef      	b.n	800265c <_printf_i+0xbc>
 800267c:	680b      	ldr	r3, [r1, #0]
 800267e:	6825      	ldr	r5, [r4, #0]
 8002680:	1d18      	adds	r0, r3, #4
 8002682:	6008      	str	r0, [r1, #0]
 8002684:	0628      	lsls	r0, r5, #24
 8002686:	d501      	bpl.n	800268c <_printf_i+0xec>
 8002688:	681d      	ldr	r5, [r3, #0]
 800268a:	e002      	b.n	8002692 <_printf_i+0xf2>
 800268c:	0669      	lsls	r1, r5, #25
 800268e:	d5fb      	bpl.n	8002688 <_printf_i+0xe8>
 8002690:	881d      	ldrh	r5, [r3, #0]
 8002692:	4854      	ldr	r0, [pc, #336]	; (80027e4 <_printf_i+0x244>)
 8002694:	2f6f      	cmp	r7, #111	; 0x6f
 8002696:	bf0c      	ite	eq
 8002698:	2308      	moveq	r3, #8
 800269a:	230a      	movne	r3, #10
 800269c:	2100      	movs	r1, #0
 800269e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80026a2:	6866      	ldr	r6, [r4, #4]
 80026a4:	60a6      	str	r6, [r4, #8]
 80026a6:	2e00      	cmp	r6, #0
 80026a8:	bfa2      	ittt	ge
 80026aa:	6821      	ldrge	r1, [r4, #0]
 80026ac:	f021 0104 	bicge.w	r1, r1, #4
 80026b0:	6021      	strge	r1, [r4, #0]
 80026b2:	b90d      	cbnz	r5, 80026b8 <_printf_i+0x118>
 80026b4:	2e00      	cmp	r6, #0
 80026b6:	d04d      	beq.n	8002754 <_printf_i+0x1b4>
 80026b8:	4616      	mov	r6, r2
 80026ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80026be:	fb03 5711 	mls	r7, r3, r1, r5
 80026c2:	5dc7      	ldrb	r7, [r0, r7]
 80026c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80026c8:	462f      	mov	r7, r5
 80026ca:	42bb      	cmp	r3, r7
 80026cc:	460d      	mov	r5, r1
 80026ce:	d9f4      	bls.n	80026ba <_printf_i+0x11a>
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	d10b      	bne.n	80026ec <_printf_i+0x14c>
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	07df      	lsls	r7, r3, #31
 80026d8:	d508      	bpl.n	80026ec <_printf_i+0x14c>
 80026da:	6923      	ldr	r3, [r4, #16]
 80026dc:	6861      	ldr	r1, [r4, #4]
 80026de:	4299      	cmp	r1, r3
 80026e0:	bfde      	ittt	le
 80026e2:	2330      	movle	r3, #48	; 0x30
 80026e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80026e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80026ec:	1b92      	subs	r2, r2, r6
 80026ee:	6122      	str	r2, [r4, #16]
 80026f0:	f8cd a000 	str.w	sl, [sp]
 80026f4:	464b      	mov	r3, r9
 80026f6:	aa03      	add	r2, sp, #12
 80026f8:	4621      	mov	r1, r4
 80026fa:	4640      	mov	r0, r8
 80026fc:	f7ff fee2 	bl	80024c4 <_printf_common>
 8002700:	3001      	adds	r0, #1
 8002702:	d14c      	bne.n	800279e <_printf_i+0x1fe>
 8002704:	f04f 30ff 	mov.w	r0, #4294967295
 8002708:	b004      	add	sp, #16
 800270a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800270e:	4835      	ldr	r0, [pc, #212]	; (80027e4 <_printf_i+0x244>)
 8002710:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002714:	6823      	ldr	r3, [r4, #0]
 8002716:	680e      	ldr	r6, [r1, #0]
 8002718:	061f      	lsls	r7, r3, #24
 800271a:	f856 5b04 	ldr.w	r5, [r6], #4
 800271e:	600e      	str	r6, [r1, #0]
 8002720:	d514      	bpl.n	800274c <_printf_i+0x1ac>
 8002722:	07d9      	lsls	r1, r3, #31
 8002724:	bf44      	itt	mi
 8002726:	f043 0320 	orrmi.w	r3, r3, #32
 800272a:	6023      	strmi	r3, [r4, #0]
 800272c:	b91d      	cbnz	r5, 8002736 <_printf_i+0x196>
 800272e:	6823      	ldr	r3, [r4, #0]
 8002730:	f023 0320 	bic.w	r3, r3, #32
 8002734:	6023      	str	r3, [r4, #0]
 8002736:	2310      	movs	r3, #16
 8002738:	e7b0      	b.n	800269c <_printf_i+0xfc>
 800273a:	6823      	ldr	r3, [r4, #0]
 800273c:	f043 0320 	orr.w	r3, r3, #32
 8002740:	6023      	str	r3, [r4, #0]
 8002742:	2378      	movs	r3, #120	; 0x78
 8002744:	4828      	ldr	r0, [pc, #160]	; (80027e8 <_printf_i+0x248>)
 8002746:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800274a:	e7e3      	b.n	8002714 <_printf_i+0x174>
 800274c:	065e      	lsls	r6, r3, #25
 800274e:	bf48      	it	mi
 8002750:	b2ad      	uxthmi	r5, r5
 8002752:	e7e6      	b.n	8002722 <_printf_i+0x182>
 8002754:	4616      	mov	r6, r2
 8002756:	e7bb      	b.n	80026d0 <_printf_i+0x130>
 8002758:	680b      	ldr	r3, [r1, #0]
 800275a:	6826      	ldr	r6, [r4, #0]
 800275c:	6960      	ldr	r0, [r4, #20]
 800275e:	1d1d      	adds	r5, r3, #4
 8002760:	600d      	str	r5, [r1, #0]
 8002762:	0635      	lsls	r5, r6, #24
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	d501      	bpl.n	800276c <_printf_i+0x1cc>
 8002768:	6018      	str	r0, [r3, #0]
 800276a:	e002      	b.n	8002772 <_printf_i+0x1d2>
 800276c:	0671      	lsls	r1, r6, #25
 800276e:	d5fb      	bpl.n	8002768 <_printf_i+0x1c8>
 8002770:	8018      	strh	r0, [r3, #0]
 8002772:	2300      	movs	r3, #0
 8002774:	6123      	str	r3, [r4, #16]
 8002776:	4616      	mov	r6, r2
 8002778:	e7ba      	b.n	80026f0 <_printf_i+0x150>
 800277a:	680b      	ldr	r3, [r1, #0]
 800277c:	1d1a      	adds	r2, r3, #4
 800277e:	600a      	str	r2, [r1, #0]
 8002780:	681e      	ldr	r6, [r3, #0]
 8002782:	6862      	ldr	r2, [r4, #4]
 8002784:	2100      	movs	r1, #0
 8002786:	4630      	mov	r0, r6
 8002788:	f7fd fd2a 	bl	80001e0 <memchr>
 800278c:	b108      	cbz	r0, 8002792 <_printf_i+0x1f2>
 800278e:	1b80      	subs	r0, r0, r6
 8002790:	6060      	str	r0, [r4, #4]
 8002792:	6863      	ldr	r3, [r4, #4]
 8002794:	6123      	str	r3, [r4, #16]
 8002796:	2300      	movs	r3, #0
 8002798:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800279c:	e7a8      	b.n	80026f0 <_printf_i+0x150>
 800279e:	6923      	ldr	r3, [r4, #16]
 80027a0:	4632      	mov	r2, r6
 80027a2:	4649      	mov	r1, r9
 80027a4:	4640      	mov	r0, r8
 80027a6:	47d0      	blx	sl
 80027a8:	3001      	adds	r0, #1
 80027aa:	d0ab      	beq.n	8002704 <_printf_i+0x164>
 80027ac:	6823      	ldr	r3, [r4, #0]
 80027ae:	079b      	lsls	r3, r3, #30
 80027b0:	d413      	bmi.n	80027da <_printf_i+0x23a>
 80027b2:	68e0      	ldr	r0, [r4, #12]
 80027b4:	9b03      	ldr	r3, [sp, #12]
 80027b6:	4298      	cmp	r0, r3
 80027b8:	bfb8      	it	lt
 80027ba:	4618      	movlt	r0, r3
 80027bc:	e7a4      	b.n	8002708 <_printf_i+0x168>
 80027be:	2301      	movs	r3, #1
 80027c0:	4632      	mov	r2, r6
 80027c2:	4649      	mov	r1, r9
 80027c4:	4640      	mov	r0, r8
 80027c6:	47d0      	blx	sl
 80027c8:	3001      	adds	r0, #1
 80027ca:	d09b      	beq.n	8002704 <_printf_i+0x164>
 80027cc:	3501      	adds	r5, #1
 80027ce:	68e3      	ldr	r3, [r4, #12]
 80027d0:	9903      	ldr	r1, [sp, #12]
 80027d2:	1a5b      	subs	r3, r3, r1
 80027d4:	42ab      	cmp	r3, r5
 80027d6:	dcf2      	bgt.n	80027be <_printf_i+0x21e>
 80027d8:	e7eb      	b.n	80027b2 <_printf_i+0x212>
 80027da:	2500      	movs	r5, #0
 80027dc:	f104 0619 	add.w	r6, r4, #25
 80027e0:	e7f5      	b.n	80027ce <_printf_i+0x22e>
 80027e2:	bf00      	nop
 80027e4:	08002e8d 	.word	0x08002e8d
 80027e8:	08002e9e 	.word	0x08002e9e

080027ec <_sbrk_r>:
 80027ec:	b538      	push	{r3, r4, r5, lr}
 80027ee:	4d06      	ldr	r5, [pc, #24]	; (8002808 <_sbrk_r+0x1c>)
 80027f0:	2300      	movs	r3, #0
 80027f2:	4604      	mov	r4, r0
 80027f4:	4608      	mov	r0, r1
 80027f6:	602b      	str	r3, [r5, #0]
 80027f8:	f7fe f8de 	bl	80009b8 <_sbrk>
 80027fc:	1c43      	adds	r3, r0, #1
 80027fe:	d102      	bne.n	8002806 <_sbrk_r+0x1a>
 8002800:	682b      	ldr	r3, [r5, #0]
 8002802:	b103      	cbz	r3, 8002806 <_sbrk_r+0x1a>
 8002804:	6023      	str	r3, [r4, #0]
 8002806:	bd38      	pop	{r3, r4, r5, pc}
 8002808:	200000f0 	.word	0x200000f0

0800280c <__sread>:
 800280c:	b510      	push	{r4, lr}
 800280e:	460c      	mov	r4, r1
 8002810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002814:	f000 fab4 	bl	8002d80 <_read_r>
 8002818:	2800      	cmp	r0, #0
 800281a:	bfab      	itete	ge
 800281c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800281e:	89a3      	ldrhlt	r3, [r4, #12]
 8002820:	181b      	addge	r3, r3, r0
 8002822:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002826:	bfac      	ite	ge
 8002828:	6563      	strge	r3, [r4, #84]	; 0x54
 800282a:	81a3      	strhlt	r3, [r4, #12]
 800282c:	bd10      	pop	{r4, pc}

0800282e <__swrite>:
 800282e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002832:	461f      	mov	r7, r3
 8002834:	898b      	ldrh	r3, [r1, #12]
 8002836:	05db      	lsls	r3, r3, #23
 8002838:	4605      	mov	r5, r0
 800283a:	460c      	mov	r4, r1
 800283c:	4616      	mov	r6, r2
 800283e:	d505      	bpl.n	800284c <__swrite+0x1e>
 8002840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002844:	2302      	movs	r3, #2
 8002846:	2200      	movs	r2, #0
 8002848:	f000 f9c8 	bl	8002bdc <_lseek_r>
 800284c:	89a3      	ldrh	r3, [r4, #12]
 800284e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002852:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002856:	81a3      	strh	r3, [r4, #12]
 8002858:	4632      	mov	r2, r6
 800285a:	463b      	mov	r3, r7
 800285c:	4628      	mov	r0, r5
 800285e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002862:	f000 b869 	b.w	8002938 <_write_r>

08002866 <__sseek>:
 8002866:	b510      	push	{r4, lr}
 8002868:	460c      	mov	r4, r1
 800286a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800286e:	f000 f9b5 	bl	8002bdc <_lseek_r>
 8002872:	1c43      	adds	r3, r0, #1
 8002874:	89a3      	ldrh	r3, [r4, #12]
 8002876:	bf15      	itete	ne
 8002878:	6560      	strne	r0, [r4, #84]	; 0x54
 800287a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800287e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002882:	81a3      	strheq	r3, [r4, #12]
 8002884:	bf18      	it	ne
 8002886:	81a3      	strhne	r3, [r4, #12]
 8002888:	bd10      	pop	{r4, pc}

0800288a <__sclose>:
 800288a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800288e:	f000 b8d3 	b.w	8002a38 <_close_r>
	...

08002894 <__swbuf_r>:
 8002894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002896:	460e      	mov	r6, r1
 8002898:	4614      	mov	r4, r2
 800289a:	4605      	mov	r5, r0
 800289c:	b118      	cbz	r0, 80028a6 <__swbuf_r+0x12>
 800289e:	6983      	ldr	r3, [r0, #24]
 80028a0:	b90b      	cbnz	r3, 80028a6 <__swbuf_r+0x12>
 80028a2:	f7ff fbbb 	bl	800201c <__sinit>
 80028a6:	4b21      	ldr	r3, [pc, #132]	; (800292c <__swbuf_r+0x98>)
 80028a8:	429c      	cmp	r4, r3
 80028aa:	d12b      	bne.n	8002904 <__swbuf_r+0x70>
 80028ac:	686c      	ldr	r4, [r5, #4]
 80028ae:	69a3      	ldr	r3, [r4, #24]
 80028b0:	60a3      	str	r3, [r4, #8]
 80028b2:	89a3      	ldrh	r3, [r4, #12]
 80028b4:	071a      	lsls	r2, r3, #28
 80028b6:	d52f      	bpl.n	8002918 <__swbuf_r+0x84>
 80028b8:	6923      	ldr	r3, [r4, #16]
 80028ba:	b36b      	cbz	r3, 8002918 <__swbuf_r+0x84>
 80028bc:	6923      	ldr	r3, [r4, #16]
 80028be:	6820      	ldr	r0, [r4, #0]
 80028c0:	1ac0      	subs	r0, r0, r3
 80028c2:	6963      	ldr	r3, [r4, #20]
 80028c4:	b2f6      	uxtb	r6, r6
 80028c6:	4283      	cmp	r3, r0
 80028c8:	4637      	mov	r7, r6
 80028ca:	dc04      	bgt.n	80028d6 <__swbuf_r+0x42>
 80028cc:	4621      	mov	r1, r4
 80028ce:	4628      	mov	r0, r5
 80028d0:	f000 f948 	bl	8002b64 <_fflush_r>
 80028d4:	bb30      	cbnz	r0, 8002924 <__swbuf_r+0x90>
 80028d6:	68a3      	ldr	r3, [r4, #8]
 80028d8:	3b01      	subs	r3, #1
 80028da:	60a3      	str	r3, [r4, #8]
 80028dc:	6823      	ldr	r3, [r4, #0]
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	6022      	str	r2, [r4, #0]
 80028e2:	701e      	strb	r6, [r3, #0]
 80028e4:	6963      	ldr	r3, [r4, #20]
 80028e6:	3001      	adds	r0, #1
 80028e8:	4283      	cmp	r3, r0
 80028ea:	d004      	beq.n	80028f6 <__swbuf_r+0x62>
 80028ec:	89a3      	ldrh	r3, [r4, #12]
 80028ee:	07db      	lsls	r3, r3, #31
 80028f0:	d506      	bpl.n	8002900 <__swbuf_r+0x6c>
 80028f2:	2e0a      	cmp	r6, #10
 80028f4:	d104      	bne.n	8002900 <__swbuf_r+0x6c>
 80028f6:	4621      	mov	r1, r4
 80028f8:	4628      	mov	r0, r5
 80028fa:	f000 f933 	bl	8002b64 <_fflush_r>
 80028fe:	b988      	cbnz	r0, 8002924 <__swbuf_r+0x90>
 8002900:	4638      	mov	r0, r7
 8002902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002904:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <__swbuf_r+0x9c>)
 8002906:	429c      	cmp	r4, r3
 8002908:	d101      	bne.n	800290e <__swbuf_r+0x7a>
 800290a:	68ac      	ldr	r4, [r5, #8]
 800290c:	e7cf      	b.n	80028ae <__swbuf_r+0x1a>
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <__swbuf_r+0xa0>)
 8002910:	429c      	cmp	r4, r3
 8002912:	bf08      	it	eq
 8002914:	68ec      	ldreq	r4, [r5, #12]
 8002916:	e7ca      	b.n	80028ae <__swbuf_r+0x1a>
 8002918:	4621      	mov	r1, r4
 800291a:	4628      	mov	r0, r5
 800291c:	f000 f81e 	bl	800295c <__swsetup_r>
 8002920:	2800      	cmp	r0, #0
 8002922:	d0cb      	beq.n	80028bc <__swbuf_r+0x28>
 8002924:	f04f 37ff 	mov.w	r7, #4294967295
 8002928:	e7ea      	b.n	8002900 <__swbuf_r+0x6c>
 800292a:	bf00      	nop
 800292c:	08002e3c 	.word	0x08002e3c
 8002930:	08002e5c 	.word	0x08002e5c
 8002934:	08002e1c 	.word	0x08002e1c

08002938 <_write_r>:
 8002938:	b538      	push	{r3, r4, r5, lr}
 800293a:	4d07      	ldr	r5, [pc, #28]	; (8002958 <_write_r+0x20>)
 800293c:	4604      	mov	r4, r0
 800293e:	4608      	mov	r0, r1
 8002940:	4611      	mov	r1, r2
 8002942:	2200      	movs	r2, #0
 8002944:	602a      	str	r2, [r5, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	f7fd fe3d 	bl	80005c6 <_write>
 800294c:	1c43      	adds	r3, r0, #1
 800294e:	d102      	bne.n	8002956 <_write_r+0x1e>
 8002950:	682b      	ldr	r3, [r5, #0]
 8002952:	b103      	cbz	r3, 8002956 <_write_r+0x1e>
 8002954:	6023      	str	r3, [r4, #0]
 8002956:	bd38      	pop	{r3, r4, r5, pc}
 8002958:	200000f0 	.word	0x200000f0

0800295c <__swsetup_r>:
 800295c:	4b32      	ldr	r3, [pc, #200]	; (8002a28 <__swsetup_r+0xcc>)
 800295e:	b570      	push	{r4, r5, r6, lr}
 8002960:	681d      	ldr	r5, [r3, #0]
 8002962:	4606      	mov	r6, r0
 8002964:	460c      	mov	r4, r1
 8002966:	b125      	cbz	r5, 8002972 <__swsetup_r+0x16>
 8002968:	69ab      	ldr	r3, [r5, #24]
 800296a:	b913      	cbnz	r3, 8002972 <__swsetup_r+0x16>
 800296c:	4628      	mov	r0, r5
 800296e:	f7ff fb55 	bl	800201c <__sinit>
 8002972:	4b2e      	ldr	r3, [pc, #184]	; (8002a2c <__swsetup_r+0xd0>)
 8002974:	429c      	cmp	r4, r3
 8002976:	d10f      	bne.n	8002998 <__swsetup_r+0x3c>
 8002978:	686c      	ldr	r4, [r5, #4]
 800297a:	89a3      	ldrh	r3, [r4, #12]
 800297c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002980:	0719      	lsls	r1, r3, #28
 8002982:	d42c      	bmi.n	80029de <__swsetup_r+0x82>
 8002984:	06dd      	lsls	r5, r3, #27
 8002986:	d411      	bmi.n	80029ac <__swsetup_r+0x50>
 8002988:	2309      	movs	r3, #9
 800298a:	6033      	str	r3, [r6, #0]
 800298c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002990:	81a3      	strh	r3, [r4, #12]
 8002992:	f04f 30ff 	mov.w	r0, #4294967295
 8002996:	e03e      	b.n	8002a16 <__swsetup_r+0xba>
 8002998:	4b25      	ldr	r3, [pc, #148]	; (8002a30 <__swsetup_r+0xd4>)
 800299a:	429c      	cmp	r4, r3
 800299c:	d101      	bne.n	80029a2 <__swsetup_r+0x46>
 800299e:	68ac      	ldr	r4, [r5, #8]
 80029a0:	e7eb      	b.n	800297a <__swsetup_r+0x1e>
 80029a2:	4b24      	ldr	r3, [pc, #144]	; (8002a34 <__swsetup_r+0xd8>)
 80029a4:	429c      	cmp	r4, r3
 80029a6:	bf08      	it	eq
 80029a8:	68ec      	ldreq	r4, [r5, #12]
 80029aa:	e7e6      	b.n	800297a <__swsetup_r+0x1e>
 80029ac:	0758      	lsls	r0, r3, #29
 80029ae:	d512      	bpl.n	80029d6 <__swsetup_r+0x7a>
 80029b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029b2:	b141      	cbz	r1, 80029c6 <__swsetup_r+0x6a>
 80029b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80029b8:	4299      	cmp	r1, r3
 80029ba:	d002      	beq.n	80029c2 <__swsetup_r+0x66>
 80029bc:	4630      	mov	r0, r6
 80029be:	f000 f98f 	bl	8002ce0 <_free_r>
 80029c2:	2300      	movs	r3, #0
 80029c4:	6363      	str	r3, [r4, #52]	; 0x34
 80029c6:	89a3      	ldrh	r3, [r4, #12]
 80029c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80029cc:	81a3      	strh	r3, [r4, #12]
 80029ce:	2300      	movs	r3, #0
 80029d0:	6063      	str	r3, [r4, #4]
 80029d2:	6923      	ldr	r3, [r4, #16]
 80029d4:	6023      	str	r3, [r4, #0]
 80029d6:	89a3      	ldrh	r3, [r4, #12]
 80029d8:	f043 0308 	orr.w	r3, r3, #8
 80029dc:	81a3      	strh	r3, [r4, #12]
 80029de:	6923      	ldr	r3, [r4, #16]
 80029e0:	b94b      	cbnz	r3, 80029f6 <__swsetup_r+0x9a>
 80029e2:	89a3      	ldrh	r3, [r4, #12]
 80029e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80029e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029ec:	d003      	beq.n	80029f6 <__swsetup_r+0x9a>
 80029ee:	4621      	mov	r1, r4
 80029f0:	4630      	mov	r0, r6
 80029f2:	f000 f929 	bl	8002c48 <__smakebuf_r>
 80029f6:	89a0      	ldrh	r0, [r4, #12]
 80029f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80029fc:	f010 0301 	ands.w	r3, r0, #1
 8002a00:	d00a      	beq.n	8002a18 <__swsetup_r+0xbc>
 8002a02:	2300      	movs	r3, #0
 8002a04:	60a3      	str	r3, [r4, #8]
 8002a06:	6963      	ldr	r3, [r4, #20]
 8002a08:	425b      	negs	r3, r3
 8002a0a:	61a3      	str	r3, [r4, #24]
 8002a0c:	6923      	ldr	r3, [r4, #16]
 8002a0e:	b943      	cbnz	r3, 8002a22 <__swsetup_r+0xc6>
 8002a10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002a14:	d1ba      	bne.n	800298c <__swsetup_r+0x30>
 8002a16:	bd70      	pop	{r4, r5, r6, pc}
 8002a18:	0781      	lsls	r1, r0, #30
 8002a1a:	bf58      	it	pl
 8002a1c:	6963      	ldrpl	r3, [r4, #20]
 8002a1e:	60a3      	str	r3, [r4, #8]
 8002a20:	e7f4      	b.n	8002a0c <__swsetup_r+0xb0>
 8002a22:	2000      	movs	r0, #0
 8002a24:	e7f7      	b.n	8002a16 <__swsetup_r+0xba>
 8002a26:	bf00      	nop
 8002a28:	2000000c 	.word	0x2000000c
 8002a2c:	08002e3c 	.word	0x08002e3c
 8002a30:	08002e5c 	.word	0x08002e5c
 8002a34:	08002e1c 	.word	0x08002e1c

08002a38 <_close_r>:
 8002a38:	b538      	push	{r3, r4, r5, lr}
 8002a3a:	4d06      	ldr	r5, [pc, #24]	; (8002a54 <_close_r+0x1c>)
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	4604      	mov	r4, r0
 8002a40:	4608      	mov	r0, r1
 8002a42:	602b      	str	r3, [r5, #0]
 8002a44:	f7fd ff83 	bl	800094e <_close>
 8002a48:	1c43      	adds	r3, r0, #1
 8002a4a:	d102      	bne.n	8002a52 <_close_r+0x1a>
 8002a4c:	682b      	ldr	r3, [r5, #0]
 8002a4e:	b103      	cbz	r3, 8002a52 <_close_r+0x1a>
 8002a50:	6023      	str	r3, [r4, #0]
 8002a52:	bd38      	pop	{r3, r4, r5, pc}
 8002a54:	200000f0 	.word	0x200000f0

08002a58 <__sflush_r>:
 8002a58:	898a      	ldrh	r2, [r1, #12]
 8002a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a5e:	4605      	mov	r5, r0
 8002a60:	0710      	lsls	r0, r2, #28
 8002a62:	460c      	mov	r4, r1
 8002a64:	d458      	bmi.n	8002b18 <__sflush_r+0xc0>
 8002a66:	684b      	ldr	r3, [r1, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	dc05      	bgt.n	8002a78 <__sflush_r+0x20>
 8002a6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	dc02      	bgt.n	8002a78 <__sflush_r+0x20>
 8002a72:	2000      	movs	r0, #0
 8002a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a7a:	2e00      	cmp	r6, #0
 8002a7c:	d0f9      	beq.n	8002a72 <__sflush_r+0x1a>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002a84:	682f      	ldr	r7, [r5, #0]
 8002a86:	602b      	str	r3, [r5, #0]
 8002a88:	d032      	beq.n	8002af0 <__sflush_r+0x98>
 8002a8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a8c:	89a3      	ldrh	r3, [r4, #12]
 8002a8e:	075a      	lsls	r2, r3, #29
 8002a90:	d505      	bpl.n	8002a9e <__sflush_r+0x46>
 8002a92:	6863      	ldr	r3, [r4, #4]
 8002a94:	1ac0      	subs	r0, r0, r3
 8002a96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a98:	b10b      	cbz	r3, 8002a9e <__sflush_r+0x46>
 8002a9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a9c:	1ac0      	subs	r0, r0, r3
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002aa4:	6a21      	ldr	r1, [r4, #32]
 8002aa6:	4628      	mov	r0, r5
 8002aa8:	47b0      	blx	r6
 8002aaa:	1c43      	adds	r3, r0, #1
 8002aac:	89a3      	ldrh	r3, [r4, #12]
 8002aae:	d106      	bne.n	8002abe <__sflush_r+0x66>
 8002ab0:	6829      	ldr	r1, [r5, #0]
 8002ab2:	291d      	cmp	r1, #29
 8002ab4:	d82c      	bhi.n	8002b10 <__sflush_r+0xb8>
 8002ab6:	4a2a      	ldr	r2, [pc, #168]	; (8002b60 <__sflush_r+0x108>)
 8002ab8:	40ca      	lsrs	r2, r1
 8002aba:	07d6      	lsls	r6, r2, #31
 8002abc:	d528      	bpl.n	8002b10 <__sflush_r+0xb8>
 8002abe:	2200      	movs	r2, #0
 8002ac0:	6062      	str	r2, [r4, #4]
 8002ac2:	04d9      	lsls	r1, r3, #19
 8002ac4:	6922      	ldr	r2, [r4, #16]
 8002ac6:	6022      	str	r2, [r4, #0]
 8002ac8:	d504      	bpl.n	8002ad4 <__sflush_r+0x7c>
 8002aca:	1c42      	adds	r2, r0, #1
 8002acc:	d101      	bne.n	8002ad2 <__sflush_r+0x7a>
 8002ace:	682b      	ldr	r3, [r5, #0]
 8002ad0:	b903      	cbnz	r3, 8002ad4 <__sflush_r+0x7c>
 8002ad2:	6560      	str	r0, [r4, #84]	; 0x54
 8002ad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ad6:	602f      	str	r7, [r5, #0]
 8002ad8:	2900      	cmp	r1, #0
 8002ada:	d0ca      	beq.n	8002a72 <__sflush_r+0x1a>
 8002adc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ae0:	4299      	cmp	r1, r3
 8002ae2:	d002      	beq.n	8002aea <__sflush_r+0x92>
 8002ae4:	4628      	mov	r0, r5
 8002ae6:	f000 f8fb 	bl	8002ce0 <_free_r>
 8002aea:	2000      	movs	r0, #0
 8002aec:	6360      	str	r0, [r4, #52]	; 0x34
 8002aee:	e7c1      	b.n	8002a74 <__sflush_r+0x1c>
 8002af0:	6a21      	ldr	r1, [r4, #32]
 8002af2:	2301      	movs	r3, #1
 8002af4:	4628      	mov	r0, r5
 8002af6:	47b0      	blx	r6
 8002af8:	1c41      	adds	r1, r0, #1
 8002afa:	d1c7      	bne.n	8002a8c <__sflush_r+0x34>
 8002afc:	682b      	ldr	r3, [r5, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0c4      	beq.n	8002a8c <__sflush_r+0x34>
 8002b02:	2b1d      	cmp	r3, #29
 8002b04:	d001      	beq.n	8002b0a <__sflush_r+0xb2>
 8002b06:	2b16      	cmp	r3, #22
 8002b08:	d101      	bne.n	8002b0e <__sflush_r+0xb6>
 8002b0a:	602f      	str	r7, [r5, #0]
 8002b0c:	e7b1      	b.n	8002a72 <__sflush_r+0x1a>
 8002b0e:	89a3      	ldrh	r3, [r4, #12]
 8002b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b14:	81a3      	strh	r3, [r4, #12]
 8002b16:	e7ad      	b.n	8002a74 <__sflush_r+0x1c>
 8002b18:	690f      	ldr	r7, [r1, #16]
 8002b1a:	2f00      	cmp	r7, #0
 8002b1c:	d0a9      	beq.n	8002a72 <__sflush_r+0x1a>
 8002b1e:	0793      	lsls	r3, r2, #30
 8002b20:	680e      	ldr	r6, [r1, #0]
 8002b22:	bf08      	it	eq
 8002b24:	694b      	ldreq	r3, [r1, #20]
 8002b26:	600f      	str	r7, [r1, #0]
 8002b28:	bf18      	it	ne
 8002b2a:	2300      	movne	r3, #0
 8002b2c:	eba6 0807 	sub.w	r8, r6, r7
 8002b30:	608b      	str	r3, [r1, #8]
 8002b32:	f1b8 0f00 	cmp.w	r8, #0
 8002b36:	dd9c      	ble.n	8002a72 <__sflush_r+0x1a>
 8002b38:	6a21      	ldr	r1, [r4, #32]
 8002b3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002b3c:	4643      	mov	r3, r8
 8002b3e:	463a      	mov	r2, r7
 8002b40:	4628      	mov	r0, r5
 8002b42:	47b0      	blx	r6
 8002b44:	2800      	cmp	r0, #0
 8002b46:	dc06      	bgt.n	8002b56 <__sflush_r+0xfe>
 8002b48:	89a3      	ldrh	r3, [r4, #12]
 8002b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b4e:	81a3      	strh	r3, [r4, #12]
 8002b50:	f04f 30ff 	mov.w	r0, #4294967295
 8002b54:	e78e      	b.n	8002a74 <__sflush_r+0x1c>
 8002b56:	4407      	add	r7, r0
 8002b58:	eba8 0800 	sub.w	r8, r8, r0
 8002b5c:	e7e9      	b.n	8002b32 <__sflush_r+0xda>
 8002b5e:	bf00      	nop
 8002b60:	20400001 	.word	0x20400001

08002b64 <_fflush_r>:
 8002b64:	b538      	push	{r3, r4, r5, lr}
 8002b66:	690b      	ldr	r3, [r1, #16]
 8002b68:	4605      	mov	r5, r0
 8002b6a:	460c      	mov	r4, r1
 8002b6c:	b913      	cbnz	r3, 8002b74 <_fflush_r+0x10>
 8002b6e:	2500      	movs	r5, #0
 8002b70:	4628      	mov	r0, r5
 8002b72:	bd38      	pop	{r3, r4, r5, pc}
 8002b74:	b118      	cbz	r0, 8002b7e <_fflush_r+0x1a>
 8002b76:	6983      	ldr	r3, [r0, #24]
 8002b78:	b90b      	cbnz	r3, 8002b7e <_fflush_r+0x1a>
 8002b7a:	f7ff fa4f 	bl	800201c <__sinit>
 8002b7e:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <_fflush_r+0x6c>)
 8002b80:	429c      	cmp	r4, r3
 8002b82:	d11b      	bne.n	8002bbc <_fflush_r+0x58>
 8002b84:	686c      	ldr	r4, [r5, #4]
 8002b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0ef      	beq.n	8002b6e <_fflush_r+0xa>
 8002b8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002b90:	07d0      	lsls	r0, r2, #31
 8002b92:	d404      	bmi.n	8002b9e <_fflush_r+0x3a>
 8002b94:	0599      	lsls	r1, r3, #22
 8002b96:	d402      	bmi.n	8002b9e <_fflush_r+0x3a>
 8002b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b9a:	f7ff fadd 	bl	8002158 <__retarget_lock_acquire_recursive>
 8002b9e:	4628      	mov	r0, r5
 8002ba0:	4621      	mov	r1, r4
 8002ba2:	f7ff ff59 	bl	8002a58 <__sflush_r>
 8002ba6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ba8:	07da      	lsls	r2, r3, #31
 8002baa:	4605      	mov	r5, r0
 8002bac:	d4e0      	bmi.n	8002b70 <_fflush_r+0xc>
 8002bae:	89a3      	ldrh	r3, [r4, #12]
 8002bb0:	059b      	lsls	r3, r3, #22
 8002bb2:	d4dd      	bmi.n	8002b70 <_fflush_r+0xc>
 8002bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bb6:	f7ff fad0 	bl	800215a <__retarget_lock_release_recursive>
 8002bba:	e7d9      	b.n	8002b70 <_fflush_r+0xc>
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <_fflush_r+0x70>)
 8002bbe:	429c      	cmp	r4, r3
 8002bc0:	d101      	bne.n	8002bc6 <_fflush_r+0x62>
 8002bc2:	68ac      	ldr	r4, [r5, #8]
 8002bc4:	e7df      	b.n	8002b86 <_fflush_r+0x22>
 8002bc6:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <_fflush_r+0x74>)
 8002bc8:	429c      	cmp	r4, r3
 8002bca:	bf08      	it	eq
 8002bcc:	68ec      	ldreq	r4, [r5, #12]
 8002bce:	e7da      	b.n	8002b86 <_fflush_r+0x22>
 8002bd0:	08002e3c 	.word	0x08002e3c
 8002bd4:	08002e5c 	.word	0x08002e5c
 8002bd8:	08002e1c 	.word	0x08002e1c

08002bdc <_lseek_r>:
 8002bdc:	b538      	push	{r3, r4, r5, lr}
 8002bde:	4d07      	ldr	r5, [pc, #28]	; (8002bfc <_lseek_r+0x20>)
 8002be0:	4604      	mov	r4, r0
 8002be2:	4608      	mov	r0, r1
 8002be4:	4611      	mov	r1, r2
 8002be6:	2200      	movs	r2, #0
 8002be8:	602a      	str	r2, [r5, #0]
 8002bea:	461a      	mov	r2, r3
 8002bec:	f7fd fed6 	bl	800099c <_lseek>
 8002bf0:	1c43      	adds	r3, r0, #1
 8002bf2:	d102      	bne.n	8002bfa <_lseek_r+0x1e>
 8002bf4:	682b      	ldr	r3, [r5, #0]
 8002bf6:	b103      	cbz	r3, 8002bfa <_lseek_r+0x1e>
 8002bf8:	6023      	str	r3, [r4, #0]
 8002bfa:	bd38      	pop	{r3, r4, r5, pc}
 8002bfc:	200000f0 	.word	0x200000f0

08002c00 <__swhatbuf_r>:
 8002c00:	b570      	push	{r4, r5, r6, lr}
 8002c02:	460e      	mov	r6, r1
 8002c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c08:	2900      	cmp	r1, #0
 8002c0a:	b096      	sub	sp, #88	; 0x58
 8002c0c:	4614      	mov	r4, r2
 8002c0e:	461d      	mov	r5, r3
 8002c10:	da07      	bge.n	8002c22 <__swhatbuf_r+0x22>
 8002c12:	2300      	movs	r3, #0
 8002c14:	602b      	str	r3, [r5, #0]
 8002c16:	89b3      	ldrh	r3, [r6, #12]
 8002c18:	061a      	lsls	r2, r3, #24
 8002c1a:	d410      	bmi.n	8002c3e <__swhatbuf_r+0x3e>
 8002c1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c20:	e00e      	b.n	8002c40 <__swhatbuf_r+0x40>
 8002c22:	466a      	mov	r2, sp
 8002c24:	f000 f8be 	bl	8002da4 <_fstat_r>
 8002c28:	2800      	cmp	r0, #0
 8002c2a:	dbf2      	blt.n	8002c12 <__swhatbuf_r+0x12>
 8002c2c:	9a01      	ldr	r2, [sp, #4]
 8002c2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002c32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002c36:	425a      	negs	r2, r3
 8002c38:	415a      	adcs	r2, r3
 8002c3a:	602a      	str	r2, [r5, #0]
 8002c3c:	e7ee      	b.n	8002c1c <__swhatbuf_r+0x1c>
 8002c3e:	2340      	movs	r3, #64	; 0x40
 8002c40:	2000      	movs	r0, #0
 8002c42:	6023      	str	r3, [r4, #0]
 8002c44:	b016      	add	sp, #88	; 0x58
 8002c46:	bd70      	pop	{r4, r5, r6, pc}

08002c48 <__smakebuf_r>:
 8002c48:	898b      	ldrh	r3, [r1, #12]
 8002c4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002c4c:	079d      	lsls	r5, r3, #30
 8002c4e:	4606      	mov	r6, r0
 8002c50:	460c      	mov	r4, r1
 8002c52:	d507      	bpl.n	8002c64 <__smakebuf_r+0x1c>
 8002c54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002c58:	6023      	str	r3, [r4, #0]
 8002c5a:	6123      	str	r3, [r4, #16]
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	6163      	str	r3, [r4, #20]
 8002c60:	b002      	add	sp, #8
 8002c62:	bd70      	pop	{r4, r5, r6, pc}
 8002c64:	ab01      	add	r3, sp, #4
 8002c66:	466a      	mov	r2, sp
 8002c68:	f7ff ffca 	bl	8002c00 <__swhatbuf_r>
 8002c6c:	9900      	ldr	r1, [sp, #0]
 8002c6e:	4605      	mov	r5, r0
 8002c70:	4630      	mov	r0, r6
 8002c72:	f7ff fa73 	bl	800215c <_malloc_r>
 8002c76:	b948      	cbnz	r0, 8002c8c <__smakebuf_r+0x44>
 8002c78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c7c:	059a      	lsls	r2, r3, #22
 8002c7e:	d4ef      	bmi.n	8002c60 <__smakebuf_r+0x18>
 8002c80:	f023 0303 	bic.w	r3, r3, #3
 8002c84:	f043 0302 	orr.w	r3, r3, #2
 8002c88:	81a3      	strh	r3, [r4, #12]
 8002c8a:	e7e3      	b.n	8002c54 <__smakebuf_r+0xc>
 8002c8c:	4b0d      	ldr	r3, [pc, #52]	; (8002cc4 <__smakebuf_r+0x7c>)
 8002c8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002c90:	89a3      	ldrh	r3, [r4, #12]
 8002c92:	6020      	str	r0, [r4, #0]
 8002c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c98:	81a3      	strh	r3, [r4, #12]
 8002c9a:	9b00      	ldr	r3, [sp, #0]
 8002c9c:	6163      	str	r3, [r4, #20]
 8002c9e:	9b01      	ldr	r3, [sp, #4]
 8002ca0:	6120      	str	r0, [r4, #16]
 8002ca2:	b15b      	cbz	r3, 8002cbc <__smakebuf_r+0x74>
 8002ca4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ca8:	4630      	mov	r0, r6
 8002caa:	f000 f88d 	bl	8002dc8 <_isatty_r>
 8002cae:	b128      	cbz	r0, 8002cbc <__smakebuf_r+0x74>
 8002cb0:	89a3      	ldrh	r3, [r4, #12]
 8002cb2:	f023 0303 	bic.w	r3, r3, #3
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	81a3      	strh	r3, [r4, #12]
 8002cbc:	89a0      	ldrh	r0, [r4, #12]
 8002cbe:	4305      	orrs	r5, r0
 8002cc0:	81a5      	strh	r5, [r4, #12]
 8002cc2:	e7cd      	b.n	8002c60 <__smakebuf_r+0x18>
 8002cc4:	08001fb5 	.word	0x08001fb5

08002cc8 <__malloc_lock>:
 8002cc8:	4801      	ldr	r0, [pc, #4]	; (8002cd0 <__malloc_lock+0x8>)
 8002cca:	f7ff ba45 	b.w	8002158 <__retarget_lock_acquire_recursive>
 8002cce:	bf00      	nop
 8002cd0:	200000e8 	.word	0x200000e8

08002cd4 <__malloc_unlock>:
 8002cd4:	4801      	ldr	r0, [pc, #4]	; (8002cdc <__malloc_unlock+0x8>)
 8002cd6:	f7ff ba40 	b.w	800215a <__retarget_lock_release_recursive>
 8002cda:	bf00      	nop
 8002cdc:	200000e8 	.word	0x200000e8

08002ce0 <_free_r>:
 8002ce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002ce2:	2900      	cmp	r1, #0
 8002ce4:	d048      	beq.n	8002d78 <_free_r+0x98>
 8002ce6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cea:	9001      	str	r0, [sp, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f1a1 0404 	sub.w	r4, r1, #4
 8002cf2:	bfb8      	it	lt
 8002cf4:	18e4      	addlt	r4, r4, r3
 8002cf6:	f7ff ffe7 	bl	8002cc8 <__malloc_lock>
 8002cfa:	4a20      	ldr	r2, [pc, #128]	; (8002d7c <_free_r+0x9c>)
 8002cfc:	9801      	ldr	r0, [sp, #4]
 8002cfe:	6813      	ldr	r3, [r2, #0]
 8002d00:	4615      	mov	r5, r2
 8002d02:	b933      	cbnz	r3, 8002d12 <_free_r+0x32>
 8002d04:	6063      	str	r3, [r4, #4]
 8002d06:	6014      	str	r4, [r2, #0]
 8002d08:	b003      	add	sp, #12
 8002d0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d0e:	f7ff bfe1 	b.w	8002cd4 <__malloc_unlock>
 8002d12:	42a3      	cmp	r3, r4
 8002d14:	d90b      	bls.n	8002d2e <_free_r+0x4e>
 8002d16:	6821      	ldr	r1, [r4, #0]
 8002d18:	1862      	adds	r2, r4, r1
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	bf04      	itt	eq
 8002d1e:	681a      	ldreq	r2, [r3, #0]
 8002d20:	685b      	ldreq	r3, [r3, #4]
 8002d22:	6063      	str	r3, [r4, #4]
 8002d24:	bf04      	itt	eq
 8002d26:	1852      	addeq	r2, r2, r1
 8002d28:	6022      	streq	r2, [r4, #0]
 8002d2a:	602c      	str	r4, [r5, #0]
 8002d2c:	e7ec      	b.n	8002d08 <_free_r+0x28>
 8002d2e:	461a      	mov	r2, r3
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	b10b      	cbz	r3, 8002d38 <_free_r+0x58>
 8002d34:	42a3      	cmp	r3, r4
 8002d36:	d9fa      	bls.n	8002d2e <_free_r+0x4e>
 8002d38:	6811      	ldr	r1, [r2, #0]
 8002d3a:	1855      	adds	r5, r2, r1
 8002d3c:	42a5      	cmp	r5, r4
 8002d3e:	d10b      	bne.n	8002d58 <_free_r+0x78>
 8002d40:	6824      	ldr	r4, [r4, #0]
 8002d42:	4421      	add	r1, r4
 8002d44:	1854      	adds	r4, r2, r1
 8002d46:	42a3      	cmp	r3, r4
 8002d48:	6011      	str	r1, [r2, #0]
 8002d4a:	d1dd      	bne.n	8002d08 <_free_r+0x28>
 8002d4c:	681c      	ldr	r4, [r3, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	6053      	str	r3, [r2, #4]
 8002d52:	4421      	add	r1, r4
 8002d54:	6011      	str	r1, [r2, #0]
 8002d56:	e7d7      	b.n	8002d08 <_free_r+0x28>
 8002d58:	d902      	bls.n	8002d60 <_free_r+0x80>
 8002d5a:	230c      	movs	r3, #12
 8002d5c:	6003      	str	r3, [r0, #0]
 8002d5e:	e7d3      	b.n	8002d08 <_free_r+0x28>
 8002d60:	6825      	ldr	r5, [r4, #0]
 8002d62:	1961      	adds	r1, r4, r5
 8002d64:	428b      	cmp	r3, r1
 8002d66:	bf04      	itt	eq
 8002d68:	6819      	ldreq	r1, [r3, #0]
 8002d6a:	685b      	ldreq	r3, [r3, #4]
 8002d6c:	6063      	str	r3, [r4, #4]
 8002d6e:	bf04      	itt	eq
 8002d70:	1949      	addeq	r1, r1, r5
 8002d72:	6021      	streq	r1, [r4, #0]
 8002d74:	6054      	str	r4, [r2, #4]
 8002d76:	e7c7      	b.n	8002d08 <_free_r+0x28>
 8002d78:	b003      	add	sp, #12
 8002d7a:	bd30      	pop	{r4, r5, pc}
 8002d7c:	20000090 	.word	0x20000090

08002d80 <_read_r>:
 8002d80:	b538      	push	{r3, r4, r5, lr}
 8002d82:	4d07      	ldr	r5, [pc, #28]	; (8002da0 <_read_r+0x20>)
 8002d84:	4604      	mov	r4, r0
 8002d86:	4608      	mov	r0, r1
 8002d88:	4611      	mov	r1, r2
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	602a      	str	r2, [r5, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f7fd fdc0 	bl	8000914 <_read>
 8002d94:	1c43      	adds	r3, r0, #1
 8002d96:	d102      	bne.n	8002d9e <_read_r+0x1e>
 8002d98:	682b      	ldr	r3, [r5, #0]
 8002d9a:	b103      	cbz	r3, 8002d9e <_read_r+0x1e>
 8002d9c:	6023      	str	r3, [r4, #0]
 8002d9e:	bd38      	pop	{r3, r4, r5, pc}
 8002da0:	200000f0 	.word	0x200000f0

08002da4 <_fstat_r>:
 8002da4:	b538      	push	{r3, r4, r5, lr}
 8002da6:	4d07      	ldr	r5, [pc, #28]	; (8002dc4 <_fstat_r+0x20>)
 8002da8:	2300      	movs	r3, #0
 8002daa:	4604      	mov	r4, r0
 8002dac:	4608      	mov	r0, r1
 8002dae:	4611      	mov	r1, r2
 8002db0:	602b      	str	r3, [r5, #0]
 8002db2:	f7fd fdd8 	bl	8000966 <_fstat>
 8002db6:	1c43      	adds	r3, r0, #1
 8002db8:	d102      	bne.n	8002dc0 <_fstat_r+0x1c>
 8002dba:	682b      	ldr	r3, [r5, #0]
 8002dbc:	b103      	cbz	r3, 8002dc0 <_fstat_r+0x1c>
 8002dbe:	6023      	str	r3, [r4, #0]
 8002dc0:	bd38      	pop	{r3, r4, r5, pc}
 8002dc2:	bf00      	nop
 8002dc4:	200000f0 	.word	0x200000f0

08002dc8 <_isatty_r>:
 8002dc8:	b538      	push	{r3, r4, r5, lr}
 8002dca:	4d06      	ldr	r5, [pc, #24]	; (8002de4 <_isatty_r+0x1c>)
 8002dcc:	2300      	movs	r3, #0
 8002dce:	4604      	mov	r4, r0
 8002dd0:	4608      	mov	r0, r1
 8002dd2:	602b      	str	r3, [r5, #0]
 8002dd4:	f7fd fdd7 	bl	8000986 <_isatty>
 8002dd8:	1c43      	adds	r3, r0, #1
 8002dda:	d102      	bne.n	8002de2 <_isatty_r+0x1a>
 8002ddc:	682b      	ldr	r3, [r5, #0]
 8002dde:	b103      	cbz	r3, 8002de2 <_isatty_r+0x1a>
 8002de0:	6023      	str	r3, [r4, #0]
 8002de2:	bd38      	pop	{r3, r4, r5, pc}
 8002de4:	200000f0 	.word	0x200000f0

08002de8 <_init>:
 8002de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dea:	bf00      	nop
 8002dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dee:	bc08      	pop	{r3}
 8002df0:	469e      	mov	lr, r3
 8002df2:	4770      	bx	lr

08002df4 <_fini>:
 8002df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002df6:	bf00      	nop
 8002df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dfa:	bc08      	pop	{r3}
 8002dfc:	469e      	mov	lr, r3
 8002dfe:	4770      	bx	lr
