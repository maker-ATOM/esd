
adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bc0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002d50  08002d50  00012d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d98  08002d98  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002d98  08002d98  00012d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002da0  08002da0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002da0  08002da0  00012da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002da4  08002da4  00012da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000070  08002e18  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08002e18  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000064fd  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014ee  00000000  00000000  0002659d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000560  00000000  00000000  00027a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004a8  00000000  00000000  00027ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000206bf  00000000  00000000  00028498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006c08  00000000  00000000  00048b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cab03  00000000  00000000  0004f75f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011a262  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000179c  00000000  00000000  0011a2b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002d38 	.word	0x08002d38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08002d38 	.word	0x08002d38

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <lcd_enable>:
 *      Author: MicroEmbedded
 */
#include "main.h"

void lcd_enable(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, 1);
 800056c:	2201      	movs	r2, #1
 800056e:	2102      	movs	r1, #2
 8000570:	4807      	ldr	r0, [pc, #28]	; (8000590 <lcd_enable+0x28>)
 8000572:	f001 fb53 	bl	8001c1c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000576:	2001      	movs	r0, #1
 8000578:	f000 fcaa 	bl	8000ed0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, 0);
 800057c:	2200      	movs	r2, #0
 800057e:	2102      	movs	r1, #2
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <lcd_enable+0x28>)
 8000582:	f001 fb4b 	bl	8001c1c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000586:	2001      	movs	r0, #1
 8000588:	f000 fca2 	bl	8000ed0 <HAL_Delay>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40021c00 	.word	0x40021c00

08000594 <lcd_data>:


 void lcd_data(unsigned char dat)
 {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 1);		//RS=1 for LCD Data
 800059e:	2201      	movs	r2, #1
 80005a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a4:	484a      	ldr	r0, [pc, #296]	; (80006d0 <lcd_data+0x13c>)
 80005a6:	f001 fb39 	bl	8001c1c <HAL_GPIO_WritePin>

	 //D0
	 if(dat & 0x01)
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	f003 0301 	and.w	r3, r3, #1
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d006      	beq.n	80005c2 <lcd_data+0x2e>
		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ba:	4846      	ldr	r0, [pc, #280]	; (80006d4 <lcd_data+0x140>)
 80005bc:	f001 fb2e 	bl	8001c1c <HAL_GPIO_WritePin>
 80005c0:	e005      	b.n	80005ce <lcd_data+0x3a>
	 else
		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005c8:	4842      	ldr	r0, [pc, #264]	; (80006d4 <lcd_data+0x140>)
 80005ca:	f001 fb27 	bl	8001c1c <HAL_GPIO_WritePin>
	 //D1
 	 if(dat & 0x02)
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	f003 0302 	and.w	r3, r3, #2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d006      	beq.n	80005e6 <lcd_data+0x52>
 		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005de:	483d      	ldr	r0, [pc, #244]	; (80006d4 <lcd_data+0x140>)
 80005e0:	f001 fb1c 	bl	8001c1c <HAL_GPIO_WritePin>
 80005e4:	e005      	b.n	80005f2 <lcd_data+0x5e>
 	 else
 		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ec:	4839      	ldr	r0, [pc, #228]	; (80006d4 <lcd_data+0x140>)
 80005ee:	f001 fb15 	bl	8001c1c <HAL_GPIO_WritePin>
 	//D2
	 if(dat & 0x04)
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	f003 0304 	and.w	r3, r3, #4
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d006      	beq.n	800060a <lcd_data+0x76>
		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 80005fc:	2201      	movs	r2, #1
 80005fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000602:	4834      	ldr	r0, [pc, #208]	; (80006d4 <lcd_data+0x140>)
 8000604:	f001 fb0a 	bl	8001c1c <HAL_GPIO_WritePin>
 8000608:	e005      	b.n	8000616 <lcd_data+0x82>
	 else
		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000610:	4830      	ldr	r0, [pc, #192]	; (80006d4 <lcd_data+0x140>)
 8000612:	f001 fb03 	bl	8001c1c <HAL_GPIO_WritePin>
	 //D3
 	 if(dat & 0x08)
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	f003 0308 	and.w	r3, r3, #8
 800061c:	2b00      	cmp	r3, #0
 800061e:	d006      	beq.n	800062e <lcd_data+0x9a>
 		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8000620:	2201      	movs	r2, #1
 8000622:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000626:	482b      	ldr	r0, [pc, #172]	; (80006d4 <lcd_data+0x140>)
 8000628:	f001 faf8 	bl	8001c1c <HAL_GPIO_WritePin>
 800062c:	e005      	b.n	800063a <lcd_data+0xa6>
 	 else
 		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000634:	4827      	ldr	r0, [pc, #156]	; (80006d4 <lcd_data+0x140>)
 8000636:	f001 faf1 	bl	8001c1c <HAL_GPIO_WritePin>
 	 //D4
  	 if(dat & 0x10)
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	f003 0310 	and.w	r3, r3, #16
 8000640:	2b00      	cmp	r3, #0
 8000642:	d006      	beq.n	8000652 <lcd_data+0xbe>
  		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8000644:	2201      	movs	r2, #1
 8000646:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800064a:	4822      	ldr	r0, [pc, #136]	; (80006d4 <lcd_data+0x140>)
 800064c:	f001 fae6 	bl	8001c1c <HAL_GPIO_WritePin>
 8000650:	e005      	b.n	800065e <lcd_data+0xca>
  	 else
  		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000658:	481e      	ldr	r0, [pc, #120]	; (80006d4 <lcd_data+0x140>)
 800065a:	f001 fadf 	bl	8001c1c <HAL_GPIO_WritePin>
  	//D5
 	 if(dat & 0x20)
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	f003 0320 	and.w	r3, r3, #32
 8000664:	2b00      	cmp	r3, #0
 8000666:	d005      	beq.n	8000674 <lcd_data+0xe0>
 		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 8000668:	2201      	movs	r2, #1
 800066a:	2180      	movs	r1, #128	; 0x80
 800066c:	4818      	ldr	r0, [pc, #96]	; (80006d0 <lcd_data+0x13c>)
 800066e:	f001 fad5 	bl	8001c1c <HAL_GPIO_WritePin>
 8000672:	e004      	b.n	800067e <lcd_data+0xea>
 	 else
 		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2180      	movs	r1, #128	; 0x80
 8000678:	4815      	ldr	r0, [pc, #84]	; (80006d0 <lcd_data+0x13c>)
 800067a:	f001 facf 	bl	8001c1c <HAL_GPIO_WritePin>
 	//D6
  	 if(dat & 0x40)
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000684:	2b00      	cmp	r3, #0
 8000686:	d006      	beq.n	8000696 <lcd_data+0x102>
  		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000688:	2201      	movs	r2, #1
 800068a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068e:	4810      	ldr	r0, [pc, #64]	; (80006d0 <lcd_data+0x13c>)
 8000690:	f001 fac4 	bl	8001c1c <HAL_GPIO_WritePin>
 8000694:	e005      	b.n	80006a2 <lcd_data+0x10e>
  	 else
  		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <lcd_data+0x13c>)
 800069e:	f001 fabd 	bl	8001c1c <HAL_GPIO_WritePin>
  	//D7
 	 if(dat & 0x80)
 80006a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	da06      	bge.n	80006b8 <lcd_data+0x124>
 		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 80006aa:	2201      	movs	r2, #1
 80006ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b0:	4807      	ldr	r0, [pc, #28]	; (80006d0 <lcd_data+0x13c>)
 80006b2:	f001 fab3 	bl	8001c1c <HAL_GPIO_WritePin>
 80006b6:	e005      	b.n	80006c4 <lcd_data+0x130>
 	 else
 		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006be:	4804      	ldr	r0, [pc, #16]	; (80006d0 <lcd_data+0x13c>)
 80006c0:	f001 faac 	bl	8001c1c <HAL_GPIO_WritePin>

lcd_enable();
 80006c4:	f7ff ff50 	bl	8000568 <lcd_enable>

 }
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40020c00 	.word	0x40020c00
 80006d4:	40021000 	.word	0x40021000

080006d8 <lcd_cmd>:

 void lcd_cmd(unsigned char dat)
 {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 0);		//RS=0 for LCD command
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e8:	484a      	ldr	r0, [pc, #296]	; (8000814 <lcd_cmd+0x13c>)
 80006ea:	f001 fa97 	bl	8001c1c <HAL_GPIO_WritePin>

	 //D0
	 if(dat & 0x01)
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f003 0301 	and.w	r3, r3, #1
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d006      	beq.n	8000706 <lcd_cmd+0x2e>
		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006fe:	4846      	ldr	r0, [pc, #280]	; (8000818 <lcd_cmd+0x140>)
 8000700:	f001 fa8c 	bl	8001c1c <HAL_GPIO_WritePin>
 8000704:	e005      	b.n	8000712 <lcd_cmd+0x3a>
	 else
		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800070c:	4842      	ldr	r0, [pc, #264]	; (8000818 <lcd_cmd+0x140>)
 800070e:	f001 fa85 	bl	8001c1c <HAL_GPIO_WritePin>
	 //D1
 	 if(dat & 0x02)
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	f003 0302 	and.w	r3, r3, #2
 8000718:	2b00      	cmp	r3, #0
 800071a:	d006      	beq.n	800072a <lcd_cmd+0x52>
 		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 800071c:	2201      	movs	r2, #1
 800071e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000722:	483d      	ldr	r0, [pc, #244]	; (8000818 <lcd_cmd+0x140>)
 8000724:	f001 fa7a 	bl	8001c1c <HAL_GPIO_WritePin>
 8000728:	e005      	b.n	8000736 <lcd_cmd+0x5e>
 	 else
 		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000730:	4839      	ldr	r0, [pc, #228]	; (8000818 <lcd_cmd+0x140>)
 8000732:	f001 fa73 	bl	8001c1c <HAL_GPIO_WritePin>
 	//D2
	 if(dat & 0x04)
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f003 0304 	and.w	r3, r3, #4
 800073c:	2b00      	cmp	r3, #0
 800073e:	d006      	beq.n	800074e <lcd_cmd+0x76>
		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000746:	4834      	ldr	r0, [pc, #208]	; (8000818 <lcd_cmd+0x140>)
 8000748:	f001 fa68 	bl	8001c1c <HAL_GPIO_WritePin>
 800074c:	e005      	b.n	800075a <lcd_cmd+0x82>
	 else
		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000754:	4830      	ldr	r0, [pc, #192]	; (8000818 <lcd_cmd+0x140>)
 8000756:	f001 fa61 	bl	8001c1c <HAL_GPIO_WritePin>
	 //D3
 	 if(dat & 0x08)
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	f003 0308 	and.w	r3, r3, #8
 8000760:	2b00      	cmp	r3, #0
 8000762:	d006      	beq.n	8000772 <lcd_cmd+0x9a>
 		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8000764:	2201      	movs	r2, #1
 8000766:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800076a:	482b      	ldr	r0, [pc, #172]	; (8000818 <lcd_cmd+0x140>)
 800076c:	f001 fa56 	bl	8001c1c <HAL_GPIO_WritePin>
 8000770:	e005      	b.n	800077e <lcd_cmd+0xa6>
 	 else
 		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000778:	4827      	ldr	r0, [pc, #156]	; (8000818 <lcd_cmd+0x140>)
 800077a:	f001 fa4f 	bl	8001c1c <HAL_GPIO_WritePin>
 	 //D4
  	 if(dat & 0x10)
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	f003 0310 	and.w	r3, r3, #16
 8000784:	2b00      	cmp	r3, #0
 8000786:	d006      	beq.n	8000796 <lcd_cmd+0xbe>
  		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8000788:	2201      	movs	r2, #1
 800078a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800078e:	4822      	ldr	r0, [pc, #136]	; (8000818 <lcd_cmd+0x140>)
 8000790:	f001 fa44 	bl	8001c1c <HAL_GPIO_WritePin>
 8000794:	e005      	b.n	80007a2 <lcd_cmd+0xca>
  	 else
  		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800079c:	481e      	ldr	r0, [pc, #120]	; (8000818 <lcd_cmd+0x140>)
 800079e:	f001 fa3d 	bl	8001c1c <HAL_GPIO_WritePin>
  	//D5
 	 if(dat & 0x20)
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	f003 0320 	and.w	r3, r3, #32
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d005      	beq.n	80007b8 <lcd_cmd+0xe0>
 		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2180      	movs	r1, #128	; 0x80
 80007b0:	4818      	ldr	r0, [pc, #96]	; (8000814 <lcd_cmd+0x13c>)
 80007b2:	f001 fa33 	bl	8001c1c <HAL_GPIO_WritePin>
 80007b6:	e004      	b.n	80007c2 <lcd_cmd+0xea>
 	 else
 		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2180      	movs	r1, #128	; 0x80
 80007bc:	4815      	ldr	r0, [pc, #84]	; (8000814 <lcd_cmd+0x13c>)
 80007be:	f001 fa2d 	bl	8001c1c <HAL_GPIO_WritePin>
 	//D6
  	 if(dat & 0x40)
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d006      	beq.n	80007da <lcd_cmd+0x102>
  		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80007cc:	2201      	movs	r2, #1
 80007ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d2:	4810      	ldr	r0, [pc, #64]	; (8000814 <lcd_cmd+0x13c>)
 80007d4:	f001 fa22 	bl	8001c1c <HAL_GPIO_WritePin>
 80007d8:	e005      	b.n	80007e6 <lcd_cmd+0x10e>
  	 else
  		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e0:	480c      	ldr	r0, [pc, #48]	; (8000814 <lcd_cmd+0x13c>)
 80007e2:	f001 fa1b 	bl	8001c1c <HAL_GPIO_WritePin>
  	//D7
 	 if(dat & 0x80)
 80007e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	da06      	bge.n	80007fc <lcd_cmd+0x124>
 		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 80007ee:	2201      	movs	r2, #1
 80007f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f4:	4807      	ldr	r0, [pc, #28]	; (8000814 <lcd_cmd+0x13c>)
 80007f6:	f001 fa11 	bl	8001c1c <HAL_GPIO_WritePin>
 80007fa:	e005      	b.n	8000808 <lcd_cmd+0x130>
 	 else
 		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000802:	4804      	ldr	r0, [pc, #16]	; (8000814 <lcd_cmd+0x13c>)
 8000804:	f001 fa0a 	bl	8001c1c <HAL_GPIO_WritePin>

lcd_enable();
 8000808:	f7ff feae 	bl	8000568 <lcd_enable>
 }
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40020c00 	.word	0x40020c00
 8000818:	40021000 	.word	0x40021000

0800081c <lcd_init>:

 void lcd_init(void)
  {
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2102      	movs	r1, #2
 8000824:	480f      	ldr	r0, [pc, #60]	; (8000864 <lcd_init+0x48>)
 8000826:	f001 f9f9 	bl	8001c1c <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8000830:	480d      	ldr	r0, [pc, #52]	; (8000868 <lcd_init+0x4c>)
 8000832:	f001 f9f3 	bl	8001c1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 800083c:	480b      	ldr	r0, [pc, #44]	; (800086c <lcd_init+0x50>)
 800083e:	f001 f9ed 	bl	8001c1c <HAL_GPIO_WritePin>

	lcd_cmd(0x38);						 //8bit use both lines
 8000842:	2038      	movs	r0, #56	; 0x38
 8000844:	f7ff ff48 	bl	80006d8 <lcd_cmd>
	lcd_cmd(0x06);						 //Entry mode
 8000848:	2006      	movs	r0, #6
 800084a:	f7ff ff45 	bl	80006d8 <lcd_cmd>
	lcd_cmd(0x0C);						 //display ON cursor OFF
 800084e:	200c      	movs	r0, #12
 8000850:	f7ff ff42 	bl	80006d8 <lcd_cmd>
	lcd_cmd(0x01);						 //Clear display
 8000854:	2001      	movs	r0, #1
 8000856:	f7ff ff3f 	bl	80006d8 <lcd_cmd>
	lcd_cmd(0x80);						 //cursor at 1st line 1st position
 800085a:	2080      	movs	r0, #128	; 0x80
 800085c:	f7ff ff3c 	bl	80006d8 <lcd_cmd>
  }
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40021c00 	.word	0x40021c00
 8000868:	40021000 	.word	0x40021000
 800086c:	40020c00 	.word	0x40020c00

08000870 <lcd_clear>:
 else if (row == 2)
	lcd_cmd((pos & 0x0F)|0xC0);
 }

 void lcd_clear(void)
 {
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	 HAL_Delay(1);
 8000874:	2001      	movs	r0, #1
 8000876:	f000 fb2b 	bl	8000ed0 <HAL_Delay>
	 lcd_cmd(0x01);
 800087a:	2001      	movs	r0, #1
 800087c:	f7ff ff2c 	bl	80006d8 <lcd_cmd>
	 HAL_Delay(1);
 8000880:	2001      	movs	r0, #1
 8000882:	f000 fb25 	bl	8000ed0 <HAL_Delay>
 }
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}

0800088a <lcd_displayString>:

 void lcd_displayString(int row, int pos, unsigned char* ch)
 {
 800088a:	b580      	push	{r7, lr}
 800088c:	b086      	sub	sp, #24
 800088e:	af00      	add	r7, sp, #0
 8000890:	60f8      	str	r0, [r7, #12]
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
	 unsigned char temp;

 	if(row==1)
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d106      	bne.n	80008aa <lcd_displayString+0x20>
 	{
 		temp = 0x80 | (pos);			 //set cursor at 1st line pos position
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	b25b      	sxtb	r3, r3
 80008a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008a4:	b25b      	sxtb	r3, r3
 80008a6:	75fb      	strb	r3, [r7, #23]
 80008a8:	e008      	b.n	80008bc <lcd_displayString+0x32>
 	}
 	else if(row ==2)
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d105      	bne.n	80008bc <lcd_displayString+0x32>
 	{
 		temp = 0xC0 | (pos);			//set cursor at 2nd line pos position
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	b25b      	sxtb	r3, r3
 80008b4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80008b8:	b25b      	sxtb	r3, r3
 80008ba:	75fb      	strb	r3, [r7, #23]
 	}

 	lcd_cmd(temp);
 80008bc:	7dfb      	ldrb	r3, [r7, #23]
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ff0a 	bl	80006d8 <lcd_cmd>

 	while(*ch)							//while data is valid, display the string
 80008c4:	e006      	b.n	80008d4 <lcd_displayString+0x4a>
		lcd_data(*ch++);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	1c5a      	adds	r2, r3, #1
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fe60 	bl	8000594 <lcd_data>
 	while(*ch)							//while data is valid, display the string
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1f4      	bne.n	80008c6 <lcd_displayString+0x3c>
 }
 80008dc:	bf00      	nop
 80008de:	bf00      	nop
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	unsigned char buf[16];
	unsigned int val = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f2:	f000 fa7b 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f6:	f000 f82f 	bl	8000958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fa:	f000 f8dd 	bl	8000ab8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80008fe:	f000 f889 	bl	8000a14 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


	lcd_init();
 8000902:	f7ff ff8b 	bl	800081c <lcd_init>

	lcd_clear();
 8000906:	f7ff ffb3 	bl	8000870 <lcd_clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_ADC_Start(&hadc1);
 800090a:	4811      	ldr	r0, [pc, #68]	; (8000950 <main+0x68>)
 800090c:	f000 fb48 	bl	8000fa0 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1,10)==HAL_OK)
 8000910:	210a      	movs	r1, #10
 8000912:	480f      	ldr	r0, [pc, #60]	; (8000950 <main+0x68>)
 8000914:	f000 fc49 	bl	80011aa <HAL_ADC_PollForConversion>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d111      	bne.n	8000942 <main+0x5a>
	  {
		  val=(int)HAL_ADC_GetValue(&hadc1);
 800091e:	480c      	ldr	r0, [pc, #48]	; (8000950 <main+0x68>)
 8000920:	f000 fcce 	bl	80012c0 <HAL_ADC_GetValue>
 8000924:	6178      	str	r0, [r7, #20]
		  sprintf(buf, "%d",val);
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	697a      	ldr	r2, [r7, #20]
 800092a:	490a      	ldr	r1, [pc, #40]	; (8000954 <main+0x6c>)
 800092c:	4618      	mov	r0, r3
 800092e:	f001 fdd5 	bl	80024dc <siprintf>


			lcd_clear();
 8000932:	f7ff ff9d 	bl	8000870 <lcd_clear>
			lcd_displayString(1,1,buf);
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	461a      	mov	r2, r3
 800093a:	2101      	movs	r1, #1
 800093c:	2001      	movs	r0, #1
 800093e:	f7ff ffa4 	bl	800088a <lcd_displayString>
	  }
	  HAL_ADC_Stop(&hadc1);
 8000942:	4803      	ldr	r0, [pc, #12]	; (8000950 <main+0x68>)
 8000944:	f000 fbfe 	bl	8001144 <HAL_ADC_Stop>

		HAL_Delay(100);
 8000948:	2064      	movs	r0, #100	; 0x64
 800094a:	f000 fac1 	bl	8000ed0 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 800094e:	e7dc      	b.n	800090a <main+0x22>
 8000950:	20000098 	.word	0x20000098
 8000954:	08002d50 	.word	0x08002d50

08000958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b094      	sub	sp, #80	; 0x50
 800095c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095e:	f107 0320 	add.w	r3, r7, #32
 8000962:	2230      	movs	r2, #48	; 0x30
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f001 fdb0 	bl	80024cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <SystemClock_Config+0xb4>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000984:	4a21      	ldr	r2, [pc, #132]	; (8000a0c <SystemClock_Config+0xb4>)
 8000986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098a:	6413      	str	r3, [r2, #64]	; 0x40
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <SystemClock_Config+0xb4>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <SystemClock_Config+0xb8>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a1b      	ldr	r2, [pc, #108]	; (8000a10 <SystemClock_Config+0xb8>)
 80009a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <SystemClock_Config+0xb8>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b4:	2302      	movs	r3, #2
 80009b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b8:	2301      	movs	r3, #1
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009bc:	2310      	movs	r3, #16
 80009be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c4:	f107 0320 	add.w	r3, r7, #32
 80009c8:	4618      	mov	r0, r3
 80009ca:	f001 f941 	bl	8001c50 <HAL_RCC_OscConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80009d4:	f000 f8fc 	bl	8000bd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d8:	230f      	movs	r3, #15
 80009da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009dc:	2300      	movs	r3, #0
 80009de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 fba4 	bl	8002140 <HAL_RCC_ClockConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80009fe:	f000 f8e7 	bl	8000bd0 <Error_Handler>
  }
}
 8000a02:	bf00      	nop
 8000a04:	3750      	adds	r7, #80	; 0x50
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40007000 	.word	0x40007000

08000a14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <MX_ADC1_Init+0x98>)
 8000a28:	4a21      	ldr	r2, [pc, #132]	; (8000ab0 <MX_ADC1_Init+0x9c>)
 8000a2a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a2c:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <MX_ADC1_Init+0x98>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a32:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <MX_ADC1_Init+0x98>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a38:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <MX_ADC1_Init+0x98>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <MX_ADC1_Init+0x98>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <MX_ADC1_Init+0x98>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <MX_ADC1_Init+0x98>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_ADC1_Init+0x98>)
 8000a54:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <MX_ADC1_Init+0xa0>)
 8000a56:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_ADC1_Init+0x98>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_ADC1_Init+0x98>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_ADC1_Init+0x98>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_ADC1_Init+0x98>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a72:	480e      	ldr	r0, [pc, #56]	; (8000aac <MX_ADC1_Init+0x98>)
 8000a74:	f000 fa50 	bl	8000f18 <HAL_ADC_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a7e:	f000 f8a7 	bl	8000bd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a86:	2301      	movs	r3, #1
 8000a88:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a8e:	463b      	mov	r3, r7
 8000a90:	4619      	mov	r1, r3
 8000a92:	4806      	ldr	r0, [pc, #24]	; (8000aac <MX_ADC1_Init+0x98>)
 8000a94:	f000 fc22 	bl	80012dc <HAL_ADC_ConfigChannel>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a9e:	f000 f897 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000098 	.word	0x20000098
 8000ab0:	40012000 	.word	0x40012000
 8000ab4:	0f000001 	.word	0x0f000001

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	4b3b      	ldr	r3, [pc, #236]	; (8000bc0 <MX_GPIO_Init+0x108>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a3a      	ldr	r2, [pc, #232]	; (8000bc0 <MX_GPIO_Init+0x108>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b38      	ldr	r3, [pc, #224]	; (8000bc0 <MX_GPIO_Init+0x108>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b34      	ldr	r3, [pc, #208]	; (8000bc0 <MX_GPIO_Init+0x108>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a33      	ldr	r2, [pc, #204]	; (8000bc0 <MX_GPIO_Init+0x108>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b31      	ldr	r3, [pc, #196]	; (8000bc0 <MX_GPIO_Init+0x108>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	4b2d      	ldr	r3, [pc, #180]	; (8000bc0 <MX_GPIO_Init+0x108>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a2c      	ldr	r2, [pc, #176]	; (8000bc0 <MX_GPIO_Init+0x108>)
 8000b10:	f043 0310 	orr.w	r3, r3, #16
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b2a      	ldr	r3, [pc, #168]	; (8000bc0 <MX_GPIO_Init+0x108>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0310 	and.w	r3, r3, #16
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b26      	ldr	r3, [pc, #152]	; (8000bc0 <MX_GPIO_Init+0x108>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a25      	ldr	r2, [pc, #148]	; (8000bc0 <MX_GPIO_Init+0x108>)
 8000b2c:	f043 0308 	orr.w	r3, r3, #8
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b23      	ldr	r3, [pc, #140]	; (8000bc0 <MX_GPIO_Init+0x108>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0308 	and.w	r3, r3, #8
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2102      	movs	r1, #2
 8000b42:	4820      	ldr	r0, [pc, #128]	; (8000bc4 <MX_GPIO_Init+0x10c>)
 8000b44:	f001 f86a 	bl	8001c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8000b4e:	481e      	ldr	r0, [pc, #120]	; (8000bc8 <MX_GPIO_Init+0x110>)
 8000b50:	f001 f864 	bl	8001c1c <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_7, GPIO_PIN_RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8000b5a:	481c      	ldr	r0, [pc, #112]	; (8000bcc <MX_GPIO_Init+0x114>)
 8000b5c:	f001 f85e 	bl	8001c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b60:	2302      	movs	r3, #2
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	4813      	ldr	r0, [pc, #76]	; (8000bc4 <MX_GPIO_Init+0x10c>)
 8000b78:	f000 feb4 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8000b7c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000b80:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <MX_GPIO_Init+0x110>)
 8000b96:	f000 fea5 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_7;
 8000b9a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4806      	ldr	r0, [pc, #24]	; (8000bcc <MX_GPIO_Init+0x114>)
 8000bb4:	f000 fe96 	bl	80018e4 <HAL_GPIO_Init>

}
 8000bb8:	bf00      	nop
 8000bba:	3728      	adds	r7, #40	; 0x28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40021c00 	.word	0x40021c00
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40020c00 	.word	0x40020c00

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <Error_Handler+0x8>
	...

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <HAL_MspInit+0x4c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	4a0f      	ldr	r2, [pc, #60]	; (8000c28 <HAL_MspInit+0x4c>)
 8000bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <HAL_MspInit+0x4c>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	603b      	str	r3, [r7, #0]
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_MspInit+0x4c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <HAL_MspInit+0x4c>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_MspInit+0x4c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800

08000c2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a17      	ldr	r2, [pc, #92]	; (8000ca8 <HAL_ADC_MspInit+0x7c>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d127      	bne.n	8000c9e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	4b16      	ldr	r3, [pc, #88]	; (8000cac <HAL_ADC_MspInit+0x80>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	4a15      	ldr	r2, [pc, #84]	; (8000cac <HAL_ADC_MspInit+0x80>)
 8000c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <HAL_ADC_MspInit+0x80>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <HAL_ADC_MspInit+0x80>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <HAL_ADC_MspInit+0x80>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <HAL_ADC_MspInit+0x80>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c86:	2301      	movs	r3, #1
 8000c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <HAL_ADC_MspInit+0x84>)
 8000c9a:	f000 fe23 	bl	80018e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	; 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40012000 	.word	0x40012000
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020000 	.word	0x40020000

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <NMI_Handler+0x4>

08000cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d00:	f000 f8c6 	bl	8000e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d10:	4a14      	ldr	r2, [pc, #80]	; (8000d64 <_sbrk+0x5c>)
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <_sbrk+0x60>)
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d1c:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d102      	bne.n	8000d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <_sbrk+0x64>)
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <_sbrk+0x68>)
 8000d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <_sbrk+0x64>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d207      	bcs.n	8000d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d38:	f001 fb9e 	bl	8002478 <__errno>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	220c      	movs	r2, #12
 8000d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
 8000d46:	e009      	b.n	8000d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4e:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <_sbrk+0x64>)
 8000d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20020000 	.word	0x20020000
 8000d68:	00000400 	.word	0x00000400
 8000d6c:	2000008c 	.word	0x2000008c
 8000d70:	200000f8 	.word	0x200000f8

08000d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <SystemInit+0x20>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <SystemInit+0x20>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d9c:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d9e:	490e      	ldr	r1, [pc, #56]	; (8000dd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000da0:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000db4:	4c0b      	ldr	r4, [pc, #44]	; (8000de4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dc2:	f7ff ffd7 	bl	8000d74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc6:	f001 fb5d 	bl	8002484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dca:	f7ff fd8d 	bl	80008e8 <main>
  bx  lr    
 8000dce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ddc:	08002da8 	.word	0x08002da8
  ldr r2, =_sbss
 8000de0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000de4:	200000f4 	.word	0x200000f4

08000de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC_IRQHandler>
	...

08000dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <HAL_Init+0x40>)
 8000df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_Init+0x40>)
 8000e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <HAL_Init+0x40>)
 8000e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f000 fd31 	bl	800187c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f000 f808 	bl	8000e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e20:	f7ff fedc 	bl	8000bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023c00 	.word	0x40023c00

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x54>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_InitTick+0x58>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 fd3b 	bl	80018ca <HAL_SYSTICK_Config>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00e      	b.n	8000e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d80a      	bhi.n	8000e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e64:	2200      	movs	r2, #0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f000 fd11 	bl	8001892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e70:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <HAL_InitTick+0x5c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e000      	b.n	8000e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	20000004 	.word	0x20000004

08000e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x20>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_IncTick+0x24>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <HAL_IncTick+0x24>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	200000e0 	.word	0x200000e0

08000eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <HAL_GetTick+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200000e0 	.word	0x200000e0

08000ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed8:	f7ff ffee 	bl	8000eb8 <HAL_GetTick>
 8000edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee8:	d005      	beq.n	8000ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <HAL_Delay+0x44>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ef6:	bf00      	nop
 8000ef8:	f7ff ffde 	bl	8000eb8 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d8f7      	bhi.n	8000ef8 <HAL_Delay+0x28>
  {
  }
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000008 	.word	0x20000008

08000f18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f20:	2300      	movs	r3, #0
 8000f22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d101      	bne.n	8000f2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e033      	b.n	8000f96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d109      	bne.n	8000f4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff fe78 	bl	8000c2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	f003 0310 	and.w	r3, r3, #16
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d118      	bne.n	8000f88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f5e:	f023 0302 	bic.w	r3, r3, #2
 8000f62:	f043 0202 	orr.w	r2, r3, #2
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 fad8 	bl	8001520 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f023 0303 	bic.w	r3, r3, #3
 8000f7e:	f043 0201 	orr.w	r2, r3, #1
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	641a      	str	r2, [r3, #64]	; 0x40
 8000f86:	e001      	b.n	8000f8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d101      	bne.n	8000fba <HAL_ADC_Start+0x1a>
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	e0b2      	b.n	8001120 <HAL_ADC_Start+0x180>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d018      	beq.n	8001002 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f042 0201 	orr.w	r2, r2, #1
 8000fde:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fe0:	4b52      	ldr	r3, [pc, #328]	; (800112c <HAL_ADC_Start+0x18c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a52      	ldr	r2, [pc, #328]	; (8001130 <HAL_ADC_Start+0x190>)
 8000fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fea:	0c9a      	lsrs	r2, r3, #18
 8000fec:	4613      	mov	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	4413      	add	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000ff4:	e002      	b.n	8000ffc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1f9      	bne.n	8000ff6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	2b01      	cmp	r3, #1
 800100e:	d17a      	bne.n	8001106 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001018:	f023 0301 	bic.w	r3, r3, #1
 800101c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800102e:	2b00      	cmp	r3, #0
 8001030:	d007      	beq.n	8001042 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800103a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800104a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800104e:	d106      	bne.n	800105e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001054:	f023 0206 	bic.w	r2, r3, #6
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	645a      	str	r2, [r3, #68]	; 0x44
 800105c:	e002      	b.n	8001064 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800106c:	4b31      	ldr	r3, [pc, #196]	; (8001134 <HAL_ADC_Start+0x194>)
 800106e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001078:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 031f 	and.w	r3, r3, #31
 8001082:	2b00      	cmp	r3, #0
 8001084:	d12a      	bne.n	80010dc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a2b      	ldr	r2, [pc, #172]	; (8001138 <HAL_ADC_Start+0x198>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d015      	beq.n	80010bc <HAL_ADC_Start+0x11c>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a29      	ldr	r2, [pc, #164]	; (800113c <HAL_ADC_Start+0x19c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d105      	bne.n	80010a6 <HAL_ADC_Start+0x106>
 800109a:	4b26      	ldr	r3, [pc, #152]	; (8001134 <HAL_ADC_Start+0x194>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 031f 	and.w	r3, r3, #31
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d00a      	beq.n	80010bc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a25      	ldr	r2, [pc, #148]	; (8001140 <HAL_ADC_Start+0x1a0>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d136      	bne.n	800111e <HAL_ADC_Start+0x17e>
 80010b0:	4b20      	ldr	r3, [pc, #128]	; (8001134 <HAL_ADC_Start+0x194>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0310 	and.w	r3, r3, #16
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d130      	bne.n	800111e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d129      	bne.n	800111e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	e020      	b.n	800111e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a15      	ldr	r2, [pc, #84]	; (8001138 <HAL_ADC_Start+0x198>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d11b      	bne.n	800111e <HAL_ADC_Start+0x17e>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d114      	bne.n	800111e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	e00b      	b.n	800111e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	f043 0210 	orr.w	r2, r3, #16
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	f043 0201 	orr.w	r2, r3, #1
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	20000000 	.word	0x20000000
 8001130:	431bde83 	.word	0x431bde83
 8001134:	40012300 	.word	0x40012300
 8001138:	40012000 	.word	0x40012000
 800113c:	40012100 	.word	0x40012100
 8001140:	40012200 	.word	0x40012200

08001144 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001152:	2b01      	cmp	r3, #1
 8001154:	d101      	bne.n	800115a <HAL_ADC_Stop+0x16>
 8001156:	2302      	movs	r3, #2
 8001158:	e021      	b.n	800119e <HAL_ADC_Stop+0x5a>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2201      	movs	r2, #1
 800115e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0201 	bic.w	r2, r2, #1
 8001170:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	2b00      	cmp	r3, #0
 800117e:	d109      	bne.n	8001194 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001188:	f023 0301 	bic.w	r3, r3, #1
 800118c:	f043 0201 	orr.w	r2, r3, #1
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b084      	sub	sp, #16
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
 80011b2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011c6:	d113      	bne.n	80011f0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011d6:	d10b      	bne.n	80011f0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	f043 0220 	orr.w	r2, r3, #32
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e063      	b.n	80012b8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80011f0:	f7ff fe62 	bl	8000eb8 <HAL_GetTick>
 80011f4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011f6:	e021      	b.n	800123c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011fe:	d01d      	beq.n	800123c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d007      	beq.n	8001216 <HAL_ADC_PollForConversion+0x6c>
 8001206:	f7ff fe57 	bl	8000eb8 <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	429a      	cmp	r2, r3
 8001214:	d212      	bcs.n	800123c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b02      	cmp	r3, #2
 8001222:	d00b      	beq.n	800123c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	f043 0204 	orr.w	r2, r3, #4
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e03d      	b.n	80012b8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b02      	cmp	r3, #2
 8001248:	d1d6      	bne.n	80011f8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f06f 0212 	mvn.w	r2, #18
 8001252:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d123      	bne.n	80012b6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001272:	2b00      	cmp	r3, #0
 8001274:	d11f      	bne.n	80012b6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001280:	2b00      	cmp	r3, #0
 8001282:	d006      	beq.n	8001292 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800128e:	2b00      	cmp	r3, #0
 8001290:	d111      	bne.n	80012b6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d105      	bne.n	80012b6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f043 0201 	orr.w	r2, r3, #1
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d101      	bne.n	80012f8 <HAL_ADC_ConfigChannel+0x1c>
 80012f4:	2302      	movs	r3, #2
 80012f6:	e105      	b.n	8001504 <HAL_ADC_ConfigChannel+0x228>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b09      	cmp	r3, #9
 8001306:	d925      	bls.n	8001354 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68d9      	ldr	r1, [r3, #12]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	b29b      	uxth	r3, r3
 8001314:	461a      	mov	r2, r3
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	3b1e      	subs	r3, #30
 800131e:	2207      	movs	r2, #7
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43da      	mvns	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	400a      	ands	r2, r1
 800132c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68d9      	ldr	r1, [r3, #12]
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	b29b      	uxth	r3, r3
 800133e:	4618      	mov	r0, r3
 8001340:	4603      	mov	r3, r0
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4403      	add	r3, r0
 8001346:	3b1e      	subs	r3, #30
 8001348:	409a      	lsls	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	e022      	b.n	800139a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6919      	ldr	r1, [r3, #16]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	b29b      	uxth	r3, r3
 8001360:	461a      	mov	r2, r3
 8001362:	4613      	mov	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	2207      	movs	r2, #7
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	400a      	ands	r2, r1
 8001376:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6919      	ldr	r1, [r3, #16]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	689a      	ldr	r2, [r3, #8]
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	b29b      	uxth	r3, r3
 8001388:	4618      	mov	r0, r3
 800138a:	4603      	mov	r3, r0
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4403      	add	r3, r0
 8001390:	409a      	lsls	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	430a      	orrs	r2, r1
 8001398:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d824      	bhi.n	80013ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	3b05      	subs	r3, #5
 80013b4:	221f      	movs	r2, #31
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	400a      	ands	r2, r1
 80013c2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	4618      	mov	r0, r3
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	3b05      	subs	r3, #5
 80013de:	fa00 f203 	lsl.w	r2, r0, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	635a      	str	r2, [r3, #52]	; 0x34
 80013ea:	e04c      	b.n	8001486 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b0c      	cmp	r3, #12
 80013f2:	d824      	bhi.n	800143e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	3b23      	subs	r3, #35	; 0x23
 8001406:	221f      	movs	r2, #31
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43da      	mvns	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	400a      	ands	r2, r1
 8001414:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	b29b      	uxth	r3, r3
 8001422:	4618      	mov	r0, r3
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	3b23      	subs	r3, #35	; 0x23
 8001430:	fa00 f203 	lsl.w	r2, r0, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	430a      	orrs	r2, r1
 800143a:	631a      	str	r2, [r3, #48]	; 0x30
 800143c:	e023      	b.n	8001486 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	3b41      	subs	r3, #65	; 0x41
 8001450:	221f      	movs	r2, #31
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43da      	mvns	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	400a      	ands	r2, r1
 800145e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	b29b      	uxth	r3, r3
 800146c:	4618      	mov	r0, r3
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	3b41      	subs	r3, #65	; 0x41
 800147a:	fa00 f203 	lsl.w	r2, r0, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	430a      	orrs	r2, r1
 8001484:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001486:	4b22      	ldr	r3, [pc, #136]	; (8001510 <HAL_ADC_ConfigChannel+0x234>)
 8001488:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a21      	ldr	r2, [pc, #132]	; (8001514 <HAL_ADC_ConfigChannel+0x238>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d109      	bne.n	80014a8 <HAL_ADC_ConfigChannel+0x1cc>
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b12      	cmp	r3, #18
 800149a:	d105      	bne.n	80014a8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a19      	ldr	r2, [pc, #100]	; (8001514 <HAL_ADC_ConfigChannel+0x238>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d123      	bne.n	80014fa <HAL_ADC_ConfigChannel+0x21e>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b10      	cmp	r3, #16
 80014b8:	d003      	beq.n	80014c2 <HAL_ADC_ConfigChannel+0x1e6>
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b11      	cmp	r3, #17
 80014c0:	d11b      	bne.n	80014fa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b10      	cmp	r3, #16
 80014d4:	d111      	bne.n	80014fa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <HAL_ADC_ConfigChannel+0x23c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a10      	ldr	r2, [pc, #64]	; (800151c <HAL_ADC_ConfigChannel+0x240>)
 80014dc:	fba2 2303 	umull	r2, r3, r2, r3
 80014e0:	0c9a      	lsrs	r2, r3, #18
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014ec:	e002      	b.n	80014f4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f9      	bne.n	80014ee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	40012300 	.word	0x40012300
 8001514:	40012000 	.word	0x40012000
 8001518:	20000000 	.word	0x20000000
 800151c:	431bde83 	.word	0x431bde83

08001520 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001528:	4b79      	ldr	r3, [pc, #484]	; (8001710 <ADC_Init+0x1f0>)
 800152a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	431a      	orrs	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001554:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6859      	ldr	r1, [r3, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	021a      	lsls	r2, r3, #8
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001578:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6859      	ldr	r1, [r3, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800159a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6899      	ldr	r1, [r3, #8]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b2:	4a58      	ldr	r2, [pc, #352]	; (8001714 <ADC_Init+0x1f4>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d022      	beq.n	80015fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6899      	ldr	r1, [r3, #8]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6899      	ldr	r1, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	e00f      	b.n	800161e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800160c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800161c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0202 	bic.w	r2, r2, #2
 800162c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6899      	ldr	r1, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	7e1b      	ldrb	r3, [r3, #24]
 8001638:	005a      	lsls	r2, r3, #1
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d01b      	beq.n	8001684 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800165a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800166a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6859      	ldr	r1, [r3, #4]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	3b01      	subs	r3, #1
 8001678:	035a      	lsls	r2, r3, #13
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	e007      	b.n	8001694 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001692:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	051a      	lsls	r2, r3, #20
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6899      	ldr	r1, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016d6:	025a      	lsls	r2, r3, #9
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	430a      	orrs	r2, r1
 80016de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6899      	ldr	r1, [r3, #8]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	029a      	lsls	r2, r3, #10
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	609a      	str	r2, [r3, #8]
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	40012300 	.word	0x40012300
 8001714:	0f000001 	.word	0x0f000001

08001718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <__NVIC_SetPriorityGrouping+0x44>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001734:	4013      	ands	r3, r2
 8001736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800174a:	4a04      	ldr	r2, [pc, #16]	; (800175c <__NVIC_SetPriorityGrouping+0x44>)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	60d3      	str	r3, [r2, #12]
}
 8001750:	bf00      	nop
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <__NVIC_GetPriorityGrouping+0x18>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	0a1b      	lsrs	r3, r3, #8
 800176a:	f003 0307 	and.w	r3, r3, #7
}
 800176e:	4618      	mov	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db0a      	blt.n	80017a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	490c      	ldr	r1, [pc, #48]	; (80017c8 <__NVIC_SetPriority+0x4c>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	440b      	add	r3, r1
 80017a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a4:	e00a      	b.n	80017bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4908      	ldr	r1, [pc, #32]	; (80017cc <__NVIC_SetPriority+0x50>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	3b04      	subs	r3, #4
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	440b      	add	r3, r1
 80017ba:	761a      	strb	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000e100 	.word	0xe000e100
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	; 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f1c3 0307 	rsb	r3, r3, #7
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	bf28      	it	cs
 80017ee:	2304      	movcs	r3, #4
 80017f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3304      	adds	r3, #4
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d902      	bls.n	8001800 <NVIC_EncodePriority+0x30>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3b03      	subs	r3, #3
 80017fe:	e000      	b.n	8001802 <NVIC_EncodePriority+0x32>
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	f04f 32ff 	mov.w	r2, #4294967295
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43da      	mvns	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	401a      	ands	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	43d9      	mvns	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	4313      	orrs	r3, r2
         );
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	; 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001848:	d301      	bcc.n	800184e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184a:	2301      	movs	r3, #1
 800184c:	e00f      	b.n	800186e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <SysTick_Config+0x40>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001856:	210f      	movs	r1, #15
 8001858:	f04f 30ff 	mov.w	r0, #4294967295
 800185c:	f7ff ff8e 	bl	800177c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <SysTick_Config+0x40>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001866:	4b04      	ldr	r3, [pc, #16]	; (8001878 <SysTick_Config+0x40>)
 8001868:	2207      	movs	r2, #7
 800186a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	e000e010 	.word	0xe000e010

0800187c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ff47 	bl	8001718 <__NVIC_SetPriorityGrouping>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a4:	f7ff ff5c 	bl	8001760 <__NVIC_GetPriorityGrouping>
 80018a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	6978      	ldr	r0, [r7, #20]
 80018b0:	f7ff ff8e 	bl	80017d0 <NVIC_EncodePriority>
 80018b4:	4602      	mov	r2, r0
 80018b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff5d 	bl	800177c <__NVIC_SetPriority>
}
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff ffb0 	bl	8001838 <SysTick_Config>
 80018d8:	4603      	mov	r3, r0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b089      	sub	sp, #36	; 0x24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
 80018fe:	e16b      	b.n	8001bd8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001900:	2201      	movs	r2, #1
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	429a      	cmp	r2, r3
 800191a:	f040 815a 	bne.w	8001bd2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	2b01      	cmp	r3, #1
 8001928:	d005      	beq.n	8001936 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001932:	2b02      	cmp	r3, #2
 8001934:	d130      	bne.n	8001998 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	2203      	movs	r2, #3
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4013      	ands	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800196c:	2201      	movs	r2, #1
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	091b      	lsrs	r3, r3, #4
 8001982:	f003 0201 	and.w	r2, r3, #1
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d017      	beq.n	80019d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	2203      	movs	r2, #3
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 0303 	and.w	r3, r3, #3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d123      	bne.n	8001a28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	08da      	lsrs	r2, r3, #3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3208      	adds	r2, #8
 80019e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	220f      	movs	r2, #15
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	691a      	ldr	r2, [r3, #16]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	08da      	lsrs	r2, r3, #3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3208      	adds	r2, #8
 8001a22:	69b9      	ldr	r1, [r7, #24]
 8001a24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	2203      	movs	r2, #3
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0203 	and.w	r2, r3, #3
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 80b4 	beq.w	8001bd2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b60      	ldr	r3, [pc, #384]	; (8001bf0 <HAL_GPIO_Init+0x30c>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	4a5f      	ldr	r2, [pc, #380]	; (8001bf0 <HAL_GPIO_Init+0x30c>)
 8001a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a78:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7a:	4b5d      	ldr	r3, [pc, #372]	; (8001bf0 <HAL_GPIO_Init+0x30c>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a86:	4a5b      	ldr	r2, [pc, #364]	; (8001bf4 <HAL_GPIO_Init+0x310>)
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	089b      	lsrs	r3, r3, #2
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	220f      	movs	r2, #15
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a52      	ldr	r2, [pc, #328]	; (8001bf8 <HAL_GPIO_Init+0x314>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d02b      	beq.n	8001b0a <HAL_GPIO_Init+0x226>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a51      	ldr	r2, [pc, #324]	; (8001bfc <HAL_GPIO_Init+0x318>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d025      	beq.n	8001b06 <HAL_GPIO_Init+0x222>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a50      	ldr	r2, [pc, #320]	; (8001c00 <HAL_GPIO_Init+0x31c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d01f      	beq.n	8001b02 <HAL_GPIO_Init+0x21e>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4f      	ldr	r2, [pc, #316]	; (8001c04 <HAL_GPIO_Init+0x320>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d019      	beq.n	8001afe <HAL_GPIO_Init+0x21a>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4e      	ldr	r2, [pc, #312]	; (8001c08 <HAL_GPIO_Init+0x324>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d013      	beq.n	8001afa <HAL_GPIO_Init+0x216>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4d      	ldr	r2, [pc, #308]	; (8001c0c <HAL_GPIO_Init+0x328>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d00d      	beq.n	8001af6 <HAL_GPIO_Init+0x212>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a4c      	ldr	r2, [pc, #304]	; (8001c10 <HAL_GPIO_Init+0x32c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d007      	beq.n	8001af2 <HAL_GPIO_Init+0x20e>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a4b      	ldr	r2, [pc, #300]	; (8001c14 <HAL_GPIO_Init+0x330>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d101      	bne.n	8001aee <HAL_GPIO_Init+0x20a>
 8001aea:	2307      	movs	r3, #7
 8001aec:	e00e      	b.n	8001b0c <HAL_GPIO_Init+0x228>
 8001aee:	2308      	movs	r3, #8
 8001af0:	e00c      	b.n	8001b0c <HAL_GPIO_Init+0x228>
 8001af2:	2306      	movs	r3, #6
 8001af4:	e00a      	b.n	8001b0c <HAL_GPIO_Init+0x228>
 8001af6:	2305      	movs	r3, #5
 8001af8:	e008      	b.n	8001b0c <HAL_GPIO_Init+0x228>
 8001afa:	2304      	movs	r3, #4
 8001afc:	e006      	b.n	8001b0c <HAL_GPIO_Init+0x228>
 8001afe:	2303      	movs	r3, #3
 8001b00:	e004      	b.n	8001b0c <HAL_GPIO_Init+0x228>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e002      	b.n	8001b0c <HAL_GPIO_Init+0x228>
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <HAL_GPIO_Init+0x228>
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	f002 0203 	and.w	r2, r2, #3
 8001b12:	0092      	lsls	r2, r2, #2
 8001b14:	4093      	lsls	r3, r2
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b1c:	4935      	ldr	r1, [pc, #212]	; (8001bf4 <HAL_GPIO_Init+0x310>)
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	089b      	lsrs	r3, r3, #2
 8001b22:	3302      	adds	r3, #2
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b2a:	4b3b      	ldr	r3, [pc, #236]	; (8001c18 <HAL_GPIO_Init+0x334>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4013      	ands	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b4e:	4a32      	ldr	r2, [pc, #200]	; (8001c18 <HAL_GPIO_Init+0x334>)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b54:	4b30      	ldr	r3, [pc, #192]	; (8001c18 <HAL_GPIO_Init+0x334>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b78:	4a27      	ldr	r2, [pc, #156]	; (8001c18 <HAL_GPIO_Init+0x334>)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b7e:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <HAL_GPIO_Init+0x334>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ba2:	4a1d      	ldr	r2, [pc, #116]	; (8001c18 <HAL_GPIO_Init+0x334>)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <HAL_GPIO_Init+0x334>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bcc:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <HAL_GPIO_Init+0x334>)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	61fb      	str	r3, [r7, #28]
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	2b0f      	cmp	r3, #15
 8001bdc:	f67f ae90 	bls.w	8001900 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3724      	adds	r7, #36	; 0x24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40013800 	.word	0x40013800
 8001bf8:	40020000 	.word	0x40020000
 8001bfc:	40020400 	.word	0x40020400
 8001c00:	40020800 	.word	0x40020800
 8001c04:	40020c00 	.word	0x40020c00
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40021400 	.word	0x40021400
 8001c10:	40021800 	.word	0x40021800
 8001c14:	40021c00 	.word	0x40021c00
 8001c18:	40013c00 	.word	0x40013c00

08001c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	807b      	strh	r3, [r7, #2]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c2c:	787b      	ldrb	r3, [r7, #1]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c32:	887a      	ldrh	r2, [r7, #2]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c38:	e003      	b.n	8001c42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c3a:	887b      	ldrh	r3, [r7, #2]
 8001c3c:	041a      	lsls	r2, r3, #16
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	619a      	str	r2, [r3, #24]
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e264      	b.n	800212c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d075      	beq.n	8001d5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c6e:	4ba3      	ldr	r3, [pc, #652]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 030c 	and.w	r3, r3, #12
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	d00c      	beq.n	8001c94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c7a:	4ba0      	ldr	r3, [pc, #640]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d112      	bne.n	8001cac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c86:	4b9d      	ldr	r3, [pc, #628]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c92:	d10b      	bne.n	8001cac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c94:	4b99      	ldr	r3, [pc, #612]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d05b      	beq.n	8001d58 <HAL_RCC_OscConfig+0x108>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d157      	bne.n	8001d58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e23f      	b.n	800212c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb4:	d106      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x74>
 8001cb6:	4b91      	ldr	r3, [pc, #580]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a90      	ldr	r2, [pc, #576]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	e01d      	b.n	8001d00 <HAL_RCC_OscConfig+0xb0>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x98>
 8001cce:	4b8b      	ldr	r3, [pc, #556]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a8a      	ldr	r2, [pc, #552]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	4b88      	ldr	r3, [pc, #544]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a87      	ldr	r2, [pc, #540]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	e00b      	b.n	8001d00 <HAL_RCC_OscConfig+0xb0>
 8001ce8:	4b84      	ldr	r3, [pc, #528]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a83      	ldr	r2, [pc, #524]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	4b81      	ldr	r3, [pc, #516]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a80      	ldr	r2, [pc, #512]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d013      	beq.n	8001d30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7ff f8d6 	bl	8000eb8 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d10:	f7ff f8d2 	bl	8000eb8 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	; 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e204      	b.n	800212c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d22:	4b76      	ldr	r3, [pc, #472]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0xc0>
 8001d2e:	e014      	b.n	8001d5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d30:	f7ff f8c2 	bl	8000eb8 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d38:	f7ff f8be 	bl	8000eb8 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b64      	cmp	r3, #100	; 0x64
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e1f0      	b.n	800212c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4a:	4b6c      	ldr	r3, [pc, #432]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0xe8>
 8001d56:	e000      	b.n	8001d5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d063      	beq.n	8001e2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d66:	4b65      	ldr	r3, [pc, #404]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00b      	beq.n	8001d8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d72:	4b62      	ldr	r3, [pc, #392]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d11c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d7e:	4b5f      	ldr	r3, [pc, #380]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d116      	bne.n	8001db8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8a:	4b5c      	ldr	r3, [pc, #368]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d005      	beq.n	8001da2 <HAL_RCC_OscConfig+0x152>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d001      	beq.n	8001da2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e1c4      	b.n	800212c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da2:	4b56      	ldr	r3, [pc, #344]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4952      	ldr	r1, [pc, #328]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db6:	e03a      	b.n	8001e2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d020      	beq.n	8001e02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc0:	4b4f      	ldr	r3, [pc, #316]	; (8001f00 <HAL_RCC_OscConfig+0x2b0>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc6:	f7ff f877 	bl	8000eb8 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dce:	f7ff f873 	bl	8000eb8 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e1a5      	b.n	800212c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de0:	4b46      	ldr	r3, [pc, #280]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dec:	4b43      	ldr	r3, [pc, #268]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	4940      	ldr	r1, [pc, #256]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	600b      	str	r3, [r1, #0]
 8001e00:	e015      	b.n	8001e2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e02:	4b3f      	ldr	r3, [pc, #252]	; (8001f00 <HAL_RCC_OscConfig+0x2b0>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7ff f856 	bl	8000eb8 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e10:	f7ff f852 	bl	8000eb8 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e184      	b.n	800212c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e22:	4b36      	ldr	r3, [pc, #216]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d030      	beq.n	8001e9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d016      	beq.n	8001e70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e42:	4b30      	ldr	r3, [pc, #192]	; (8001f04 <HAL_RCC_OscConfig+0x2b4>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e48:	f7ff f836 	bl	8000eb8 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e50:	f7ff f832 	bl	8000eb8 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e164      	b.n	800212c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e62:	4b26      	ldr	r3, [pc, #152]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x200>
 8001e6e:	e015      	b.n	8001e9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e70:	4b24      	ldr	r3, [pc, #144]	; (8001f04 <HAL_RCC_OscConfig+0x2b4>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e76:	f7ff f81f 	bl	8000eb8 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e7e:	f7ff f81b 	bl	8000eb8 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e14d      	b.n	800212c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e90:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1f0      	bne.n	8001e7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 80a0 	beq.w	8001fea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eae:	4b13      	ldr	r3, [pc, #76]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10f      	bne.n	8001eda <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	4a0e      	ldr	r2, [pc, #56]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eca:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <HAL_RCC_OscConfig+0x2ac>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <HAL_RCC_OscConfig+0x2b8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d121      	bne.n	8001f2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <HAL_RCC_OscConfig+0x2b8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a07      	ldr	r2, [pc, #28]	; (8001f08 <HAL_RCC_OscConfig+0x2b8>)
 8001eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef2:	f7fe ffe1 	bl	8000eb8 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef8:	e011      	b.n	8001f1e <HAL_RCC_OscConfig+0x2ce>
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800
 8001f00:	42470000 	.word	0x42470000
 8001f04:	42470e80 	.word	0x42470e80
 8001f08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0c:	f7fe ffd4 	bl	8000eb8 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e106      	b.n	800212c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1e:	4b85      	ldr	r3, [pc, #532]	; (8002134 <HAL_RCC_OscConfig+0x4e4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d106      	bne.n	8001f40 <HAL_RCC_OscConfig+0x2f0>
 8001f32:	4b81      	ldr	r3, [pc, #516]	; (8002138 <HAL_RCC_OscConfig+0x4e8>)
 8001f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f36:	4a80      	ldr	r2, [pc, #512]	; (8002138 <HAL_RCC_OscConfig+0x4e8>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f3e:	e01c      	b.n	8001f7a <HAL_RCC_OscConfig+0x32a>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b05      	cmp	r3, #5
 8001f46:	d10c      	bne.n	8001f62 <HAL_RCC_OscConfig+0x312>
 8001f48:	4b7b      	ldr	r3, [pc, #492]	; (8002138 <HAL_RCC_OscConfig+0x4e8>)
 8001f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4c:	4a7a      	ldr	r2, [pc, #488]	; (8002138 <HAL_RCC_OscConfig+0x4e8>)
 8001f4e:	f043 0304 	orr.w	r3, r3, #4
 8001f52:	6713      	str	r3, [r2, #112]	; 0x70
 8001f54:	4b78      	ldr	r3, [pc, #480]	; (8002138 <HAL_RCC_OscConfig+0x4e8>)
 8001f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f58:	4a77      	ldr	r2, [pc, #476]	; (8002138 <HAL_RCC_OscConfig+0x4e8>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f60:	e00b      	b.n	8001f7a <HAL_RCC_OscConfig+0x32a>
 8001f62:	4b75      	ldr	r3, [pc, #468]	; (8002138 <HAL_RCC_OscConfig+0x4e8>)
 8001f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f66:	4a74      	ldr	r2, [pc, #464]	; (8002138 <HAL_RCC_OscConfig+0x4e8>)
 8001f68:	f023 0301 	bic.w	r3, r3, #1
 8001f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6e:	4b72      	ldr	r3, [pc, #456]	; (8002138 <HAL_RCC_OscConfig+0x4e8>)
 8001f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f72:	4a71      	ldr	r2, [pc, #452]	; (8002138 <HAL_RCC_OscConfig+0x4e8>)
 8001f74:	f023 0304 	bic.w	r3, r3, #4
 8001f78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d015      	beq.n	8001fae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f82:	f7fe ff99 	bl	8000eb8 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f8a:	f7fe ff95 	bl	8000eb8 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e0c5      	b.n	800212c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa0:	4b65      	ldr	r3, [pc, #404]	; (8002138 <HAL_RCC_OscConfig+0x4e8>)
 8001fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0ee      	beq.n	8001f8a <HAL_RCC_OscConfig+0x33a>
 8001fac:	e014      	b.n	8001fd8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fae:	f7fe ff83 	bl	8000eb8 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb4:	e00a      	b.n	8001fcc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb6:	f7fe ff7f 	bl	8000eb8 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e0af      	b.n	800212c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fcc:	4b5a      	ldr	r3, [pc, #360]	; (8002138 <HAL_RCC_OscConfig+0x4e8>)
 8001fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1ee      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fd8:	7dfb      	ldrb	r3, [r7, #23]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d105      	bne.n	8001fea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fde:	4b56      	ldr	r3, [pc, #344]	; (8002138 <HAL_RCC_OscConfig+0x4e8>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	4a55      	ldr	r2, [pc, #340]	; (8002138 <HAL_RCC_OscConfig+0x4e8>)
 8001fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 809b 	beq.w	800212a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ff4:	4b50      	ldr	r3, [pc, #320]	; (8002138 <HAL_RCC_OscConfig+0x4e8>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 030c 	and.w	r3, r3, #12
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d05c      	beq.n	80020ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	2b02      	cmp	r3, #2
 8002006:	d141      	bne.n	800208c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002008:	4b4c      	ldr	r3, [pc, #304]	; (800213c <HAL_RCC_OscConfig+0x4ec>)
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200e:	f7fe ff53 	bl	8000eb8 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002016:	f7fe ff4f 	bl	8000eb8 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e081      	b.n	800212c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002028:	4b43      	ldr	r3, [pc, #268]	; (8002138 <HAL_RCC_OscConfig+0x4e8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1f0      	bne.n	8002016 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69da      	ldr	r2, [r3, #28]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	019b      	lsls	r3, r3, #6
 8002044:	431a      	orrs	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204a:	085b      	lsrs	r3, r3, #1
 800204c:	3b01      	subs	r3, #1
 800204e:	041b      	lsls	r3, r3, #16
 8002050:	431a      	orrs	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002056:	061b      	lsls	r3, r3, #24
 8002058:	4937      	ldr	r1, [pc, #220]	; (8002138 <HAL_RCC_OscConfig+0x4e8>)
 800205a:	4313      	orrs	r3, r2
 800205c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800205e:	4b37      	ldr	r3, [pc, #220]	; (800213c <HAL_RCC_OscConfig+0x4ec>)
 8002060:	2201      	movs	r2, #1
 8002062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002064:	f7fe ff28 	bl	8000eb8 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800206c:	f7fe ff24 	bl	8000eb8 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e056      	b.n	800212c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207e:	4b2e      	ldr	r3, [pc, #184]	; (8002138 <HAL_RCC_OscConfig+0x4e8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0x41c>
 800208a:	e04e      	b.n	800212a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208c:	4b2b      	ldr	r3, [pc, #172]	; (800213c <HAL_RCC_OscConfig+0x4ec>)
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002092:	f7fe ff11 	bl	8000eb8 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800209a:	f7fe ff0d 	bl	8000eb8 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e03f      	b.n	800212c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ac:	4b22      	ldr	r3, [pc, #136]	; (8002138 <HAL_RCC_OscConfig+0x4e8>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f0      	bne.n	800209a <HAL_RCC_OscConfig+0x44a>
 80020b8:	e037      	b.n	800212a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d101      	bne.n	80020c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e032      	b.n	800212c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020c6:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <HAL_RCC_OscConfig+0x4e8>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d028      	beq.n	8002126 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d121      	bne.n	8002126 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d11a      	bne.n	8002126 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020f6:	4013      	ands	r3, r2
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020fe:	4293      	cmp	r3, r2
 8002100:	d111      	bne.n	8002126 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210c:	085b      	lsrs	r3, r3, #1
 800210e:	3b01      	subs	r3, #1
 8002110:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002112:	429a      	cmp	r2, r3
 8002114:	d107      	bne.n	8002126 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002122:	429a      	cmp	r2, r3
 8002124:	d001      	beq.n	800212a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40007000 	.word	0x40007000
 8002138:	40023800 	.word	0x40023800
 800213c:	42470060 	.word	0x42470060

08002140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0cc      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002154:	4b68      	ldr	r3, [pc, #416]	; (80022f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d90c      	bls.n	800217c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4b65      	ldr	r3, [pc, #404]	; (80022f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216a:	4b63      	ldr	r3, [pc, #396]	; (80022f8 <HAL_RCC_ClockConfig+0x1b8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0b8      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d020      	beq.n	80021ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002194:	4b59      	ldr	r3, [pc, #356]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	4a58      	ldr	r2, [pc, #352]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800219e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021ac:	4b53      	ldr	r3, [pc, #332]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	4a52      	ldr	r2, [pc, #328]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b8:	4b50      	ldr	r3, [pc, #320]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	494d      	ldr	r1, [pc, #308]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d044      	beq.n	8002260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d107      	bne.n	80021ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021de:	4b47      	ldr	r3, [pc, #284]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d119      	bne.n	800221e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e07f      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d003      	beq.n	80021fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d107      	bne.n	800220e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fe:	4b3f      	ldr	r3, [pc, #252]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d109      	bne.n	800221e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e06f      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220e:	4b3b      	ldr	r3, [pc, #236]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e067      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800221e:	4b37      	ldr	r3, [pc, #220]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f023 0203 	bic.w	r2, r3, #3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4934      	ldr	r1, [pc, #208]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 800222c:	4313      	orrs	r3, r2
 800222e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002230:	f7fe fe42 	bl	8000eb8 <HAL_GetTick>
 8002234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002236:	e00a      	b.n	800224e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002238:	f7fe fe3e 	bl	8000eb8 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	f241 3288 	movw	r2, #5000	; 0x1388
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e04f      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224e:	4b2b      	ldr	r3, [pc, #172]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 020c 	and.w	r2, r3, #12
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	429a      	cmp	r2, r3
 800225e:	d1eb      	bne.n	8002238 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002260:	4b25      	ldr	r3, [pc, #148]	; (80022f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d20c      	bcs.n	8002288 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b22      	ldr	r3, [pc, #136]	; (80022f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002276:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d001      	beq.n	8002288 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e032      	b.n	80022ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	d008      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002294:	4b19      	ldr	r3, [pc, #100]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4916      	ldr	r1, [pc, #88]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d009      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022b2:	4b12      	ldr	r3, [pc, #72]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	490e      	ldr	r1, [pc, #56]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022c6:	f000 f821 	bl	800230c <HAL_RCC_GetSysClockFreq>
 80022ca:	4602      	mov	r2, r0
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	490a      	ldr	r1, [pc, #40]	; (8002300 <HAL_RCC_ClockConfig+0x1c0>)
 80022d8:	5ccb      	ldrb	r3, [r1, r3]
 80022da:	fa22 f303 	lsr.w	r3, r2, r3
 80022de:	4a09      	ldr	r2, [pc, #36]	; (8002304 <HAL_RCC_ClockConfig+0x1c4>)
 80022e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_RCC_ClockConfig+0x1c8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fda2 	bl	8000e30 <HAL_InitTick>

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40023c00 	.word	0x40023c00
 80022fc:	40023800 	.word	0x40023800
 8002300:	08002d54 	.word	0x08002d54
 8002304:	20000000 	.word	0x20000000
 8002308:	20000004 	.word	0x20000004

0800230c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800230c:	b5b0      	push	{r4, r5, r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002312:	2100      	movs	r1, #0
 8002314:	6079      	str	r1, [r7, #4]
 8002316:	2100      	movs	r1, #0
 8002318:	60f9      	str	r1, [r7, #12]
 800231a:	2100      	movs	r1, #0
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800231e:	2100      	movs	r1, #0
 8002320:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002322:	4952      	ldr	r1, [pc, #328]	; (800246c <HAL_RCC_GetSysClockFreq+0x160>)
 8002324:	6889      	ldr	r1, [r1, #8]
 8002326:	f001 010c 	and.w	r1, r1, #12
 800232a:	2908      	cmp	r1, #8
 800232c:	d00d      	beq.n	800234a <HAL_RCC_GetSysClockFreq+0x3e>
 800232e:	2908      	cmp	r1, #8
 8002330:	f200 8094 	bhi.w	800245c <HAL_RCC_GetSysClockFreq+0x150>
 8002334:	2900      	cmp	r1, #0
 8002336:	d002      	beq.n	800233e <HAL_RCC_GetSysClockFreq+0x32>
 8002338:	2904      	cmp	r1, #4
 800233a:	d003      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0x38>
 800233c:	e08e      	b.n	800245c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800233e:	4b4c      	ldr	r3, [pc, #304]	; (8002470 <HAL_RCC_GetSysClockFreq+0x164>)
 8002340:	60bb      	str	r3, [r7, #8]
       break;
 8002342:	e08e      	b.n	8002462 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002344:	4b4b      	ldr	r3, [pc, #300]	; (8002474 <HAL_RCC_GetSysClockFreq+0x168>)
 8002346:	60bb      	str	r3, [r7, #8]
      break;
 8002348:	e08b      	b.n	8002462 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800234a:	4948      	ldr	r1, [pc, #288]	; (800246c <HAL_RCC_GetSysClockFreq+0x160>)
 800234c:	6849      	ldr	r1, [r1, #4]
 800234e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002352:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002354:	4945      	ldr	r1, [pc, #276]	; (800246c <HAL_RCC_GetSysClockFreq+0x160>)
 8002356:	6849      	ldr	r1, [r1, #4]
 8002358:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800235c:	2900      	cmp	r1, #0
 800235e:	d024      	beq.n	80023aa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002360:	4942      	ldr	r1, [pc, #264]	; (800246c <HAL_RCC_GetSysClockFreq+0x160>)
 8002362:	6849      	ldr	r1, [r1, #4]
 8002364:	0989      	lsrs	r1, r1, #6
 8002366:	4608      	mov	r0, r1
 8002368:	f04f 0100 	mov.w	r1, #0
 800236c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002370:	f04f 0500 	mov.w	r5, #0
 8002374:	ea00 0204 	and.w	r2, r0, r4
 8002378:	ea01 0305 	and.w	r3, r1, r5
 800237c:	493d      	ldr	r1, [pc, #244]	; (8002474 <HAL_RCC_GetSysClockFreq+0x168>)
 800237e:	fb01 f003 	mul.w	r0, r1, r3
 8002382:	2100      	movs	r1, #0
 8002384:	fb01 f102 	mul.w	r1, r1, r2
 8002388:	1844      	adds	r4, r0, r1
 800238a:	493a      	ldr	r1, [pc, #232]	; (8002474 <HAL_RCC_GetSysClockFreq+0x168>)
 800238c:	fba2 0101 	umull	r0, r1, r2, r1
 8002390:	1863      	adds	r3, r4, r1
 8002392:	4619      	mov	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	461a      	mov	r2, r3
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	f7fd ff68 	bl	8000270 <__aeabi_uldivmod>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4613      	mov	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	e04a      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023aa:	4b30      	ldr	r3, [pc, #192]	; (800246c <HAL_RCC_GetSysClockFreq+0x160>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	099b      	lsrs	r3, r3, #6
 80023b0:	461a      	mov	r2, r3
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80023ba:	f04f 0100 	mov.w	r1, #0
 80023be:	ea02 0400 	and.w	r4, r2, r0
 80023c2:	ea03 0501 	and.w	r5, r3, r1
 80023c6:	4620      	mov	r0, r4
 80023c8:	4629      	mov	r1, r5
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	014b      	lsls	r3, r1, #5
 80023d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023d8:	0142      	lsls	r2, r0, #5
 80023da:	4610      	mov	r0, r2
 80023dc:	4619      	mov	r1, r3
 80023de:	1b00      	subs	r0, r0, r4
 80023e0:	eb61 0105 	sbc.w	r1, r1, r5
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	018b      	lsls	r3, r1, #6
 80023ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023f2:	0182      	lsls	r2, r0, #6
 80023f4:	1a12      	subs	r2, r2, r0
 80023f6:	eb63 0301 	sbc.w	r3, r3, r1
 80023fa:	f04f 0000 	mov.w	r0, #0
 80023fe:	f04f 0100 	mov.w	r1, #0
 8002402:	00d9      	lsls	r1, r3, #3
 8002404:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002408:	00d0      	lsls	r0, r2, #3
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	1912      	adds	r2, r2, r4
 8002410:	eb45 0303 	adc.w	r3, r5, r3
 8002414:	f04f 0000 	mov.w	r0, #0
 8002418:	f04f 0100 	mov.w	r1, #0
 800241c:	0299      	lsls	r1, r3, #10
 800241e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002422:	0290      	lsls	r0, r2, #10
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4610      	mov	r0, r2
 800242a:	4619      	mov	r1, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	461a      	mov	r2, r3
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	f7fd ff1c 	bl	8000270 <__aeabi_uldivmod>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4613      	mov	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <HAL_RCC_GetSysClockFreq+0x160>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	0c1b      	lsrs	r3, r3, #16
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	3301      	adds	r3, #1
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	fbb2 f3f3 	udiv	r3, r2, r3
 8002458:	60bb      	str	r3, [r7, #8]
      break;
 800245a:	e002      	b.n	8002462 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800245c:	4b04      	ldr	r3, [pc, #16]	; (8002470 <HAL_RCC_GetSysClockFreq+0x164>)
 800245e:	60bb      	str	r3, [r7, #8]
      break;
 8002460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002462:	68bb      	ldr	r3, [r7, #8]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bdb0      	pop	{r4, r5, r7, pc}
 800246c:	40023800 	.word	0x40023800
 8002470:	00f42400 	.word	0x00f42400
 8002474:	017d7840 	.word	0x017d7840

08002478 <__errno>:
 8002478:	4b01      	ldr	r3, [pc, #4]	; (8002480 <__errno+0x8>)
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	2000000c 	.word	0x2000000c

08002484 <__libc_init_array>:
 8002484:	b570      	push	{r4, r5, r6, lr}
 8002486:	4d0d      	ldr	r5, [pc, #52]	; (80024bc <__libc_init_array+0x38>)
 8002488:	4c0d      	ldr	r4, [pc, #52]	; (80024c0 <__libc_init_array+0x3c>)
 800248a:	1b64      	subs	r4, r4, r5
 800248c:	10a4      	asrs	r4, r4, #2
 800248e:	2600      	movs	r6, #0
 8002490:	42a6      	cmp	r6, r4
 8002492:	d109      	bne.n	80024a8 <__libc_init_array+0x24>
 8002494:	4d0b      	ldr	r5, [pc, #44]	; (80024c4 <__libc_init_array+0x40>)
 8002496:	4c0c      	ldr	r4, [pc, #48]	; (80024c8 <__libc_init_array+0x44>)
 8002498:	f000 fc4e 	bl	8002d38 <_init>
 800249c:	1b64      	subs	r4, r4, r5
 800249e:	10a4      	asrs	r4, r4, #2
 80024a0:	2600      	movs	r6, #0
 80024a2:	42a6      	cmp	r6, r4
 80024a4:	d105      	bne.n	80024b2 <__libc_init_array+0x2e>
 80024a6:	bd70      	pop	{r4, r5, r6, pc}
 80024a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80024ac:	4798      	blx	r3
 80024ae:	3601      	adds	r6, #1
 80024b0:	e7ee      	b.n	8002490 <__libc_init_array+0xc>
 80024b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80024b6:	4798      	blx	r3
 80024b8:	3601      	adds	r6, #1
 80024ba:	e7f2      	b.n	80024a2 <__libc_init_array+0x1e>
 80024bc:	08002da0 	.word	0x08002da0
 80024c0:	08002da0 	.word	0x08002da0
 80024c4:	08002da0 	.word	0x08002da0
 80024c8:	08002da4 	.word	0x08002da4

080024cc <memset>:
 80024cc:	4402      	add	r2, r0
 80024ce:	4603      	mov	r3, r0
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d100      	bne.n	80024d6 <memset+0xa>
 80024d4:	4770      	bx	lr
 80024d6:	f803 1b01 	strb.w	r1, [r3], #1
 80024da:	e7f9      	b.n	80024d0 <memset+0x4>

080024dc <siprintf>:
 80024dc:	b40e      	push	{r1, r2, r3}
 80024de:	b500      	push	{lr}
 80024e0:	b09c      	sub	sp, #112	; 0x70
 80024e2:	ab1d      	add	r3, sp, #116	; 0x74
 80024e4:	9002      	str	r0, [sp, #8]
 80024e6:	9006      	str	r0, [sp, #24]
 80024e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80024ec:	4809      	ldr	r0, [pc, #36]	; (8002514 <siprintf+0x38>)
 80024ee:	9107      	str	r1, [sp, #28]
 80024f0:	9104      	str	r1, [sp, #16]
 80024f2:	4909      	ldr	r1, [pc, #36]	; (8002518 <siprintf+0x3c>)
 80024f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80024f8:	9105      	str	r1, [sp, #20]
 80024fa:	6800      	ldr	r0, [r0, #0]
 80024fc:	9301      	str	r3, [sp, #4]
 80024fe:	a902      	add	r1, sp, #8
 8002500:	f000 f868 	bl	80025d4 <_svfiprintf_r>
 8002504:	9b02      	ldr	r3, [sp, #8]
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
 800250a:	b01c      	add	sp, #112	; 0x70
 800250c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002510:	b003      	add	sp, #12
 8002512:	4770      	bx	lr
 8002514:	2000000c 	.word	0x2000000c
 8002518:	ffff0208 	.word	0xffff0208

0800251c <__ssputs_r>:
 800251c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002520:	688e      	ldr	r6, [r1, #8]
 8002522:	429e      	cmp	r6, r3
 8002524:	4682      	mov	sl, r0
 8002526:	460c      	mov	r4, r1
 8002528:	4690      	mov	r8, r2
 800252a:	461f      	mov	r7, r3
 800252c:	d838      	bhi.n	80025a0 <__ssputs_r+0x84>
 800252e:	898a      	ldrh	r2, [r1, #12]
 8002530:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002534:	d032      	beq.n	800259c <__ssputs_r+0x80>
 8002536:	6825      	ldr	r5, [r4, #0]
 8002538:	6909      	ldr	r1, [r1, #16]
 800253a:	eba5 0901 	sub.w	r9, r5, r1
 800253e:	6965      	ldr	r5, [r4, #20]
 8002540:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002544:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002548:	3301      	adds	r3, #1
 800254a:	444b      	add	r3, r9
 800254c:	106d      	asrs	r5, r5, #1
 800254e:	429d      	cmp	r5, r3
 8002550:	bf38      	it	cc
 8002552:	461d      	movcc	r5, r3
 8002554:	0553      	lsls	r3, r2, #21
 8002556:	d531      	bpl.n	80025bc <__ssputs_r+0xa0>
 8002558:	4629      	mov	r1, r5
 800255a:	f000 fb47 	bl	8002bec <_malloc_r>
 800255e:	4606      	mov	r6, r0
 8002560:	b950      	cbnz	r0, 8002578 <__ssputs_r+0x5c>
 8002562:	230c      	movs	r3, #12
 8002564:	f8ca 3000 	str.w	r3, [sl]
 8002568:	89a3      	ldrh	r3, [r4, #12]
 800256a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800256e:	81a3      	strh	r3, [r4, #12]
 8002570:	f04f 30ff 	mov.w	r0, #4294967295
 8002574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002578:	6921      	ldr	r1, [r4, #16]
 800257a:	464a      	mov	r2, r9
 800257c:	f000 fabe 	bl	8002afc <memcpy>
 8002580:	89a3      	ldrh	r3, [r4, #12]
 8002582:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800258a:	81a3      	strh	r3, [r4, #12]
 800258c:	6126      	str	r6, [r4, #16]
 800258e:	6165      	str	r5, [r4, #20]
 8002590:	444e      	add	r6, r9
 8002592:	eba5 0509 	sub.w	r5, r5, r9
 8002596:	6026      	str	r6, [r4, #0]
 8002598:	60a5      	str	r5, [r4, #8]
 800259a:	463e      	mov	r6, r7
 800259c:	42be      	cmp	r6, r7
 800259e:	d900      	bls.n	80025a2 <__ssputs_r+0x86>
 80025a0:	463e      	mov	r6, r7
 80025a2:	4632      	mov	r2, r6
 80025a4:	6820      	ldr	r0, [r4, #0]
 80025a6:	4641      	mov	r1, r8
 80025a8:	f000 fab6 	bl	8002b18 <memmove>
 80025ac:	68a3      	ldr	r3, [r4, #8]
 80025ae:	6822      	ldr	r2, [r4, #0]
 80025b0:	1b9b      	subs	r3, r3, r6
 80025b2:	4432      	add	r2, r6
 80025b4:	60a3      	str	r3, [r4, #8]
 80025b6:	6022      	str	r2, [r4, #0]
 80025b8:	2000      	movs	r0, #0
 80025ba:	e7db      	b.n	8002574 <__ssputs_r+0x58>
 80025bc:	462a      	mov	r2, r5
 80025be:	f000 fb6f 	bl	8002ca0 <_realloc_r>
 80025c2:	4606      	mov	r6, r0
 80025c4:	2800      	cmp	r0, #0
 80025c6:	d1e1      	bne.n	800258c <__ssputs_r+0x70>
 80025c8:	6921      	ldr	r1, [r4, #16]
 80025ca:	4650      	mov	r0, sl
 80025cc:	f000 fabe 	bl	8002b4c <_free_r>
 80025d0:	e7c7      	b.n	8002562 <__ssputs_r+0x46>
	...

080025d4 <_svfiprintf_r>:
 80025d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025d8:	4698      	mov	r8, r3
 80025da:	898b      	ldrh	r3, [r1, #12]
 80025dc:	061b      	lsls	r3, r3, #24
 80025de:	b09d      	sub	sp, #116	; 0x74
 80025e0:	4607      	mov	r7, r0
 80025e2:	460d      	mov	r5, r1
 80025e4:	4614      	mov	r4, r2
 80025e6:	d50e      	bpl.n	8002606 <_svfiprintf_r+0x32>
 80025e8:	690b      	ldr	r3, [r1, #16]
 80025ea:	b963      	cbnz	r3, 8002606 <_svfiprintf_r+0x32>
 80025ec:	2140      	movs	r1, #64	; 0x40
 80025ee:	f000 fafd 	bl	8002bec <_malloc_r>
 80025f2:	6028      	str	r0, [r5, #0]
 80025f4:	6128      	str	r0, [r5, #16]
 80025f6:	b920      	cbnz	r0, 8002602 <_svfiprintf_r+0x2e>
 80025f8:	230c      	movs	r3, #12
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002600:	e0d1      	b.n	80027a6 <_svfiprintf_r+0x1d2>
 8002602:	2340      	movs	r3, #64	; 0x40
 8002604:	616b      	str	r3, [r5, #20]
 8002606:	2300      	movs	r3, #0
 8002608:	9309      	str	r3, [sp, #36]	; 0x24
 800260a:	2320      	movs	r3, #32
 800260c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002610:	f8cd 800c 	str.w	r8, [sp, #12]
 8002614:	2330      	movs	r3, #48	; 0x30
 8002616:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80027c0 <_svfiprintf_r+0x1ec>
 800261a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800261e:	f04f 0901 	mov.w	r9, #1
 8002622:	4623      	mov	r3, r4
 8002624:	469a      	mov	sl, r3
 8002626:	f813 2b01 	ldrb.w	r2, [r3], #1
 800262a:	b10a      	cbz	r2, 8002630 <_svfiprintf_r+0x5c>
 800262c:	2a25      	cmp	r2, #37	; 0x25
 800262e:	d1f9      	bne.n	8002624 <_svfiprintf_r+0x50>
 8002630:	ebba 0b04 	subs.w	fp, sl, r4
 8002634:	d00b      	beq.n	800264e <_svfiprintf_r+0x7a>
 8002636:	465b      	mov	r3, fp
 8002638:	4622      	mov	r2, r4
 800263a:	4629      	mov	r1, r5
 800263c:	4638      	mov	r0, r7
 800263e:	f7ff ff6d 	bl	800251c <__ssputs_r>
 8002642:	3001      	adds	r0, #1
 8002644:	f000 80aa 	beq.w	800279c <_svfiprintf_r+0x1c8>
 8002648:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800264a:	445a      	add	r2, fp
 800264c:	9209      	str	r2, [sp, #36]	; 0x24
 800264e:	f89a 3000 	ldrb.w	r3, [sl]
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 80a2 	beq.w	800279c <_svfiprintf_r+0x1c8>
 8002658:	2300      	movs	r3, #0
 800265a:	f04f 32ff 	mov.w	r2, #4294967295
 800265e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002662:	f10a 0a01 	add.w	sl, sl, #1
 8002666:	9304      	str	r3, [sp, #16]
 8002668:	9307      	str	r3, [sp, #28]
 800266a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800266e:	931a      	str	r3, [sp, #104]	; 0x68
 8002670:	4654      	mov	r4, sl
 8002672:	2205      	movs	r2, #5
 8002674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002678:	4851      	ldr	r0, [pc, #324]	; (80027c0 <_svfiprintf_r+0x1ec>)
 800267a:	f7fd fda9 	bl	80001d0 <memchr>
 800267e:	9a04      	ldr	r2, [sp, #16]
 8002680:	b9d8      	cbnz	r0, 80026ba <_svfiprintf_r+0xe6>
 8002682:	06d0      	lsls	r0, r2, #27
 8002684:	bf44      	itt	mi
 8002686:	2320      	movmi	r3, #32
 8002688:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800268c:	0711      	lsls	r1, r2, #28
 800268e:	bf44      	itt	mi
 8002690:	232b      	movmi	r3, #43	; 0x2b
 8002692:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002696:	f89a 3000 	ldrb.w	r3, [sl]
 800269a:	2b2a      	cmp	r3, #42	; 0x2a
 800269c:	d015      	beq.n	80026ca <_svfiprintf_r+0xf6>
 800269e:	9a07      	ldr	r2, [sp, #28]
 80026a0:	4654      	mov	r4, sl
 80026a2:	2000      	movs	r0, #0
 80026a4:	f04f 0c0a 	mov.w	ip, #10
 80026a8:	4621      	mov	r1, r4
 80026aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80026ae:	3b30      	subs	r3, #48	; 0x30
 80026b0:	2b09      	cmp	r3, #9
 80026b2:	d94e      	bls.n	8002752 <_svfiprintf_r+0x17e>
 80026b4:	b1b0      	cbz	r0, 80026e4 <_svfiprintf_r+0x110>
 80026b6:	9207      	str	r2, [sp, #28]
 80026b8:	e014      	b.n	80026e4 <_svfiprintf_r+0x110>
 80026ba:	eba0 0308 	sub.w	r3, r0, r8
 80026be:	fa09 f303 	lsl.w	r3, r9, r3
 80026c2:	4313      	orrs	r3, r2
 80026c4:	9304      	str	r3, [sp, #16]
 80026c6:	46a2      	mov	sl, r4
 80026c8:	e7d2      	b.n	8002670 <_svfiprintf_r+0x9c>
 80026ca:	9b03      	ldr	r3, [sp, #12]
 80026cc:	1d19      	adds	r1, r3, #4
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	9103      	str	r1, [sp, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	bfbb      	ittet	lt
 80026d6:	425b      	neglt	r3, r3
 80026d8:	f042 0202 	orrlt.w	r2, r2, #2
 80026dc:	9307      	strge	r3, [sp, #28]
 80026de:	9307      	strlt	r3, [sp, #28]
 80026e0:	bfb8      	it	lt
 80026e2:	9204      	strlt	r2, [sp, #16]
 80026e4:	7823      	ldrb	r3, [r4, #0]
 80026e6:	2b2e      	cmp	r3, #46	; 0x2e
 80026e8:	d10c      	bne.n	8002704 <_svfiprintf_r+0x130>
 80026ea:	7863      	ldrb	r3, [r4, #1]
 80026ec:	2b2a      	cmp	r3, #42	; 0x2a
 80026ee:	d135      	bne.n	800275c <_svfiprintf_r+0x188>
 80026f0:	9b03      	ldr	r3, [sp, #12]
 80026f2:	1d1a      	adds	r2, r3, #4
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	9203      	str	r2, [sp, #12]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	bfb8      	it	lt
 80026fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8002700:	3402      	adds	r4, #2
 8002702:	9305      	str	r3, [sp, #20]
 8002704:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80027d0 <_svfiprintf_r+0x1fc>
 8002708:	7821      	ldrb	r1, [r4, #0]
 800270a:	2203      	movs	r2, #3
 800270c:	4650      	mov	r0, sl
 800270e:	f7fd fd5f 	bl	80001d0 <memchr>
 8002712:	b140      	cbz	r0, 8002726 <_svfiprintf_r+0x152>
 8002714:	2340      	movs	r3, #64	; 0x40
 8002716:	eba0 000a 	sub.w	r0, r0, sl
 800271a:	fa03 f000 	lsl.w	r0, r3, r0
 800271e:	9b04      	ldr	r3, [sp, #16]
 8002720:	4303      	orrs	r3, r0
 8002722:	3401      	adds	r4, #1
 8002724:	9304      	str	r3, [sp, #16]
 8002726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800272a:	4826      	ldr	r0, [pc, #152]	; (80027c4 <_svfiprintf_r+0x1f0>)
 800272c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002730:	2206      	movs	r2, #6
 8002732:	f7fd fd4d 	bl	80001d0 <memchr>
 8002736:	2800      	cmp	r0, #0
 8002738:	d038      	beq.n	80027ac <_svfiprintf_r+0x1d8>
 800273a:	4b23      	ldr	r3, [pc, #140]	; (80027c8 <_svfiprintf_r+0x1f4>)
 800273c:	bb1b      	cbnz	r3, 8002786 <_svfiprintf_r+0x1b2>
 800273e:	9b03      	ldr	r3, [sp, #12]
 8002740:	3307      	adds	r3, #7
 8002742:	f023 0307 	bic.w	r3, r3, #7
 8002746:	3308      	adds	r3, #8
 8002748:	9303      	str	r3, [sp, #12]
 800274a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800274c:	4433      	add	r3, r6
 800274e:	9309      	str	r3, [sp, #36]	; 0x24
 8002750:	e767      	b.n	8002622 <_svfiprintf_r+0x4e>
 8002752:	fb0c 3202 	mla	r2, ip, r2, r3
 8002756:	460c      	mov	r4, r1
 8002758:	2001      	movs	r0, #1
 800275a:	e7a5      	b.n	80026a8 <_svfiprintf_r+0xd4>
 800275c:	2300      	movs	r3, #0
 800275e:	3401      	adds	r4, #1
 8002760:	9305      	str	r3, [sp, #20]
 8002762:	4619      	mov	r1, r3
 8002764:	f04f 0c0a 	mov.w	ip, #10
 8002768:	4620      	mov	r0, r4
 800276a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800276e:	3a30      	subs	r2, #48	; 0x30
 8002770:	2a09      	cmp	r2, #9
 8002772:	d903      	bls.n	800277c <_svfiprintf_r+0x1a8>
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0c5      	beq.n	8002704 <_svfiprintf_r+0x130>
 8002778:	9105      	str	r1, [sp, #20]
 800277a:	e7c3      	b.n	8002704 <_svfiprintf_r+0x130>
 800277c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002780:	4604      	mov	r4, r0
 8002782:	2301      	movs	r3, #1
 8002784:	e7f0      	b.n	8002768 <_svfiprintf_r+0x194>
 8002786:	ab03      	add	r3, sp, #12
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	462a      	mov	r2, r5
 800278c:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <_svfiprintf_r+0x1f8>)
 800278e:	a904      	add	r1, sp, #16
 8002790:	4638      	mov	r0, r7
 8002792:	f3af 8000 	nop.w
 8002796:	1c42      	adds	r2, r0, #1
 8002798:	4606      	mov	r6, r0
 800279a:	d1d6      	bne.n	800274a <_svfiprintf_r+0x176>
 800279c:	89ab      	ldrh	r3, [r5, #12]
 800279e:	065b      	lsls	r3, r3, #25
 80027a0:	f53f af2c 	bmi.w	80025fc <_svfiprintf_r+0x28>
 80027a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027a6:	b01d      	add	sp, #116	; 0x74
 80027a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027ac:	ab03      	add	r3, sp, #12
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	462a      	mov	r2, r5
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <_svfiprintf_r+0x1f8>)
 80027b4:	a904      	add	r1, sp, #16
 80027b6:	4638      	mov	r0, r7
 80027b8:	f000 f87a 	bl	80028b0 <_printf_i>
 80027bc:	e7eb      	b.n	8002796 <_svfiprintf_r+0x1c2>
 80027be:	bf00      	nop
 80027c0:	08002d64 	.word	0x08002d64
 80027c4:	08002d6e 	.word	0x08002d6e
 80027c8:	00000000 	.word	0x00000000
 80027cc:	0800251d 	.word	0x0800251d
 80027d0:	08002d6a 	.word	0x08002d6a

080027d4 <_printf_common>:
 80027d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027d8:	4616      	mov	r6, r2
 80027da:	4699      	mov	r9, r3
 80027dc:	688a      	ldr	r2, [r1, #8]
 80027de:	690b      	ldr	r3, [r1, #16]
 80027e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027e4:	4293      	cmp	r3, r2
 80027e6:	bfb8      	it	lt
 80027e8:	4613      	movlt	r3, r2
 80027ea:	6033      	str	r3, [r6, #0]
 80027ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027f0:	4607      	mov	r7, r0
 80027f2:	460c      	mov	r4, r1
 80027f4:	b10a      	cbz	r2, 80027fa <_printf_common+0x26>
 80027f6:	3301      	adds	r3, #1
 80027f8:	6033      	str	r3, [r6, #0]
 80027fa:	6823      	ldr	r3, [r4, #0]
 80027fc:	0699      	lsls	r1, r3, #26
 80027fe:	bf42      	ittt	mi
 8002800:	6833      	ldrmi	r3, [r6, #0]
 8002802:	3302      	addmi	r3, #2
 8002804:	6033      	strmi	r3, [r6, #0]
 8002806:	6825      	ldr	r5, [r4, #0]
 8002808:	f015 0506 	ands.w	r5, r5, #6
 800280c:	d106      	bne.n	800281c <_printf_common+0x48>
 800280e:	f104 0a19 	add.w	sl, r4, #25
 8002812:	68e3      	ldr	r3, [r4, #12]
 8002814:	6832      	ldr	r2, [r6, #0]
 8002816:	1a9b      	subs	r3, r3, r2
 8002818:	42ab      	cmp	r3, r5
 800281a:	dc26      	bgt.n	800286a <_printf_common+0x96>
 800281c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002820:	1e13      	subs	r3, r2, #0
 8002822:	6822      	ldr	r2, [r4, #0]
 8002824:	bf18      	it	ne
 8002826:	2301      	movne	r3, #1
 8002828:	0692      	lsls	r2, r2, #26
 800282a:	d42b      	bmi.n	8002884 <_printf_common+0xb0>
 800282c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002830:	4649      	mov	r1, r9
 8002832:	4638      	mov	r0, r7
 8002834:	47c0      	blx	r8
 8002836:	3001      	adds	r0, #1
 8002838:	d01e      	beq.n	8002878 <_printf_common+0xa4>
 800283a:	6823      	ldr	r3, [r4, #0]
 800283c:	68e5      	ldr	r5, [r4, #12]
 800283e:	6832      	ldr	r2, [r6, #0]
 8002840:	f003 0306 	and.w	r3, r3, #6
 8002844:	2b04      	cmp	r3, #4
 8002846:	bf08      	it	eq
 8002848:	1aad      	subeq	r5, r5, r2
 800284a:	68a3      	ldr	r3, [r4, #8]
 800284c:	6922      	ldr	r2, [r4, #16]
 800284e:	bf0c      	ite	eq
 8002850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002854:	2500      	movne	r5, #0
 8002856:	4293      	cmp	r3, r2
 8002858:	bfc4      	itt	gt
 800285a:	1a9b      	subgt	r3, r3, r2
 800285c:	18ed      	addgt	r5, r5, r3
 800285e:	2600      	movs	r6, #0
 8002860:	341a      	adds	r4, #26
 8002862:	42b5      	cmp	r5, r6
 8002864:	d11a      	bne.n	800289c <_printf_common+0xc8>
 8002866:	2000      	movs	r0, #0
 8002868:	e008      	b.n	800287c <_printf_common+0xa8>
 800286a:	2301      	movs	r3, #1
 800286c:	4652      	mov	r2, sl
 800286e:	4649      	mov	r1, r9
 8002870:	4638      	mov	r0, r7
 8002872:	47c0      	blx	r8
 8002874:	3001      	adds	r0, #1
 8002876:	d103      	bne.n	8002880 <_printf_common+0xac>
 8002878:	f04f 30ff 	mov.w	r0, #4294967295
 800287c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002880:	3501      	adds	r5, #1
 8002882:	e7c6      	b.n	8002812 <_printf_common+0x3e>
 8002884:	18e1      	adds	r1, r4, r3
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	2030      	movs	r0, #48	; 0x30
 800288a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800288e:	4422      	add	r2, r4
 8002890:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002894:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002898:	3302      	adds	r3, #2
 800289a:	e7c7      	b.n	800282c <_printf_common+0x58>
 800289c:	2301      	movs	r3, #1
 800289e:	4622      	mov	r2, r4
 80028a0:	4649      	mov	r1, r9
 80028a2:	4638      	mov	r0, r7
 80028a4:	47c0      	blx	r8
 80028a6:	3001      	adds	r0, #1
 80028a8:	d0e6      	beq.n	8002878 <_printf_common+0xa4>
 80028aa:	3601      	adds	r6, #1
 80028ac:	e7d9      	b.n	8002862 <_printf_common+0x8e>
	...

080028b0 <_printf_i>:
 80028b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028b4:	460c      	mov	r4, r1
 80028b6:	4691      	mov	r9, r2
 80028b8:	7e27      	ldrb	r7, [r4, #24]
 80028ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80028bc:	2f78      	cmp	r7, #120	; 0x78
 80028be:	4680      	mov	r8, r0
 80028c0:	469a      	mov	sl, r3
 80028c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80028c6:	d807      	bhi.n	80028d8 <_printf_i+0x28>
 80028c8:	2f62      	cmp	r7, #98	; 0x62
 80028ca:	d80a      	bhi.n	80028e2 <_printf_i+0x32>
 80028cc:	2f00      	cmp	r7, #0
 80028ce:	f000 80d8 	beq.w	8002a82 <_printf_i+0x1d2>
 80028d2:	2f58      	cmp	r7, #88	; 0x58
 80028d4:	f000 80a3 	beq.w	8002a1e <_printf_i+0x16e>
 80028d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80028dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80028e0:	e03a      	b.n	8002958 <_printf_i+0xa8>
 80028e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80028e6:	2b15      	cmp	r3, #21
 80028e8:	d8f6      	bhi.n	80028d8 <_printf_i+0x28>
 80028ea:	a001      	add	r0, pc, #4	; (adr r0, 80028f0 <_printf_i+0x40>)
 80028ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80028f0:	08002949 	.word	0x08002949
 80028f4:	0800295d 	.word	0x0800295d
 80028f8:	080028d9 	.word	0x080028d9
 80028fc:	080028d9 	.word	0x080028d9
 8002900:	080028d9 	.word	0x080028d9
 8002904:	080028d9 	.word	0x080028d9
 8002908:	0800295d 	.word	0x0800295d
 800290c:	080028d9 	.word	0x080028d9
 8002910:	080028d9 	.word	0x080028d9
 8002914:	080028d9 	.word	0x080028d9
 8002918:	080028d9 	.word	0x080028d9
 800291c:	08002a69 	.word	0x08002a69
 8002920:	0800298d 	.word	0x0800298d
 8002924:	08002a4b 	.word	0x08002a4b
 8002928:	080028d9 	.word	0x080028d9
 800292c:	080028d9 	.word	0x080028d9
 8002930:	08002a8b 	.word	0x08002a8b
 8002934:	080028d9 	.word	0x080028d9
 8002938:	0800298d 	.word	0x0800298d
 800293c:	080028d9 	.word	0x080028d9
 8002940:	080028d9 	.word	0x080028d9
 8002944:	08002a53 	.word	0x08002a53
 8002948:	680b      	ldr	r3, [r1, #0]
 800294a:	1d1a      	adds	r2, r3, #4
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	600a      	str	r2, [r1, #0]
 8002950:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002954:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002958:	2301      	movs	r3, #1
 800295a:	e0a3      	b.n	8002aa4 <_printf_i+0x1f4>
 800295c:	6825      	ldr	r5, [r4, #0]
 800295e:	6808      	ldr	r0, [r1, #0]
 8002960:	062e      	lsls	r6, r5, #24
 8002962:	f100 0304 	add.w	r3, r0, #4
 8002966:	d50a      	bpl.n	800297e <_printf_i+0xce>
 8002968:	6805      	ldr	r5, [r0, #0]
 800296a:	600b      	str	r3, [r1, #0]
 800296c:	2d00      	cmp	r5, #0
 800296e:	da03      	bge.n	8002978 <_printf_i+0xc8>
 8002970:	232d      	movs	r3, #45	; 0x2d
 8002972:	426d      	negs	r5, r5
 8002974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002978:	485e      	ldr	r0, [pc, #376]	; (8002af4 <_printf_i+0x244>)
 800297a:	230a      	movs	r3, #10
 800297c:	e019      	b.n	80029b2 <_printf_i+0x102>
 800297e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002982:	6805      	ldr	r5, [r0, #0]
 8002984:	600b      	str	r3, [r1, #0]
 8002986:	bf18      	it	ne
 8002988:	b22d      	sxthne	r5, r5
 800298a:	e7ef      	b.n	800296c <_printf_i+0xbc>
 800298c:	680b      	ldr	r3, [r1, #0]
 800298e:	6825      	ldr	r5, [r4, #0]
 8002990:	1d18      	adds	r0, r3, #4
 8002992:	6008      	str	r0, [r1, #0]
 8002994:	0628      	lsls	r0, r5, #24
 8002996:	d501      	bpl.n	800299c <_printf_i+0xec>
 8002998:	681d      	ldr	r5, [r3, #0]
 800299a:	e002      	b.n	80029a2 <_printf_i+0xf2>
 800299c:	0669      	lsls	r1, r5, #25
 800299e:	d5fb      	bpl.n	8002998 <_printf_i+0xe8>
 80029a0:	881d      	ldrh	r5, [r3, #0]
 80029a2:	4854      	ldr	r0, [pc, #336]	; (8002af4 <_printf_i+0x244>)
 80029a4:	2f6f      	cmp	r7, #111	; 0x6f
 80029a6:	bf0c      	ite	eq
 80029a8:	2308      	moveq	r3, #8
 80029aa:	230a      	movne	r3, #10
 80029ac:	2100      	movs	r1, #0
 80029ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80029b2:	6866      	ldr	r6, [r4, #4]
 80029b4:	60a6      	str	r6, [r4, #8]
 80029b6:	2e00      	cmp	r6, #0
 80029b8:	bfa2      	ittt	ge
 80029ba:	6821      	ldrge	r1, [r4, #0]
 80029bc:	f021 0104 	bicge.w	r1, r1, #4
 80029c0:	6021      	strge	r1, [r4, #0]
 80029c2:	b90d      	cbnz	r5, 80029c8 <_printf_i+0x118>
 80029c4:	2e00      	cmp	r6, #0
 80029c6:	d04d      	beq.n	8002a64 <_printf_i+0x1b4>
 80029c8:	4616      	mov	r6, r2
 80029ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80029ce:	fb03 5711 	mls	r7, r3, r1, r5
 80029d2:	5dc7      	ldrb	r7, [r0, r7]
 80029d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80029d8:	462f      	mov	r7, r5
 80029da:	42bb      	cmp	r3, r7
 80029dc:	460d      	mov	r5, r1
 80029de:	d9f4      	bls.n	80029ca <_printf_i+0x11a>
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d10b      	bne.n	80029fc <_printf_i+0x14c>
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	07df      	lsls	r7, r3, #31
 80029e8:	d508      	bpl.n	80029fc <_printf_i+0x14c>
 80029ea:	6923      	ldr	r3, [r4, #16]
 80029ec:	6861      	ldr	r1, [r4, #4]
 80029ee:	4299      	cmp	r1, r3
 80029f0:	bfde      	ittt	le
 80029f2:	2330      	movle	r3, #48	; 0x30
 80029f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80029f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80029fc:	1b92      	subs	r2, r2, r6
 80029fe:	6122      	str	r2, [r4, #16]
 8002a00:	f8cd a000 	str.w	sl, [sp]
 8002a04:	464b      	mov	r3, r9
 8002a06:	aa03      	add	r2, sp, #12
 8002a08:	4621      	mov	r1, r4
 8002a0a:	4640      	mov	r0, r8
 8002a0c:	f7ff fee2 	bl	80027d4 <_printf_common>
 8002a10:	3001      	adds	r0, #1
 8002a12:	d14c      	bne.n	8002aae <_printf_i+0x1fe>
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295
 8002a18:	b004      	add	sp, #16
 8002a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a1e:	4835      	ldr	r0, [pc, #212]	; (8002af4 <_printf_i+0x244>)
 8002a20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002a24:	6823      	ldr	r3, [r4, #0]
 8002a26:	680e      	ldr	r6, [r1, #0]
 8002a28:	061f      	lsls	r7, r3, #24
 8002a2a:	f856 5b04 	ldr.w	r5, [r6], #4
 8002a2e:	600e      	str	r6, [r1, #0]
 8002a30:	d514      	bpl.n	8002a5c <_printf_i+0x1ac>
 8002a32:	07d9      	lsls	r1, r3, #31
 8002a34:	bf44      	itt	mi
 8002a36:	f043 0320 	orrmi.w	r3, r3, #32
 8002a3a:	6023      	strmi	r3, [r4, #0]
 8002a3c:	b91d      	cbnz	r5, 8002a46 <_printf_i+0x196>
 8002a3e:	6823      	ldr	r3, [r4, #0]
 8002a40:	f023 0320 	bic.w	r3, r3, #32
 8002a44:	6023      	str	r3, [r4, #0]
 8002a46:	2310      	movs	r3, #16
 8002a48:	e7b0      	b.n	80029ac <_printf_i+0xfc>
 8002a4a:	6823      	ldr	r3, [r4, #0]
 8002a4c:	f043 0320 	orr.w	r3, r3, #32
 8002a50:	6023      	str	r3, [r4, #0]
 8002a52:	2378      	movs	r3, #120	; 0x78
 8002a54:	4828      	ldr	r0, [pc, #160]	; (8002af8 <_printf_i+0x248>)
 8002a56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a5a:	e7e3      	b.n	8002a24 <_printf_i+0x174>
 8002a5c:	065e      	lsls	r6, r3, #25
 8002a5e:	bf48      	it	mi
 8002a60:	b2ad      	uxthmi	r5, r5
 8002a62:	e7e6      	b.n	8002a32 <_printf_i+0x182>
 8002a64:	4616      	mov	r6, r2
 8002a66:	e7bb      	b.n	80029e0 <_printf_i+0x130>
 8002a68:	680b      	ldr	r3, [r1, #0]
 8002a6a:	6826      	ldr	r6, [r4, #0]
 8002a6c:	6960      	ldr	r0, [r4, #20]
 8002a6e:	1d1d      	adds	r5, r3, #4
 8002a70:	600d      	str	r5, [r1, #0]
 8002a72:	0635      	lsls	r5, r6, #24
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	d501      	bpl.n	8002a7c <_printf_i+0x1cc>
 8002a78:	6018      	str	r0, [r3, #0]
 8002a7a:	e002      	b.n	8002a82 <_printf_i+0x1d2>
 8002a7c:	0671      	lsls	r1, r6, #25
 8002a7e:	d5fb      	bpl.n	8002a78 <_printf_i+0x1c8>
 8002a80:	8018      	strh	r0, [r3, #0]
 8002a82:	2300      	movs	r3, #0
 8002a84:	6123      	str	r3, [r4, #16]
 8002a86:	4616      	mov	r6, r2
 8002a88:	e7ba      	b.n	8002a00 <_printf_i+0x150>
 8002a8a:	680b      	ldr	r3, [r1, #0]
 8002a8c:	1d1a      	adds	r2, r3, #4
 8002a8e:	600a      	str	r2, [r1, #0]
 8002a90:	681e      	ldr	r6, [r3, #0]
 8002a92:	6862      	ldr	r2, [r4, #4]
 8002a94:	2100      	movs	r1, #0
 8002a96:	4630      	mov	r0, r6
 8002a98:	f7fd fb9a 	bl	80001d0 <memchr>
 8002a9c:	b108      	cbz	r0, 8002aa2 <_printf_i+0x1f2>
 8002a9e:	1b80      	subs	r0, r0, r6
 8002aa0:	6060      	str	r0, [r4, #4]
 8002aa2:	6863      	ldr	r3, [r4, #4]
 8002aa4:	6123      	str	r3, [r4, #16]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002aac:	e7a8      	b.n	8002a00 <_printf_i+0x150>
 8002aae:	6923      	ldr	r3, [r4, #16]
 8002ab0:	4632      	mov	r2, r6
 8002ab2:	4649      	mov	r1, r9
 8002ab4:	4640      	mov	r0, r8
 8002ab6:	47d0      	blx	sl
 8002ab8:	3001      	adds	r0, #1
 8002aba:	d0ab      	beq.n	8002a14 <_printf_i+0x164>
 8002abc:	6823      	ldr	r3, [r4, #0]
 8002abe:	079b      	lsls	r3, r3, #30
 8002ac0:	d413      	bmi.n	8002aea <_printf_i+0x23a>
 8002ac2:	68e0      	ldr	r0, [r4, #12]
 8002ac4:	9b03      	ldr	r3, [sp, #12]
 8002ac6:	4298      	cmp	r0, r3
 8002ac8:	bfb8      	it	lt
 8002aca:	4618      	movlt	r0, r3
 8002acc:	e7a4      	b.n	8002a18 <_printf_i+0x168>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	4632      	mov	r2, r6
 8002ad2:	4649      	mov	r1, r9
 8002ad4:	4640      	mov	r0, r8
 8002ad6:	47d0      	blx	sl
 8002ad8:	3001      	adds	r0, #1
 8002ada:	d09b      	beq.n	8002a14 <_printf_i+0x164>
 8002adc:	3501      	adds	r5, #1
 8002ade:	68e3      	ldr	r3, [r4, #12]
 8002ae0:	9903      	ldr	r1, [sp, #12]
 8002ae2:	1a5b      	subs	r3, r3, r1
 8002ae4:	42ab      	cmp	r3, r5
 8002ae6:	dcf2      	bgt.n	8002ace <_printf_i+0x21e>
 8002ae8:	e7eb      	b.n	8002ac2 <_printf_i+0x212>
 8002aea:	2500      	movs	r5, #0
 8002aec:	f104 0619 	add.w	r6, r4, #25
 8002af0:	e7f5      	b.n	8002ade <_printf_i+0x22e>
 8002af2:	bf00      	nop
 8002af4:	08002d75 	.word	0x08002d75
 8002af8:	08002d86 	.word	0x08002d86

08002afc <memcpy>:
 8002afc:	440a      	add	r2, r1
 8002afe:	4291      	cmp	r1, r2
 8002b00:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b04:	d100      	bne.n	8002b08 <memcpy+0xc>
 8002b06:	4770      	bx	lr
 8002b08:	b510      	push	{r4, lr}
 8002b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b12:	4291      	cmp	r1, r2
 8002b14:	d1f9      	bne.n	8002b0a <memcpy+0xe>
 8002b16:	bd10      	pop	{r4, pc}

08002b18 <memmove>:
 8002b18:	4288      	cmp	r0, r1
 8002b1a:	b510      	push	{r4, lr}
 8002b1c:	eb01 0402 	add.w	r4, r1, r2
 8002b20:	d902      	bls.n	8002b28 <memmove+0x10>
 8002b22:	4284      	cmp	r4, r0
 8002b24:	4623      	mov	r3, r4
 8002b26:	d807      	bhi.n	8002b38 <memmove+0x20>
 8002b28:	1e43      	subs	r3, r0, #1
 8002b2a:	42a1      	cmp	r1, r4
 8002b2c:	d008      	beq.n	8002b40 <memmove+0x28>
 8002b2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002b36:	e7f8      	b.n	8002b2a <memmove+0x12>
 8002b38:	4402      	add	r2, r0
 8002b3a:	4601      	mov	r1, r0
 8002b3c:	428a      	cmp	r2, r1
 8002b3e:	d100      	bne.n	8002b42 <memmove+0x2a>
 8002b40:	bd10      	pop	{r4, pc}
 8002b42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002b46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002b4a:	e7f7      	b.n	8002b3c <memmove+0x24>

08002b4c <_free_r>:
 8002b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002b4e:	2900      	cmp	r1, #0
 8002b50:	d048      	beq.n	8002be4 <_free_r+0x98>
 8002b52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b56:	9001      	str	r0, [sp, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f1a1 0404 	sub.w	r4, r1, #4
 8002b5e:	bfb8      	it	lt
 8002b60:	18e4      	addlt	r4, r4, r3
 8002b62:	f000 f8d3 	bl	8002d0c <__malloc_lock>
 8002b66:	4a20      	ldr	r2, [pc, #128]	; (8002be8 <_free_r+0x9c>)
 8002b68:	9801      	ldr	r0, [sp, #4]
 8002b6a:	6813      	ldr	r3, [r2, #0]
 8002b6c:	4615      	mov	r5, r2
 8002b6e:	b933      	cbnz	r3, 8002b7e <_free_r+0x32>
 8002b70:	6063      	str	r3, [r4, #4]
 8002b72:	6014      	str	r4, [r2, #0]
 8002b74:	b003      	add	sp, #12
 8002b76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b7a:	f000 b8cd 	b.w	8002d18 <__malloc_unlock>
 8002b7e:	42a3      	cmp	r3, r4
 8002b80:	d90b      	bls.n	8002b9a <_free_r+0x4e>
 8002b82:	6821      	ldr	r1, [r4, #0]
 8002b84:	1862      	adds	r2, r4, r1
 8002b86:	4293      	cmp	r3, r2
 8002b88:	bf04      	itt	eq
 8002b8a:	681a      	ldreq	r2, [r3, #0]
 8002b8c:	685b      	ldreq	r3, [r3, #4]
 8002b8e:	6063      	str	r3, [r4, #4]
 8002b90:	bf04      	itt	eq
 8002b92:	1852      	addeq	r2, r2, r1
 8002b94:	6022      	streq	r2, [r4, #0]
 8002b96:	602c      	str	r4, [r5, #0]
 8002b98:	e7ec      	b.n	8002b74 <_free_r+0x28>
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	b10b      	cbz	r3, 8002ba4 <_free_r+0x58>
 8002ba0:	42a3      	cmp	r3, r4
 8002ba2:	d9fa      	bls.n	8002b9a <_free_r+0x4e>
 8002ba4:	6811      	ldr	r1, [r2, #0]
 8002ba6:	1855      	adds	r5, r2, r1
 8002ba8:	42a5      	cmp	r5, r4
 8002baa:	d10b      	bne.n	8002bc4 <_free_r+0x78>
 8002bac:	6824      	ldr	r4, [r4, #0]
 8002bae:	4421      	add	r1, r4
 8002bb0:	1854      	adds	r4, r2, r1
 8002bb2:	42a3      	cmp	r3, r4
 8002bb4:	6011      	str	r1, [r2, #0]
 8002bb6:	d1dd      	bne.n	8002b74 <_free_r+0x28>
 8002bb8:	681c      	ldr	r4, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	6053      	str	r3, [r2, #4]
 8002bbe:	4421      	add	r1, r4
 8002bc0:	6011      	str	r1, [r2, #0]
 8002bc2:	e7d7      	b.n	8002b74 <_free_r+0x28>
 8002bc4:	d902      	bls.n	8002bcc <_free_r+0x80>
 8002bc6:	230c      	movs	r3, #12
 8002bc8:	6003      	str	r3, [r0, #0]
 8002bca:	e7d3      	b.n	8002b74 <_free_r+0x28>
 8002bcc:	6825      	ldr	r5, [r4, #0]
 8002bce:	1961      	adds	r1, r4, r5
 8002bd0:	428b      	cmp	r3, r1
 8002bd2:	bf04      	itt	eq
 8002bd4:	6819      	ldreq	r1, [r3, #0]
 8002bd6:	685b      	ldreq	r3, [r3, #4]
 8002bd8:	6063      	str	r3, [r4, #4]
 8002bda:	bf04      	itt	eq
 8002bdc:	1949      	addeq	r1, r1, r5
 8002bde:	6021      	streq	r1, [r4, #0]
 8002be0:	6054      	str	r4, [r2, #4]
 8002be2:	e7c7      	b.n	8002b74 <_free_r+0x28>
 8002be4:	b003      	add	sp, #12
 8002be6:	bd30      	pop	{r4, r5, pc}
 8002be8:	20000090 	.word	0x20000090

08002bec <_malloc_r>:
 8002bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bee:	1ccd      	adds	r5, r1, #3
 8002bf0:	f025 0503 	bic.w	r5, r5, #3
 8002bf4:	3508      	adds	r5, #8
 8002bf6:	2d0c      	cmp	r5, #12
 8002bf8:	bf38      	it	cc
 8002bfa:	250c      	movcc	r5, #12
 8002bfc:	2d00      	cmp	r5, #0
 8002bfe:	4606      	mov	r6, r0
 8002c00:	db01      	blt.n	8002c06 <_malloc_r+0x1a>
 8002c02:	42a9      	cmp	r1, r5
 8002c04:	d903      	bls.n	8002c0e <_malloc_r+0x22>
 8002c06:	230c      	movs	r3, #12
 8002c08:	6033      	str	r3, [r6, #0]
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c0e:	f000 f87d 	bl	8002d0c <__malloc_lock>
 8002c12:	4921      	ldr	r1, [pc, #132]	; (8002c98 <_malloc_r+0xac>)
 8002c14:	680a      	ldr	r2, [r1, #0]
 8002c16:	4614      	mov	r4, r2
 8002c18:	b99c      	cbnz	r4, 8002c42 <_malloc_r+0x56>
 8002c1a:	4f20      	ldr	r7, [pc, #128]	; (8002c9c <_malloc_r+0xb0>)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	b923      	cbnz	r3, 8002c2a <_malloc_r+0x3e>
 8002c20:	4621      	mov	r1, r4
 8002c22:	4630      	mov	r0, r6
 8002c24:	f000 f862 	bl	8002cec <_sbrk_r>
 8002c28:	6038      	str	r0, [r7, #0]
 8002c2a:	4629      	mov	r1, r5
 8002c2c:	4630      	mov	r0, r6
 8002c2e:	f000 f85d 	bl	8002cec <_sbrk_r>
 8002c32:	1c43      	adds	r3, r0, #1
 8002c34:	d123      	bne.n	8002c7e <_malloc_r+0x92>
 8002c36:	230c      	movs	r3, #12
 8002c38:	6033      	str	r3, [r6, #0]
 8002c3a:	4630      	mov	r0, r6
 8002c3c:	f000 f86c 	bl	8002d18 <__malloc_unlock>
 8002c40:	e7e3      	b.n	8002c0a <_malloc_r+0x1e>
 8002c42:	6823      	ldr	r3, [r4, #0]
 8002c44:	1b5b      	subs	r3, r3, r5
 8002c46:	d417      	bmi.n	8002c78 <_malloc_r+0x8c>
 8002c48:	2b0b      	cmp	r3, #11
 8002c4a:	d903      	bls.n	8002c54 <_malloc_r+0x68>
 8002c4c:	6023      	str	r3, [r4, #0]
 8002c4e:	441c      	add	r4, r3
 8002c50:	6025      	str	r5, [r4, #0]
 8002c52:	e004      	b.n	8002c5e <_malloc_r+0x72>
 8002c54:	6863      	ldr	r3, [r4, #4]
 8002c56:	42a2      	cmp	r2, r4
 8002c58:	bf0c      	ite	eq
 8002c5a:	600b      	streq	r3, [r1, #0]
 8002c5c:	6053      	strne	r3, [r2, #4]
 8002c5e:	4630      	mov	r0, r6
 8002c60:	f000 f85a 	bl	8002d18 <__malloc_unlock>
 8002c64:	f104 000b 	add.w	r0, r4, #11
 8002c68:	1d23      	adds	r3, r4, #4
 8002c6a:	f020 0007 	bic.w	r0, r0, #7
 8002c6e:	1ac2      	subs	r2, r0, r3
 8002c70:	d0cc      	beq.n	8002c0c <_malloc_r+0x20>
 8002c72:	1a1b      	subs	r3, r3, r0
 8002c74:	50a3      	str	r3, [r4, r2]
 8002c76:	e7c9      	b.n	8002c0c <_malloc_r+0x20>
 8002c78:	4622      	mov	r2, r4
 8002c7a:	6864      	ldr	r4, [r4, #4]
 8002c7c:	e7cc      	b.n	8002c18 <_malloc_r+0x2c>
 8002c7e:	1cc4      	adds	r4, r0, #3
 8002c80:	f024 0403 	bic.w	r4, r4, #3
 8002c84:	42a0      	cmp	r0, r4
 8002c86:	d0e3      	beq.n	8002c50 <_malloc_r+0x64>
 8002c88:	1a21      	subs	r1, r4, r0
 8002c8a:	4630      	mov	r0, r6
 8002c8c:	f000 f82e 	bl	8002cec <_sbrk_r>
 8002c90:	3001      	adds	r0, #1
 8002c92:	d1dd      	bne.n	8002c50 <_malloc_r+0x64>
 8002c94:	e7cf      	b.n	8002c36 <_malloc_r+0x4a>
 8002c96:	bf00      	nop
 8002c98:	20000090 	.word	0x20000090
 8002c9c:	20000094 	.word	0x20000094

08002ca0 <_realloc_r>:
 8002ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca2:	4607      	mov	r7, r0
 8002ca4:	4614      	mov	r4, r2
 8002ca6:	460e      	mov	r6, r1
 8002ca8:	b921      	cbnz	r1, 8002cb4 <_realloc_r+0x14>
 8002caa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002cae:	4611      	mov	r1, r2
 8002cb0:	f7ff bf9c 	b.w	8002bec <_malloc_r>
 8002cb4:	b922      	cbnz	r2, 8002cc0 <_realloc_r+0x20>
 8002cb6:	f7ff ff49 	bl	8002b4c <_free_r>
 8002cba:	4625      	mov	r5, r4
 8002cbc:	4628      	mov	r0, r5
 8002cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cc0:	f000 f830 	bl	8002d24 <_malloc_usable_size_r>
 8002cc4:	42a0      	cmp	r0, r4
 8002cc6:	d20f      	bcs.n	8002ce8 <_realloc_r+0x48>
 8002cc8:	4621      	mov	r1, r4
 8002cca:	4638      	mov	r0, r7
 8002ccc:	f7ff ff8e 	bl	8002bec <_malloc_r>
 8002cd0:	4605      	mov	r5, r0
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	d0f2      	beq.n	8002cbc <_realloc_r+0x1c>
 8002cd6:	4631      	mov	r1, r6
 8002cd8:	4622      	mov	r2, r4
 8002cda:	f7ff ff0f 	bl	8002afc <memcpy>
 8002cde:	4631      	mov	r1, r6
 8002ce0:	4638      	mov	r0, r7
 8002ce2:	f7ff ff33 	bl	8002b4c <_free_r>
 8002ce6:	e7e9      	b.n	8002cbc <_realloc_r+0x1c>
 8002ce8:	4635      	mov	r5, r6
 8002cea:	e7e7      	b.n	8002cbc <_realloc_r+0x1c>

08002cec <_sbrk_r>:
 8002cec:	b538      	push	{r3, r4, r5, lr}
 8002cee:	4d06      	ldr	r5, [pc, #24]	; (8002d08 <_sbrk_r+0x1c>)
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	4604      	mov	r4, r0
 8002cf4:	4608      	mov	r0, r1
 8002cf6:	602b      	str	r3, [r5, #0]
 8002cf8:	f7fe f806 	bl	8000d08 <_sbrk>
 8002cfc:	1c43      	adds	r3, r0, #1
 8002cfe:	d102      	bne.n	8002d06 <_sbrk_r+0x1a>
 8002d00:	682b      	ldr	r3, [r5, #0]
 8002d02:	b103      	cbz	r3, 8002d06 <_sbrk_r+0x1a>
 8002d04:	6023      	str	r3, [r4, #0]
 8002d06:	bd38      	pop	{r3, r4, r5, pc}
 8002d08:	200000e4 	.word	0x200000e4

08002d0c <__malloc_lock>:
 8002d0c:	4801      	ldr	r0, [pc, #4]	; (8002d14 <__malloc_lock+0x8>)
 8002d0e:	f000 b811 	b.w	8002d34 <__retarget_lock_acquire_recursive>
 8002d12:	bf00      	nop
 8002d14:	200000ec 	.word	0x200000ec

08002d18 <__malloc_unlock>:
 8002d18:	4801      	ldr	r0, [pc, #4]	; (8002d20 <__malloc_unlock+0x8>)
 8002d1a:	f000 b80c 	b.w	8002d36 <__retarget_lock_release_recursive>
 8002d1e:	bf00      	nop
 8002d20:	200000ec 	.word	0x200000ec

08002d24 <_malloc_usable_size_r>:
 8002d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d28:	1f18      	subs	r0, r3, #4
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	bfbc      	itt	lt
 8002d2e:	580b      	ldrlt	r3, [r1, r0]
 8002d30:	18c0      	addlt	r0, r0, r3
 8002d32:	4770      	bx	lr

08002d34 <__retarget_lock_acquire_recursive>:
 8002d34:	4770      	bx	lr

08002d36 <__retarget_lock_release_recursive>:
 8002d36:	4770      	bx	lr

08002d38 <_init>:
 8002d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3a:	bf00      	nop
 8002d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d3e:	bc08      	pop	{r3}
 8002d40:	469e      	mov	lr, r3
 8002d42:	4770      	bx	lr

08002d44 <_fini>:
 8002d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d46:	bf00      	nop
 8002d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d4a:	bc08      	pop	{r3}
 8002d4c:	469e      	mov	lr, r3
 8002d4e:	4770      	bx	lr
